牛犇

 第一阶段课程内容共19天
 云计算系统管理、 云计算应用管理、系统&服务管理进阶

 云计算系统管理	
  DAY01	开学典礼、云计算介绍、TCP/IP协议及配置		
  DAY02	Linux系统简介、安装RHEL7系统、RHEL7基本操作	
  DAY03	命令行基础、 目录和文件管理	、  教学环境介绍
  DAY04	软件包管理、配置网络、文本/文件查找	
  DAY05	管理用户和组、tar备份与恢复、NTP时间同步、cron计划任务
  DAY06	权限和归属、使用LDAP认证、家目录漫游
  DAY07	综合串讲	、综合练习
		
 云计算应用管理	
	DAY01	分区规划及使用、LVM逻辑卷		
	DAY02	Shell脚本基础、使用变量、条件测试及选择、列表式循环
	DAY03	系统安全保护、配置用户环境	、配置高级连接、防火墙策略管理	
	DAY04	配置SMB共享、配置NFS共享		
	DAY05	ISCSI共享存储、数据库服务基础、管理表数据	
	DAY06	HTTP服务基础、网页内容访问、部署动态网站	
	DAY07	综合串讲	、综合练习
		
 系统&服务管理进阶	
	DAY01	扩展的几个应用、发布网络YUM源、vim编辑技巧、源码编译安装、systemctl控制
  DAY02	DNS服务基础、特殊解析、DNS子域授权、缓存DNS
  DAY03	Split分离解析、RAID磁盘阵列、进程管理、日志管理
  DAY04	批量装机环境、配置PXE引导、kickstart自动应答	
  DAY05	rsync同步操作、inotify实时同步、Cobbler网络装机		
##################################################################################################
  准备笔记本与笔，先讲解后练习，勤奋的练习


     每日课程安排
                      8:30-------9:15        休息15分钟                 
                      9:30-------10:10      休息10分钟
                      10:20------11:05     休息15分钟
                      11:20------12:00 
   
                      14:00------14:45      休息15分钟               
                      15:00------15:50      休息15分钟
                      16:05------16:50      休息15分钟 
                      17:05------18:00      休息15分钟



##################################################################
一、教学环境

   真机：Linux系统   用户名:root(管理员)  密码：Taren1

虚拟机软件  VMware(Windows)   KVM(Linux)
   作用：可以虚拟计算机硬件

   虚拟机：独立存在，虚拟机损坏，真机无关

什么是服务器
• 能够为其他计算机提供服务的更高级的电脑


典型服务模式
• C/S,Client/Server架构
– 由服务器提供资源或某种功能
– 客户机使用资源或功能

####################################################
TCP/IP协议简介
• TCP/IP是最广泛支持的通信协议集合
  – 包括大量Internet应用中的标准协议
  – 支持跨网络架构、跨操作系统平台的通信


• 主机与主机之间通信的三个要素
 – IP地址(IP address)
  – 子网掩码(subnet mask)
 – IP路由(IP router)

 IP地址：唯一标识计算机

    – 一共32个二进制位
    – 表示为4个十进制数,以 . 隔开

 IP的分类:
• 用于一般计算机网络
  – A类:1 ~ 127    网+主+主+主        10.0.0.0～10.255.255.255
  – B类:128 ~ 191 网+网+主+主       172.16.0.0～172.31.255.255
  – C类:192 ~ 223    网+网+网+主   192.168.0.0～192.168.255.255
• 组播及科研专用
  – D类:224 ~ 239 组播       224.0.0.0~239.0.0.0
  – E类:240 ~ 254 科研       240.0.0.0~254.0.0.0

  IP地址组成： 网络位+主机位

    座机号：  0316  7351234     廊坊
                   010  12345678    北京

     网络位：标识网络
     192.168.1.1 ----->192.168.1该网络中的编号为1的主机
     192.168.2.1 ----->192.168.2该网络中的编号为1的主机
     1.2.3.4------->1该网络中的编号为2.3.4的主机

#######################################################
配置IP地址
     配置方法： 1.自动获取（前提网络中有一个DHCP服务器）
                      2.手工配置


子网掩码：标识IP地址的网络位与主机位,用1代表网络位 用0代表主机位

IP地址表示:   192.168.1.10              255.255.255.0

IP地址表示:   192.168.1.10/24        代表有24个网络位


操作步骤:

– 右击桌面网络---> 属性---> 更改适配器设置
– 双击“本地连接”---> 属性
– 双击“Internet协议版本4 (TCP/IPv4)”
– 配置完成后,单击“确定”完成
 
查看IP地址

   1.图形方式：

   2.命令方式：  ipconfig（查看IP地址）  exit(退出)
     开始------->运行------>cmd(字符命令行)

   快捷键：windows键 + r键   =  开始 -------> 运行

#####################################################
 克隆一台新的虚拟机win2008

1.关闭虚拟机win2008
2.打开虚拟系统管理器------>右击----->虚拟机win2008----->选择克隆
3.克隆之后的机器配置IP地址为：192.168.1.20/24

#####################################################
DNS服务器地址： 解析域名，将域名解析为IP地址

  为了人类方便记忆与推广  网站

#####################################################
检测主机之间通信

  命令：ping  双向通信

  两台虚拟机防火墙关闭
  控制面板----->Windows防火墙------>打开或关闭防火墙----->关闭防火墙
   
  在cmd中进行测试  ping  192.168.1.20

####################################################
 网关地址：解决不同网络中主机通信

######################################################











Linux是一种服务器操作系统

  操作系统：一堆软件的集合，可以让计算机硬件正常工作


• UNIX诞生,1970-1-1（Linux系统时间的起点）

• Linux之父,Linus Torwalds

  内核：一个软件 调配所有的硬件

    用户-------->内核-------->硬件

– 版本号:主版本.次版本.修订号


• 是一套公开发布的完整Linux系统
– Linux内核 + 各种应用软件

######################################################
安装RHEL7.4虚拟机

  Ctrl+Alt :鼠标回到真机

####################################################
– 物理硬盘==>分区规划==>格式化==>读/写文档

格式化：建立数据在空间存储的规则（文件系统）

  Windows默认的文件系统 :  NTFS    FAT

  Linux默认的文件系统 : ext4(RHEL6)  xfs(RHEL7)

             交换文件系统：swap（虚拟内存）缓解物理内存的压力


################################################
Linux目录结构

   根目录  /：所有数据都在此目录下（Linux系统的起点）

  /dev :存放设备文件


  标示文件所在：  /dev/nsd/abc/1.txt

################################################
  hd,表示IDE设备
  sd,表示SCSI设备


  /dev/sda1     /dev/sdb2    /dev/sdc3     /dev/sdd1
  /dev/hda1

   /dev/sda5:SCSI接口的硬盘，第一块硬盘，第5个分区

#################################################
• 虚拟控制台切换( Ctrl + Alt + Fn 组合键)
– tty1:图形桌面
– tty2~tty6:字符控制台

#################################################### 
   伪字符终端（图形命令行终端）： 右键“打开终端”


• 命令行提示标识的含义
– [当前用户@主机名 工作目录]$

– 若当前用户是root,则最后一个字符为 #
[root@svr7 桌面]#

– 否则,最后一个字符为 $
[teacher@svr7 桌面]$

####################################################
• pwd — Print Working Directory
– 用途:查看当前工作目录

• cd — Change Directory
– 用途:切换工作目录
– 格式:cd   [目标文件夹位置]

• ls — List
– 格式:ls [选项]... [目录或文件名]...
• 常用命令选项
– -l :以长格式显示

蓝色：目录
黑色：文本文件

[root@localhost ~]# cd    /       #切换到根目录
[root@localhost /]# pwd           #显示当前所在路径
[root@localhost /]# ls            #显示当前目录内容

[root@localhost /]# cd  /boot
[root@localhost boot]# pwd
[root@localhost boot]# ls

[root@localhost /]# cd  /root
[root@localhost root]# pwd
[root@localhost root]# ls

[root@localhost /]# cd  /home
[root@localhost home]# pwd
[root@localhost home]# ls


 以 / 开始的绝对路径
 以当前为参照的相对路径
 .. 表示父目录

[root@localhost /]# cd /etc/pki/
[root@localhost pki]# pwd
[root@localhost pki]# cd /etc/pki/CA   #绝对路径
[root@localhost CA]# pwd

[root@localhost /]# cd /etc/pki/
[root@localhost pki]# ls
[root@localhost pki]# cd CA      #相对路径
[root@localhost CA]# pwd
[root@localhost CA]# ls

[root@localhost CA]# cd ..     #回到上一层目录
[root@localhost pki]# pwd


[root@localhost /]# ls  /root
[root@localhost /]# ls  /home
[root@localhost /]# ls  /boot

查看文本文件内容
/etc/redhat-release ：储存当前系统版本的文件

[root@localhost /]# cat  /etc/redhat-release

[root@localhost /]# ls   /etc/passwd

[root@localhost /]# cat  /etc/passwd

[root@localhost /]# cat  /etc/default/useradd 

###################################################
 hostname ：查看设置主机名

[root@localhost /]# hostname

[root@localhost /]# hostname  nsd.tedu.cn
[root@localhost /]# hostname

[root@localhost /]# hostname A.tedu.cn
[root@localhost /]# hostname

  新开一个终端验证

####################################################
 查看ip地址的命令：ifconfig

   127.0.0.1  :永远代表本机，测试

[root@localhost /]# ping 127.0.0.1

 按 Ctrl + c 结束正在运行的命令

[root@localhost /]# ifconfig eth0 192.168.1.2/24
[root@localhost /]# ping 192.168.1.2

[root@localhost /]# ifconfig eth0  #查看eth0网卡ip地址
[root@localhost /]# ifconfig       #查看所有网卡的ip地址

#####################################################
Linux完整命令的格式，每一部分之间都要有空格
      命令字            选项           参数 
     
     执行的动作       功能           作用的对象

   -n:显示内容时添加行号

[root@localhost /]# cat  -n   /etc/default/useradd   
[root@localhost /]# ls  -l  /root

[root@localhost /]# ls  -l  /boot

[root@localhost /]# cat  -n  /etc/passwd
[root@localhost /]# cat  -n  /etc/fstab

#####################################################
• 查看内核版本
[root@localhost /]#  uname  -r       #-r:代表内核
3.10.0-693.el7.x86_64

• 列出CPU处理器信息，在真机上操作
[root@localhost /]#  lscpu

• 列出内存信息，在真机上操作
[root@room9pc01 ~]#  cat /proc/meminfo 

####################################################
• 关机:poweroff
[root@svr7 ~]# poweroff

• 重启:reboot
[root@svr7 ~]# reboot

###################################################

创建目录
• mkdir — Make Directory
– 格式: mkdir   [/路径/]目录名...

创建文件
• touch 


[root@localhost /]# mkdir  /root/nsd1804
[root@localhost /]# ls  /root
[root@localhost /]# mkdir test
[root@localhost /]# ls 

[root@localhost /]# touch 1.txt
[root@localhost /]# ls 

[root@localhost /]# touch  /root/nsd.txt
[root@localhost /]# ls /root/

[root@localhost /]# mkdir  /root/student   /opt/nsd01
[root@localhost /]# ls  /root/
[root@localhost /]# ls  /opt/

######################################################

• less分屏阅读工具
• 格式:less [选项] 文件名...

– 优势:支持前后翻页
– 按 上 下 键 进行滚动
– 按 / 键向后查找
– 按 q 键退出

[root@localhost /]# less /etc/passwd


• head、tail 命令                              172.40.50.114
– 格式:head -数字  文件名
      tail -数字 文件名

[root@localhost /]# head -3 /etc/passwd
[root@localhost /]# head -1 /etc/passwd
[root@localhost /]# tail -1 /etc/passwd

• grep工具
– 用途:输出包含指定字符串的行
– 格式:grep [选项]... '查找条件' 目标文件

[root@localhost /]# grep  root   /etc/passwd
[root@localhost /]# grep  a     /etc/passwd
[root@localhost /]# grep  bash   /etc/passwd

#######################################################











• Linux命令
– 用来实现某一类功能的指令或程序
   执行Linux的命令，一般都要找到相应的程序

– 命令的执行依赖于解释器(例如:/bin/bash)
	
    默认的解释器：/bin/bash

    用户-------> 解释器------> 内核 ------>硬件

 绿色：可以执行的程序

###################################################

命令行的一般格式
• 基本用法
– 命令字      [选项]...      [参数1]       [参数2]...

[root@server0 ~]# ls -l /root/
总用量 88
-rw-------. 1 root root 1028 10月 21 14:56 anacon

####################################################
快速编辑技巧cat

• Tab键自动补全
– 可补齐命令字、选项、参数、文件路径、软件名、服务名

# cat  /etc/sysconfig/network-scripts/ifcfg-eth0

# cat  /et(tab)/sysco(tab)/netw(tab)-(tab)/ifc(tab)-e(tab)

# cat  /et(tab)/redh(tab)-r(tab)

# ls  -l  /et(tab)/redh(tab)-r(tab)

# ifco(tab) 

# if(连续按两次tab) 

• 快捷键
– Ctrl + l:清空整个屏幕
– Ctrl + c:结束正在运行的命令
– Esc + . 或  Alt +  . :粘贴上一个命令的参数

[root@A ~]# ls /etc/redhat-release 

[root@A ~]# ls -l   Alt +  .     #显示详细属性

[root@A ~]# cat     Alt +  .     

[root@A ~]# cat -n  Alt +  .     #显示文件内容，加上行号


– Ctrl + u:清空至行首
– Ctrl + w:往回删除一个单词(以空格界定)

#####################################################
mount挂载操作

显示光盘内容：安装包

Windows
     光盘文件------>光驱设备------->CD驱动器（访问点）


Linux
     光盘文件------>光驱设备/dev/cdrom------》目录（访问点）


访问点：访问设备资源时，必须通过访问点

                洞口-------->煤矿

青色：快捷方式            

1.图形将光盘文件放入光驱设备

2.查看Linux光驱设备
[root@A ~]# ls   /dev/cdrom
[root@A ~]# ls  -l  /dev/cdrom
lrwxrwxrwx. 1 root root 3 5月   2 10:40 /dev/cdrom -> sr0

3.挂载访问，挂载可以提供访问点（挂载点）
[root@A ~]# mkdir  /dvd          #创建文件夹
[root@A ~]# ls  /dvd             #显示目录内容

[root@A ~]# mount /dev/cdrom  /dvd   #将/dvd作为cdrom的访问点
mount: /dev/sr0 写保护，将以只读方式挂载
 
[root@A ~]# ls /dvd/             #显示目录内容
[root@A ~]# ls /dvd/Packages/    #显示目录内容

4.卸载
[root@A ~]# umount  /dvd
[root@A ~]# ls /dvd

注意事项：
        1.卸载，退出访问点目录
    [root@A dvd]# umount /dvd/
    umount: /dvd：目标忙。

        2.挂载,尽量采用自己创建的目录

#####################################################
目录文件管理

• pwd — Print Working Directory
– 用途:查看当前工作目录


• cd — Change Directory
– 用途:切换工作目录
– 格式:cd [目标文件夹位置]

  ~user表示用户user的家目录
   ～:家目录

   cd  ～root  : 去往root用户的家目录

  /root ： Linux管理员的家目录
  /home ： 存放所有普通用户的家目录

[root@A ~]# useradd  jack     #创建用户
[root@A ~]# cd  ~jack         #去往用户jack的家目录
[root@A jack]# pwd

[root@A jack]# useradd dc
[root@A jack]# cd  ~dc
[root@A dc]# pwd

[root@A dc]# useradd  harry
[root@A dc]# cd  ~harry
[root@A harry]# pwd

[root@A harry]# cd  ~root
[root@A ~]# pwd

#####################################################
• ls — List
– 格式:ls [选项]... [目录或文件名]

• 常用命令选项
  – -l:以长格式显示
  – -A:包括名称以 . 开头的隐藏文档
  – -d:显示目录本身(而不是内容)的属性
  – -h:提供易读的容量单位(K、M等)

[root@A ~]# ls -l /root
[root@A ~]# ls -l /boot

[root@A ~]# ls -lh /boot

[root@A ~]# ls -ld /boot

[root@A ~]# ls -A /root


查看命令的帮助信息：

[root@A ~]# 命令    --help
[root@A ~]# man   命令     #按q退出

######################################################
通配符

• 针对不确定的文档名称,以特殊字符表示
  – *:任意多个任意字符
  – ?:单个字符

[root@A ~]# ls /dev/tty*  
[root@A ~]# ls /etc/*tab 
[root@A ~]# ls /etc/*.conf 
[root@A ~]# ls /boot/vm*

[root@A ~]# ls /dev/tty?
[root@A ~]# ls /dev/tty??

– [a-z]:多个字符或连续范围中的一个,若无则忽略
– {a,min,xy}:多组不同的字符串,全匹配

[root@A ~]# ls /dev/tty{1,3,5,7,9}
[root@A ~]# ls /dev/tty{1,12,S0}

[root@A ~]# ls /dev/tty[3-8]
[root@A ~]# ls /dev/tty[0-9]

    请列出/dev/目录下 tty20至tty30的设备文件？（请利用通配符）
[root@A ~]# ls /dev/tty{2[0-9],30}

#####################################################
别名的定义：简化复杂的命令
• 查看已设置的别名
– alias [别名名称]

• 定义新的别名
– alias 别名名称= '实际执行的命令行'

• 取消已设置的别名
– unalias [别名名称]


[root@A ~]# alias  hn='hostname'    #定义别名
[root@A ~]# alias                   #查看所有别名
[root@A ~]# hn               #执行成功

[root@A ~]# unalias  hn      #删除别名
[root@A ~]# hn               #执行失败

[root@A ~]# alias  myls='ls  -lh'    #定义别名  
[root@A ~]# myls /boot               #执行成功


####################################################

新建文档

mkdir 创建目录
• mkdir — Make Directory
– 格式:mkdir [-p] [/路径/]目录名...

[root@A ~]# mkdir -p /vod/movie/cartoon
[root@A ~]# ls /

[root@A ~]# mkdir -p /opt/aa/bb/cc/dd
[root@A ~]# ls /opt/
[root@A ~]# ls /opt/aa/
[root@A ~]# ls /opt/aa/bb/
[root@A ~]# ls /opt/aa/bb/cc/

[root@A ~]# mkdir /root/test01   /opt/test02
[root@A ~]# ls /root
[root@A ~]# ls /opt

#####################################################

rm 删除
• rm — Remove
– 格式:rm [选项]... 文件或目录...

• 常用命令选项
– -r、-f : 递归删除(含目录)、强制删除

  递归:目录本身以及其子目录、子文件

[root@A ~]# rm -rf  /opt/*

[root@A ~]# ls /opt

[root@A ~]# touch /opt/1.txt

[root@A ~]# mkdir -p /opt/aa/bb

[root@A ~]# ls /opt

[root@A ~]# rm -rf  /opt/aa

[root@A ~]# ls /opt

#####################################################
mv 移动/改名
• mv — Move
– 格式:mv [选项]...   原文件...     目标路径

[root@A ~]# rm -rf /opt/*
[root@A ~]# mkdir /opt/nsd
[root@A ~]# touch /opt/1.txt
[root@A ~]# ls /opt/

[root@A ~]# mv /opt/1.txt   /opt/nsd  
[root@A ~]# ls /opt/
[root@A ~]# ls /opt/nsd/

重命名：路径不变的移动
[root@A ~]# mv /opt/nsd    /opt/student
[root@A ~]# ls /opt/

[root@A ~]# mv /opt/student   /opt/test
[root@A ~]# ls /opt/

#####################################################
cp 复制
• cp — Copy
– 格式:cp [选项]... 原文件...     目标路径

• 常用命令选项
– -r:递归,复制目录时必须有此选项

[root@A ~]# rm -rf /opt/*
[root@A ~]# cp /etc/passwd  /opt/
[root@A ~]# ls /opt/

[root@A ~]# cp -r /boot/  /opt/       
[root@A ~]# ls /opt/

[root@A ~]# cp /etc/redhat-release /opt/
[root@A ~]# ls /opt/

支持多参数，永远把最后一个参数作为目标，其他所有参数都作为源

[root@A ~]# cp -r /home/ /etc/group /etc/shadow  /opt/
[root@A ~]# ls /opt/

将数据复制到当前路径下
[root@A opt]# cd  /opt
[root@A opt]# cp  /etc/fstab  .     #  . 代表当前目录

可以重新命名目标路径的文件名
[root@A opt]# cp /etc/crontab /opt/nsd
[root@A opt]# ls /opt/

[root@A opt]# cp -r /mnt/  /opt/test   #将mnt复制并改名
[root@A opt]# cp -r /mnt/  /opt/test   #将mnt复制到test目录下
[root@A opt]# ls /opt/
[root@A opt]# ls /opt/test

 如何取消强制覆盖的提示
 临时取消命令的别名
 [root@A opt]# cp -r /boot/  /opt/    #按Ctrl + c 结束
 [root@A opt]# \cp -r /boot/  /opt/

########################################################   
 vim文本编辑器

• vim文本编辑器
– 格式:vim [[/目录/]文件名]
– 若目标文件不存在,则新建空文件并编辑
– 若目标文件已存在,则打开此文件并编辑

  命令模式      输入模式（插入模式  编辑模式）       末行模式 

[root@server0 ~]# vim   /opt/haxi.txt


		 i 键
	命---------------------->输入模式（Esc 键回到命令模式）
	令
	模
	式---------------------->末行模式（Esc 键回到命令模式）
                     : 键
      
     末行模式  ：wq  保存并退出
		  ：q！ 强制不保存退出

###################################################







教学环境介绍

每个学员机上有三台预先配置好的虚拟机
– server —— 作为练习用服务器
– desktop —— 作为练习用客户机
– classroom —— 提供网关/DNS/软件素材等资源

  开机的顺序，优先开启classroom
'rht-
真机上操作还原三台虚拟机
[root@room9pc01 ~]# rht-vmctl  reset  classroom
[root@room9pc01 ~]# rht-vmctl  reset  server
[root@room9pc01 ~]# rht-vmctl  reset  desktop

用户名:root  密码:redhat  登陆虚拟机Server与虚拟机Desktop

 虚拟机Server
          1.操作系统版本 RHEL7.0
          2.系统的IP地址：172.25.0.11
          3.主机名：server0.example.com

 虚拟机Desktop
          1.操作系统版本 RHEL7.0
          2.系统的IP地址：172.25.0.10
          3.主机名：desktop0.example.com

######################################################
远程管理虚拟机

 真机远程管理虚拟机Server与虚拟机Desktop

[root@room9pc01 ~]# ssh   root@172.25.0.11

[root@room9pc01 ~]# ssh   root@172.25.0.10

补充：Ctrl + shift + t 新开一个终端

   -X(大写)：可以在远程管理时，本地运行对方的图形程序

[root@room9pc01 ~]# ssh  -X  root@172.25.0.11
[root@server0 ~]# firewall-config   #防火墙设置图形程序


#######################################################
在真机

[root@room9pc01 ~]# vim /root/.bashrc 

# .bashrc
alias  gos='ssh  -X  root@172.25.0.11'
alias  god='ssh  -X  root@172.25.0.10'

在开一个新的终端验证：
[root@room9pc01 ~]# gos 
[root@room9pc01 ~]# god

######################################################
软件包管理

1.图形添加光驱设备，关闭虚拟机
2.零散软件管理
[root@server0 ~]# mkdir /dvd
[root@server0 ~]# mount /dev/cdrom  /dvd/

# rpm  -q vsftpd   #查询软件包是否安装
# rpm -ivh /dvd/Packages/vsftpd-3.0.2-22.el7.x86_64.rpm
# rpm  -q vsftpd   #查询软件包是否安装成功

# rpm  -e vsftpd   #卸载vsftpd程序
# rpm  -q vsftpd   #查询软件包是否卸载成功 
# rpm  -qa         #查询已经安装的所有rpm包

补充：导入官方的签名 信息
# rpm --import /dvd/RPM-GPG-KEY-redhat-release 
# rpm -e vsftpd
# rpm -ivh /dvd/Packages/vsftpd-3.0.2-22.el7.x86_64.rpm

#######################################################
常见报错：

错误：依赖检测失败：
	bind = 32:9.9.4-50.el7 被 bind-chroot-32:9.9.4-50.el7.x86_64 需要

#####################################################
Yum软件包仓库，可以自动解决依赖关系

 服务：为客户端自动解决依赖关系，安装软件


 服务端：classroom.example.com搭建Web服务，共享光盘所有内容

 http://classroom.example.com/content/rhel7.0/x86_64/dvd/


 客户端：虚拟机Server，指定服务端位置

   客户端配置文件：/etc/yum.repos.d/*.repo
   错误的配置文件会影响正确的配置文件

[root@server0 ~]# rm  -rf  /etc/yum.repos.d/*
[root@server0 ~]# vim  /etc/yum.repos.d/dvd.repo
 [dvd]           #仓库命名
 name=rhel7.0    #仓库描述信息
 baseurl=http://classroom.example.com/content/rhel7.0/x86_64/dvd/        #指定服务端位置
 enabled=1         #是否启用本文件
 gpgcheck=0        #是否检测软件包的签名信息

[root@server0 ~]# yum repolist    #列出仓库信息


#####################################################
Yum的使用
   安装软件包：
[root@server0 ~]# yum -y install sssd
[root@server0 ~]# yum -y install gcc
[root@server0 ~]# yum -y install httpd
[root@server0 ~]# yum -y install system-config-kickstart 

[root@server0 ~]# yum -y install xeyes

[root@server0 ~]# xeyes

   卸载软件包：
[root@server0 ~]# yum   remove   软件名


  清空Yum缓存：
[root@server0 ~]# yum  clean  all

 搜索仓库里所有的软件包：
[root@server0 ~]# yum  search  软件名

##################################################
下载软件包
• 使用wget下载工具

  – wget  软件包的URL网址
  – wget  软件包的URL网址   -O   /目录路径/新文件名


案例3:升级Linux内核

[root@server0 ~]# uname -r
3.10.0-123.el7.x86_64

# wget  http://classroom.example.com/content/rhel7.0/x86_64/errata/Packages/kernel-3.10.0-123.1.2.el7.x86_64.rpm

# rpm -ivh kernel-3.10.0-123.1.2.el7.x86_64.rpm 

[root@server0 ~]# uname -r
3.10.0-123.el7.x86_64
[root@server0 ~]# reboot       #重起生效

[root@room9pc01 ~]# gos
[root@server0 ~]# uname -r
3.10.0-123.1.2.el7.x86_64

######################################################
配置网络参数（主机名、IP地址、子网掩码、网关、DNS地址）

一、配置永久主机名,配置文件/etc/hostname

[root@server0 ~]# vim  /etc/hostname
A.tedu.cn
[root@server0 ~]# exit    #退出远程管理

[root@room9pc01 ~]# gos   #重新远程管理

[root@A ~]# hostname
A.tedu.cn

[root@A ~]# 

二、配置永久的IP地址、子网掩码、网关地址

 教学环境：
 – 默认网关:172.25.0.254

 修改配置文件：/etc/sysconfig/network-scripts/ifcfg-eth0

1.查看识别的网卡名
[root@A ~]# nmcli connection show 

2.配置IP地址、子网掩码、网关地址
# nmcli  connection   modify  'System eth0'      
  ipv4.method   manual 
  ipv4.addresses  '172.25.0.168/24     172.25.0.254' 
  connection.autoconnect   yes 
 
# nmcli   connection   修改    '网卡名'
  ipv4.方法    手工配置
  ipv4.地址   ' IP地址/子网掩码    网关地址'
    每次开机自动启用配置    
	
# cat /etc/sysconfig/network-scripts/ifcfg-eth0

3.激活配置
# nmcli  connection  up  'System eth0'

[root@room9pc01 ~]# ssh -X root@172.25.0.168


[root@A ~]# route    #查看网关地址

三、DNS服务器作用：将域名解析为IP地址

  教学环境的DNS：172.25.254.254

  检测DNS服务器是否能够解析：nslookup 

  修改配置文件：/etc/resolv.conf 

[root@A ~]# vim  /etc/resolv.conf
nameserver  172.25.254.254

[root@A ~]# nslookup classroom.example.com

######################################################




重定向输出: 将前面命令的输出结果，写入到另一个文本文件中
  >:覆盖重定向
  >>:追加重定向

[root@server0 ~]# head -3 /etc/passwd > /opt/a.txt
[root@server0 ~]# cat /opt/a.txt

[root@server0 ~]# hostname > /opt/a.txt 
[root@server0 ~]# cat /opt/a.txt

[root@server0 ~]# hostname >> /opt/a.txt 
[root@server0 ~]# cat /opt/a.txt

[root@server0 ~]# cat /etc/redhat-release >> /opt/a.txt
[root@server0 ~]# cat /opt/a.txt

[root@server0 ~]# echo 123456
[root@server0 ~]# echo 123456 >> /opt/a.txt
[root@server0 ~]# cat /opt/a.txt

[root@server0 ~]# echo A.tedu.cn > /etc/hostname 
[root@server0 ~]# cat /etc/hostname
A.tedu.cn


#####################################################
 管道  |  作用：将前面命令的输出结果，作为参数交由后面处理


     请显示/etc/passwd文件内容的8～12行？
[root@server0 ~]# head -12 /etc/passwd  |  tail -5 

[root@server0 ~]# cat -n /etc/passwd | head -12 | tail -5

[root@server0 ~]# ifconfig  |  head -2


######################################################

管理用户和组

  用户帐号： 1.可以登陆操作系统  2.实现访问控制（不同的用户，权限不同）

   组帐号： 方便对用户的管理

  唯一标识：  UID   GID  

  管理员root的UID为0

  组的分类： 基本组（私有组）      附加组 （公共组  从属组）  

  一个用户至少属于一个组

##################################################
添加用户
用户基本信息存放在 /etc/passwd 文件

[root@server0 ~]# head -1 /etc/passwd
root:x:0:0:root:/root:/bin/bash

用户名：密码占位符：UID：基本组GID：用户描述信息:用户家目录：解释器


• 使用 useradd 命令
– useradd [选项]... 用户名

• 常用命令选项
– -u 用户id、-d 家目录路径、-s 登录Shell解释器
– -g 基本组、-G 附加组
[root@server0 ~]# useradd  nsd01

[root@server0 ~]# useradd -u 1600 nsd06
[root@server0 ~]# tail -3 /etc/passwd

[root@server0 ~]# useradd -d /opt/abc nsd08
[root@server0 ~]# tail -3 /etc/passwd
[root@server0 ~]# ls /opt


[root@server0 ~]# groupadd tarena           #创建组
[root@server0 ~]# useradd  -G tarena nsd09  #指定附加组
[root@server0 ~]# id nsd09                  #查看用户基本信息

   /sbin/nologin:禁止用户登陆操作系统

[root@server0 ~]# useradd -s /sbin/nologin nsd10
[root@server0 ~]# tail -1 /etc/passwd

设置密码passwd
[root@server0 ~]# passwd  nsd01
更改用户 nsd01 的密码 。
新的 密码：                                #设置密码
无效的密码： 密码少于 8 个字符
重新输入新的 密码：                   #重新输入密码
passwd：所有的身份验证令牌已经成功更新。

[root@server0 ~]# su - nsd01   #临时切换用户身份：su -  用户
[nsd01@A ~]$ passwd 
Changing password for user nsd01.
Changing password for nsd01.
(current) UNIX password:      #输入旧密码
New password:                 #输入新密码
Retype new password:          #输入新密码
passwd: all authentication tokens updated successfully.
[nsd01@A ~]$ exit
logout

#######################################################
非交互式设置密码
[root@server0 ~]# echo 123  |  passwd  --stdin  nsd01

[root@server0 ~]# useradd tom
[root@server0 ~]# echo 123  |  passwd  --stdin  tom

######################################################

用户密码信息存放在 /etc/shadow 文件

####################################################

修改用户属性
• 使用 usermod 命令
– usermod [选项]... 用户名

• 常用命令选项
– -u 用户id、-d 家目录路径、-s 登录Shell
– -g 基本组、
– -G 附加组

[root@server0 ~]# useradd nsd11
[root@server0 ~]# tail -1 /etc/passwd

# usermod -u 1700  -d /opt/nsd11  -G tarena -s /sbin/nologin  nsd11

[root@server0 ~]# tail -1 /etc/passwd
[root@server0 ~]# id nsd11      #查看用户的基本信息

######################################################

删除用户
• 使用 userdel 命令
– userdel  [-r] 用户名     #删除用户，并且删除用户的家目录
– userdel       用户名      #删除用户

[root@server0 ~]# userdel   nsd03

###################################################
管理组账号


添加组
组基本信息存放在 /etc/group 文件
• 使用 groupadd 命令
– groupadd [-g 组ID] 组名

[root@server0 ~]# groupadd  stugrp
[root@server0 ~]# grep stugrp /etc/group
stugrp:x:1607:

 组名：组的密码占位符：组的GID：组成员列表

[root@server0 ~]# useradd  harry
[root@server0 ~]# useradd  jack
[root@server0 ~]# useradd  natasha
[root@server0 ~]# useradd  kenji

######################################################

[root@server0 ~]# gpasswd -a harry stugrp  #用户加入组
[root@server0 ~]# grep stugrp /etc/group

[root@server0 ~]# gpasswd -a kenji stugrp  
[root@server0 ~]# grep stugrp /etc/group

[root@server0 ~]# gpasswd -d harry stugrp  #将用户从组中删除
[root@server0 ~]# grep stugrp /etc/group

[root@server0 ~]# gpasswd -a natasha stugrp
[root@server0 ~]# grep stugrp /etc/group

######################################################
删除组
• 使用 groupdel 命令
– groupdel 组名

####################################################

tar备份与恢复(制作压缩包)

  1.减小了空间占用     2.分散文档管理

 常见的压缩格式及命令工具:
	gzip----》.gz 
	bzip2----》.bz2
	xz----》.xz

• tar 集成备份工具
 – -c:创建归档  Create
 – -x:释放归档  Extract
 – -t:显示归档中的文件清单  List all
 – -z、-j、-J:调用 .gz、.bz2、.xz 格式的工具进行处理
 – -f:指定归档文件名称
 – -C（大写）:指定释放的位置
czf创建为*.tar.gz
cjf创建为*.tar.bz2
cJf创建为*.tar.xz

    打包： tar   选项       压缩包名      被压缩归档的源文档
    解包:   tar   选项      压缩包名    -C  释放的位置

[root@server0 ~]# tar -zcf /mnt/file.tar.gz  /home /opt/   
[root@server0 ~]# ls /mnt/

[root@server0 ~]# tar -jcf /mnt/test.tar.bz2 /home/ /opt/
[root@server0 ~]# ls /mnt/

[root@server0 ~]# tar -Jcf /mnt/nsd.tar.xz  /opt/ /home/
[root@server0 ~]# ls /mnt/

 红色：压缩包

[root@server0 ~]# mkdir /public
[root@server0 ~]# tar -xf /mnt/file.tar.gz  -C  /public/
[root@server0 ~]# ls /public/

[root@server0 ~]# tar -jcf /root/backup.tar.bz2 /usr/local/
[root@server0 ~]# ls /root/

[root@server0 ~]# tar -tf /root/backup.tar.bz2  #显示包内容

#######################################################
NTP时间同步

服务：为客户机提供标准时间

– NTP服务器为客户机提供标准时间
– NTP客户机需要与NTP服务器保持沟通

– 软件包:chrony
– 配置文件:/etc/chrony.conf
– 系统服务:chronyd 


  服务端：classroom.example.com


  客户端：虚拟机Server
  1.安装一个软件chrony
 [root@server0 ~]# rpm  -q  chrony
 chrony-1.29.1-1.el7.x86_64

  2.修改配置文件
 [root@server0 ~]# vim  /etc/chrony.conf
   以#号开头的内容为注释内容
  #server 0.rhel.pool.ntp.org  iburst
  #server 1.rhel.pool.ntp.org  iburst
  #server 2.rhel.pool.ntp.org  iburst
  server classroom.example.com  iburst
 
  3.重起服务
  # systemctl  restart  chronyd   #重起服务
  # systemctl  enable   chronyd   #设置随机自启动
 
  4.验证：/etc/chrony.conf

 [root@server0 ~]# date
 [root@server0 ~]# date -s "2000-10-1  12:30:10"
 [root@server0 ~]# date
 [root@server0 ~]# systemctl  restart  chronyd
 [root@server0 ~]# date
 [root@server0 ~]# date

######################################################
cron计划任务

周期性任务

• 用途:按照设置的时间间隔为用户反复执行某一项固定的系统任务

• 软件包:cronie、crontabs
• 系统服务:crond
• 日志文件:/var/log/crond

– 分   时   日   月    周     任务命令行(绝对路径)

   30   8   *    *      *            每天早上8：30 

   30   23   *    *     *           每天晚上23：30 

   30   23   *    *     5            每周五晚上23：30 

• 使用 crontab 命令
– 编辑: crontab  -e  [-u 用户名]
– 查看: crontab  -l  [-u 用户名]
– 清除: crontab  -r  [-u 用户名]

   每分钟记录当前的时间 , 写入到/opt/time.txt
[root@server0 ~]# date >> /opt/time.txt
[root@server0 ~]# cat /opt/time.txt

[root@server0 ~]# crontab -e              #书写周期性计划任务
[root@server0 ~]# crontab -l              #查看周期性计划任务
*/1  *  *  *  *    date  >>  /opt/time.txt


[root@server0 ~]# cat /opt/time.txt

######################################################
 grep 命令：在文本文件内容，过滤指定字符串

	-i: 忽略大小写
	-v: 取反查找

  – ^word   以字符串word开头
  – word$   以字符串word结尾

[root@server0 ~]# grep -i man /etc/man_db.conf  

[root@server0 ~]# grep -i ROOT /etc/passwd

[root@server0 ~]# grep -v root /etc/passwd


[root@server0 ~]# grep ^root /etc/passwd  #以root开头

[root@server0 ~]# grep root$ /etc/passwd  #以root结尾
[root@server0 ~]# grep bash$ /etc/passwd  #以bash结尾

匹配空行：  ^$

[root@server0 ~]# grep -v  ^$  /etc/default/useradd

显示/etc/login.defs有效信息(去除注释，去除空行)
# grep -v  ^#  /etc/login.defs  |  grep  -v  ^$

# grep -v ^# /etc/login.defs |  grep  -v  ^$  >  /opt/2.txt

####################################################











权限和归属


基本权限
访问方式(权限)
– 读取:允许查看内容-read  r
– 写入:允许修改内容-write   w
– 可执行:允许运行和切换-execute  x

   文本文件：
       r:  cat  head  less  
       w： vim   > 
       x:  脚本文件

• 权限适用对象(归属)
  – 所有者:拥有此文件/目录的用户-user u
  – 所属组:拥有此文件/目录的组-group    g
  – 其他用户:除所有者、所属组以外的用户-other  o

查看权限
• 使用 ls -l 命令
– ls -ld 文件或目录...

   以 - 开头：文本文件
   以 d 开头：目录
   以 l 开头：快捷方式

[root@server0 ~]# ls -l /etc/passwd

[root@server0 ~]# ls -ld /etc/

[root@server0 ~]# ls -ld /root

[root@server0 ~]# ls -ld /boot

[root@server0 ~]# ls -l /etc/shadow

################################################
设置基本权限
• 使用 chmod 命令
– chmod [-R] 归属关系+-=权限类别   文档...

      -R :递归设置

[root@server0 ~]# mkdir  /nsd01
[root@server0 ~]# ls -ld  /nsd01

[root@server0 ~]# chmod u-w  /nsd01
[root@server0 ~]# ls -ld  /nsd01

[root@server0 ~]# chmod g+w  /nsd01
[root@server0 ~]# ls -ld  /nsd01

[root@server0 ~]# chmod o=---  /nsd01
[root@server0 ~]# ls -ld  /nsd01

[root@server0 ~]# chmod u=rwx,g=rwx,o=rx /nsd01
[root@server0 ~]# ls -ld  /nsd01

[root@server0 ~]# chmod ugo=rwx  /nsd01
[root@server0 ~]# ls -ld /nsd01

#####################################################
判别用户的权限：
   1.判别用户的归属关系（角色）   所有者>所属组>其他人   匹配及停止

   2.查看相应归属角色的权限位

#####################################################

  Permission denied :权限不足

####################################################

目录的 r 权限:能够 ls 浏览此目录内容
目录的 w 权限:能够执行 rm/mv/cp/mkdir/touch/ 等更改目录内容的操作
目录的 x 权限:能够 cd 切换到此目录

以root用户新建/nsddir/目录，在此目录下新建readme.txt文件，并进一步完成下列操作
 1）使用户lisi能够在此目录下创建子目录   切换用户  su  -  lisi
     chmod o+w  /nsddir/

 2）使用户lisi不能够在此目录下创建子目录
     chmod o-w  /nsddir/
 
 3）使用户lisi能够修改readme.txt文件
     chmod o+w  /nsddir/readme.txt

 4）调整此目录的权限，使所有用户都不能cd进入此目录
     chmod u-x,g-x,o-x  /nsddir/

 5）为此目录及其下所有文档设置权限 rwxr-x---
     chmod -R  u=rwx,g=rx,o=---  /nsddir/

######################################################
设置文档归属
• 使用 chown 命令
– chown [-R] 属主 文档...
– chown [-R] :属组 文档...
– chown [-R] 属主:属组 文档...

[root@server0 ~]# mkdir  /nsd03
[root@server0 ~]# ls -ld  /nsd03

[root@server0 ~]# groupadd stugrp

[root@server0 ~]# chown lisi:stugrp  /nsd03
[root@server0 ~]# ls -ld  /nsd03

[root@server0 ~]# useradd zhangsan
[root@server0 ~]# chown zhangsan /nsd03   #修改所有者
[root@server0 ~]# ls -ld  /nsd03/

[root@server0 ~]# chown :root /nsd03      #修改所属组
[root@server0 ~]# ls -ld  /nsd03/

#######################################################

利用root用户新建/nsd06目录，并进一步完成下列操作
1）将属主设为gelin01，属组设为tarena组
[root@server0 /]# useradd gelin01
[root@server0 /]# groupadd tarena
[root@server0 /]# chown gelin01:tarena  /nsd06

2）使用户gelin01对此目录具有rwx权限，其他人对此目录无任何权限
[root@server0 /]# chmod o=--- /nsd06

3）使用户gelin02能进入、查看此目录
[root@server0 /]# gpasswd -a  gelin02  tarena

4）将gelin01加入tarena组, 将nsd06目录的权限设为rw-r-x---
      再测试gelin01用户能否进入此目录
[root@server0 /]# chmod u=rw,g=rx /nsd06

#######################################################
特殊权限(附加权限)

Set GID
• 附加在属组的 x 位上
– 属组的权限标识会变为 s
– 适用于目录,Set GID可以使目录下新增的文档自动设
置与父目录相同的属组

– 让新增子文档继承父目录的属组


[root@server0 ~]# mkdir /nsd08
[root@server0 ~]# chown :tarena /nsd08
[root@server0 ~]# ls -ld /nsd08

[root@server0 ~]# mkdir /nsd08/test01
[root@server0 ~]# ls -ld /nsd08/test01

[root@server0 ~]# chmod g+s /nsd08    #设置Set GID权限
[root@server0 ~]# ls -ld /nsd08

[root@server0 ~]# mkdir /nsd08/test02
[root@server0 ~]# ls -ld /nsd08/test02
[root@server0 ~]# ls -ld /nsd08/test01

[root@server0 ~]# touch /nsd08/1.txt
[root@server0 ~]# ls -l /nsd08/1.txt

######################################################

acl访问控制列表

acl策略的作用
• 文档归属的局限性
 – 任何人只属于三种角色:属主、属组、其他人
 – 无法实现更精细的控制

• acl访问策略
 – 能够对个别用户、个别组设置独立的权限
 – 大多数挂载的EXT3/4、XFS文件系统默认已

[root@server0 ~]# mkdir /nsd09
[root@server0 ~]# chmod o=--- /nsd09
[root@server0 ~]# su - lisi

[lisi@server0 ~]$ cd /nsd09
-bash: cd: /nsd09: Permission denied
[lisi@server0 ~]$ exit

[root@server0 ~]# setfacl -m  u:lisi:rx  /nsd09  #设置ACL策略
[root@server0 ~]# getfacl /nsd09                 #显示ACL策略
[root@server0 ~]# su - lisi
[lisi@server0 ~]$ cd /nsd09
[lisi@server0 nsd09]$ pwd
[lisi@server0 nsd09]$ exit
[root@server0 ~]# 
######################################################
使用 getfacl、setfacl 命令
– getfacl  文档...
– setfacl  -m  u:用户名:权限类别   文档...
– setfacl  -m  g:组名:权限类别     文档...
– setfacl  -x  u:用户名   文档...      #删除指定的ACL
– setfacl  -b  文档...                      #删除所有ACL

   -R: 递归设置  

[root@server0 ~]# mkdir /nsd10
[root@server0 ~]# setfacl -m u:lisi:rx /nsd10
[root@server0 ~]# setfacl -m u:gelin01:rwx /nsd10
[root@server0 ~]# setfacl -m u:zhangsan:rx /nsd10
[root@server0 ~]# getfacl /nsd10                #查看ACL权限

[root@server0 ~]# setfacl -x u:gelin01 /nsd10   #删除指定ACL
[root@server0 ~]# getfacl /nsd10

[root@server0 ~]# setfacl -b   /nsd10   #删除所有的ACL
[root@server0 ~]# getfacl /nsd10


###################################################

[root@server0 ~]# mkdir  /public
[root@server0 ~]# chmod ugo=rwx  /public
[root@server0 ~]# ls -ld  /public

[root@server0 ~]# setfacl -m  u:lisi:---  /public/
[root@server0 ~]# getfacl  /public/

##################################################
使用LDAP认证,网络用户

     网络用户:LDAP服务器存储
     本地用户:/etc/passwd

  什么是LDAP?
• 轻量级目录访问协议

• 为一组客户机集中提供可登录的用户账号
– 网络用户:用户名、密码信息存储在 LDAP 服务端
– 这些客户机都加入同一个 LDAP 域

 服务端:LDAP服务器classroom.example.com


 客户端:虚拟机Server0

  1.安装一个sssd软件,与LDAP服务器沟通
 [root@server0 ~]# yum -y install sssd

  2.安装图形的工具authconfig-gtk,图形配置sssd
 [root@server0 ~]# yum -y install authconfig-gtk
 
  3.运行图形的工具进行配置 
 [root@server0 ~]# authconfig-gtk 

     选择LDAP
      dc=example,dc=com             #指定服务端域名
      classroom.example.com         #指定服务端主机名

  勾选TLS加密
  使用证书加密: http://classroom.example.com/pub/example-ca.crt

      选择LDAP密码

  4.重起服务
 [root@server0 ~]# systemctl restart sssd   #重起服务
 [root@server0 ~]# systemctl enable sssd    #设置开机自启动

   5.验证:
 [root@server0 ~]# grep  ldapuser0  /etc/passwd
 [root@server0 ~]# id  ldapuser0

#######################################################
家目录的实现

 共享: 本地数据传递给网络中其他主机

• Network File System,网络文件系统
– 由NFS服务器将指定的文件夹共享给客户机
– 客户机将此共享目录 mount 到本地目录,访问此共享
资源就像访问本地目录一样方便
– 类似于 EXT4、XFS等类型,只不过资源在网上


服务端:classroom.example.com  NFS服务器共享所有用户的家目录


客户端:虚拟机Server0

• 查看NFS资源
  # showmount -e classroom.example.com

• 挂载NFS资源
  # mkdir  /nfs

  # mount  classroom.example.com:/home/guests   /nfs
  # ls  /nfs

  # umount /nfs
  # mkdir /home/guests
  # mount classroom.example.com:/home/guests   /home/guests
  # ls /home/guests

  # su  -  ldapuser0

########################################################
















还原三台虚拟机classroom server  desktop
[root@server0 ~]# rht-vmctl  reset classroom
[root@server0 ~]# rht-vmctl  reset server
[root@server0 ~]# rht-vmctl  reset desktop

确认虚拟机server  Yum是否可用
[root@server0 ~]# yum  clean   all
[root@server0 ~]# yum  repolist    
[root@server0 ~]# yum  -y  install  vsftpd 

######################################################
Set UID
• 附加在所有者的 x 位上
– 所有者的权限标识会变为 s
– 适用于可执行文件,Set UID可以让使用者具有文件属主的身份及部分权限
– 传递所有者身份

[root@server0 ~]# cp /usr/bin/mkdir  /usr/bin/xixidir
[root@server0 ~]# ls /usr/bin/xixidir

[root@server0 ~]# chmod u+s /usr/bin/xixidir
[root@server0 ~]# ls -l /usr/bin/xixidir

[root@server0 ~]#  su - student
[student@server0 ~]$ /usr/bin/mkdir    test01
[student@server0 ~]$ /usr/bin/xixidir    test02
[student@server0 ~]$ ls -l 
[student@server0 ~]$ exit

#####################################################

Sticky Bit
• 附加在其他人的 x 位上
– 其他人的权限标识会变为 t
– 适用于开放 w 权限的目录,可以阻止用户滥用 w 写入
权限(禁止操作别人的文档)


[root@server0 ~]# useradd harry
[root@server0 ~]# useradd natasha
[root@server0 ~]# mkdir /public
[root@server0 ~]# chmod ugo=rwx /public
[root@server0 ~]# ls -ld /public

[root@server0 ~]# chmod o+t /public
[root@server0 ~]# ls -ld /public

#####################################################

查找文件

• 根据预设的条件递归查找对应的文件
– find [目录] [条件1]  [-a|-o]   [条件2] ...

– 常用条件表示:
  -type  类型(f文件、d目录、l快捷方式)
  -name  "文档名称"
  -size  +|-文件大小(k、M、G)
  -user  用户名

[root@server0 ~]# find /boot/ -type l        #查找是快捷方式

[root@server0 ~]# ls  /boot/grub/menu.lst 
[root@server0 ~]# ls -l /boot/grub/menu.lst

[root@server0 ~]# find /boot/ -type d      #查找是目录

[root@server0 ~]# find /boot/ -type f      #查找是文件


##################################################
[root@server0 ~]# find  /etc/  -name "passwd"

  显示/etc/目录下以.conf结尾?(不包含子目录)
[root@server0 ~]# ls  /etc/*.conf

  显示/etc/目录下以.conf结尾?(包含子目录)
[root@server0 ~]# find   /etc/   -name  "*.conf"

[root@server0 ~]# touch /root/nsd01.txt
[root@server0 ~]# touch /root/nsd02.txt
[root@server0 ~]# mkdir /root/nsd1804
[root@server0 ~]# find /root/ -name "nsd*"
[root@server0 ~]# find /root/ -name "nsd*" -a -type f 

[root@server0 ~]# find /root/ -name "nsd*" -type f
[root@server0 ~]# find /root/ -name "nsd*" -type d

##################################################
[root@server0 ~]# find /boot/ -size +10M
[root@server0 ~]# find /boot/ -size +300k

• 使用find命令的 -exec 操作
– find .. .. -exec 处理命令  {}  \;
– 优势:以 {} 代替每一个结果,逐个处理,遇 \; 结束

# find  /boot/ -size +300k  -exec cp  -r  {}  /opt  \;

# ls  /opt

# find  /root -name "nsd*" -type f  -exec cp  -r  {}  /opt  \;

# ls  /opt

查找属于某个用户
[root@server0 ~]# find /home/ -user student
[root@server0 ~]# find / -user student

[root@server0 ~]# mkdir /root/findfiles
[root@server0 ~]# find / -user student -type f

[root@server0 ~]# find / -user student -type f             -exec   cp    {}    /root/findfiles/   \;

[root@server0 ~]# ls  -A    /root/findfiles/ 


• 根据名称查找,忽略大小写
– -iname
[root@server0 ~]# find /etc/ -name "PASSWD"
[root@server0 ~]# find /etc/ -iname "PASSWD"

• 根据账号名称或所属组
– -group
[root@server0 ~]# find /home/ -group student

• 限制目录查找的深度(最大层数)
– -maxdepth

[root@server0 ~]# find /etc/ -name  "passwd"
[root@server0 ~]# find /etc/ -maxdepth 1  -name  "passwd"
[root@server0 ~]# find /etc/ -maxdepth 2  -name  "passwd"
[root@server0 ~]# find /etc/ -maxdepth 1  -name  "*.conf"
[root@server0 ~]# find /etc/ -maxdepth 2  -name  "*.conf"


• 根据文件修改时间(过去时间)
• -mtime

[root@server0 ~]# find /var/log -mtime +90  #过去时间90天之前

[root@server0 ~]# find /var/log -mtime -90  #过去时间90天之内





======================Enfineer笔记=============================






还原三台虚拟机classroom server  desktop
[root@server0 ~]# rht-vmctl  reset classroom
[root@server0 ~]# rht-vmctl  reset server
[root@server0 ~]# rht-vmctl  reset desktop

确认虚拟机server  Yum是否可用
[root@server0 ~]# yum  clean   all
[root@server0 ~]# yum  repolist    
[root@server0 ~]# yum  -y  install  vsftpd 

######################################################
 磁道：track
 扇区：sector    默认512字节

一块硬盘的“艺术”之旅
• 识别硬盘 => 分区规划 => 格式化 => 挂载使用

一  识别硬盘
[root@server0 ~]# lsblk    #列出所有   块设备
 NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
 vda     253:0    0  10G  0 disk 
 └─vda1 253:1    0  10G  0 part /
 vdb     253:16   0  10G  0 disk 

二   分区规划

 分区的模式:  

 MBR(MSdos) : 
	– 1~4个主分区,或者 0~3个主分区+1个扩展分区(n个逻辑分区)
	– 最大支持容量为 2.2TB 的磁盘
	– 扩展分区不能格式化
	– 理论值是4个主分区,实际运用划分3个主分区

[root@server0 ~]# fdisk  /dev/vdb  
   n 创建新的分区----->回车----->回车---->回车----->在last结束时 +2G
   p 查看分区表
   n 创建新的分区----->回车----->回车---->回车----->在last结束时 +1G
   d 删除分区
   w 保存并退出

[root@server0 ~]# lsblk
[root@server0 ~]# ls /dev/vdb[1-2]


       /dev/sda5:设备的含义  SCSI设备第一硬盘的第一个逻辑分区


三  格式化,赋予空间文件系统

  文件系统: ext4  xfs 空间存储数据的规则

[root@server0 ~]# mkfs.ext4 /dev/vdb1  #格式化文件系统ext4
[root@server0 ~]# mkfs.xfs /dev/vdb2   #格式化文件系统xfs

[root@server0 ~]# blkid /dev/vdb1   #查看文件系统及UUID
[root@server0 ~]# blkid /dev/vdb2   #查看文件系统及UUID

       UUID:设备的唯一标识

四  利用挂载提供访问点

[root@server0 ~]# mkdir  /mypart1
[root@server0 ~]# mount  /dev/vdb1   /mypart1

  查看已挂载的所有分区的使用情况
[root@server0 ~]# df -h
[root@server0 ~]# mount /dev/vdb2  /mypart2
[root@server0 ~]# df -h

五   开机自动挂载  /etc/fstab
 – 设备路径        挂载点         类型        参数        备份标记     检测顺序

补充 vim : 命令模式 按o 另起一行进入输入模式  
[root@server0 ~]# vim /etc/fstab 

/dev/vdb1  /mypart1  ext4  defaults  0 0
/dev/vdb2  /mypart2  xfs   defaults  0 0

[root@server0 ~]# df -h
[root@server0 ~]# mount  -a
[root@server0 ~]# df -h

   检测/etc/fstab开机自动挂载配置文件,格式是否正确
   检测/etc/fstab中,书写完成,但当前没有挂载的设备,进行挂载

六 继续分区

综合分区:  一个2G分区,四个1G
[root@server0 ~]# fdisk  /dev/vdb
   p 查看分区表
   n 创建主分区----->回车----->回车---->回车----->在last结束时 +1G
   p 查看分区表
   n 创建扩展分区 
                   ----->回车---->起始回车----->结束回车  将所有空间给扩展分区
   p 查看分区表
   n 创建逻辑分区----->起始回车------>结束+1G
   n 创建逻辑分区----->起始回车------>结束+1G
   p 查看分区表
   w 保存并退出
[root@server0 ~]# lsblk
[root@server0 ~]# partprobe   #刷新磁盘分区
[root@server0 ~]# lsblk 

请将第三个主分区,格式化成xfs文件系统,分区开机自动挂载到/mypart3
请将第一个逻辑分区,格式化成xfs文件系统,分区开机自动挂载到/mypart5
请将第二个逻辑分区,格式化成xfs文件系统,分区开机自动挂载到/mypart6

[root@server0 ~]# mkfs.xfs /dev/vdb3

[root@server0 ~]# vim  /etc/fstab 
/dev/vdb3  /mypart3  xfs  defaults  0  0
/dev/vdb5  /mypart5  xfs  defaults  0  0
/dev/vdb6  /mypart6  xfs  defaults  0  0

#######################################################

图形添加一个 60G 硬盘

  1.关闭虚拟机Server0
  2.图形添加硬盘

[root@server0 ~]# lsblk
[root@server0 ~]# fdisk  /dev/vdc  #划分5个10G的分区
   p 查看分区表
   n 创建主分区----->回车----->回车---->回车----->在last结束时 +10G
         连续创建3个10G主分区
      ......
   n 创建扩展分区 
                   ----->回车---->起始回车----->结束回车  将所有空间给扩展分区
   p 查看分区表
   n 创建逻辑分区----->起始回车------>结束+10G
   n 创建逻辑分区----->起始回车------>结束+10G
   p 查看分区表
   w 保存并退出
 
[root@server0 ~]# lsblk
####################################################

LVM逻辑卷

   作用:  1.空间可以扩大   2.整合分散的空间
  
– 零散空闲存储 ---- 整合的虚拟磁盘 ---- 虚拟的分区

专业的术语:  pv(物理卷)   vg(卷组)   lv(逻辑卷)

逻辑卷创建:  将众多的物理卷(pv),组成卷组(vg),再从卷组中划分逻辑卷(lv)

      面粉-------->大面团-------->小面团------>蒸-------->吃

      砖----------->大房子-------->打隔段-------->装修----->入住

######################################################
一 逻辑卷的创建

successfully :成功

1. 直接创建卷组
  命令格式: vgcreate  卷组名     分区路径

[root@server0 ~]# vgcreate myvg /dev/vdc[1-2]
[root@server0 ~]# vgs  #显示卷组的信息
[root@server0 ~]# pvs  #显示物理卷的信息

2.创建逻辑卷
  命令格式: lvcreate  -L 大小    -n  逻辑卷名字      卷组名

[root@server0 ~]# lvcreate -L 16G  -n  vo  myvg
[root@server0 ~]# vgs
[root@server0 ~]# lvs

3.查看使用逻辑卷
[root@server0 ~]# mkfs.ext4  /dev/myvg/vo
[root@server0 ~]# mkdir  /mylv
[root@server0 ~]# vim  /etc/fstab 
/dev/myvg/vo   /mylv   ext4   defaults   0   0

[root@server0 ~]# mount  -a

[root@server0 ~]# df  -h

#####################################################
扩展逻辑卷

一  卷组有足够的剩余空间

1.直接扩展逻辑卷空间
[root@server0 ~]# lvextend -L 19G /dev/myvg/vo 
[root@server0 ~]# lvs

2.文件系统的扩展
  resize2fs :针对ext4文件系统
  xfs_growfs :针对xfs文件系统

[root@server0 ~]# blkid /dev/myvg/vo
[root@server0 ~]# resize2fs  /dev/myvg/vo 
[root@server0 ~]# df -h

二  卷组没有足够的剩余空间

1.扩展卷组
[root@server0 ~]# vgextend myvg /dev/vdc3
[root@server0 ~]# vgs

2.直接扩展逻辑卷空间
[root@server0 ~]# lvextend -L 25G /dev/myvg/vo 
[root@server0 ~]# lvs
[root@server0 ~]# vgs

3.文件系统的扩展
[root@server0 ~]# blkid /dev/myvg/vo
[root@server0 ~]# resize2fs  /dev/myvg/vo 
[root@server0 ~]# df  -h

####################################################
逻辑卷也可以做缩减
  1.xfs文件系统不支持缩减

 PE:卷组划分空间的单位 默认4M

[root@server0 ~]# vgdisplay myvg  #查看卷组详细信息
   
• 创建卷组的时候设置PE大小
– vgcreate -s PE大小   卷组名   空闲分区...

• 修改卷组的时候设置PE大小
– vgchange -s PE大小   卷组名   空闲分区...

• 创建逻辑卷的时候指定PE个数
– lvcreate -l PE个数 -n 逻辑卷名 卷组名

[root@server0 ~]# vgchange -s 1M myvg   #修改PE的大小
[root@server0 ~]# vgdisplay myvg

[root@server0 ~]# lvcreate -l 50 -n lvtest01  myvg 

[root@server0 ~]# lvs

#####################################################
逻辑卷的删除

 先删除 逻辑卷  然后在删除 卷组
  
[root@server0 ~]# umount /mylv
[root@server0 ~]# lvremove /dev/myvg/vo    #删除 逻辑卷
Do you really want to remove active logical volume vo? [y/n]: y
[root@server0 ~]#  lvs

[root@server0 ~]# lvremove /dev/myvg/lvtest01
Do you really want to remove active logical volume lvtest01? [y/n]: y

[root@server0 ~]# lvs

[root@server0 ~]# vgs
[root@server0 ~]# vgremove myvg     #删除 卷组
[root@server0 ~]# vgs

######################################################




还原三台虚拟机classroom server  desktop
[root@server0 ~]# rht-vmctl  reset classroom
[root@server0 ~]# rht-vmctl  reset server
[root@server0 ~]# rht-vmctl  reset desktop

确认虚拟机server  Yum是否可用
[root@server0 ~]# yum  clean   all
[root@server0 ~]# yum  repolist    
[root@server0 ~]# yum  -y  install  vsftpd 

######################################################

一块硬盘的“艺术”之旅
• 识别硬盘 => 分区规划 => 格式化 => 挂载使用

总结:
    1.lsblk       识别本机的硬盘
    2.fdisk       进行分区
    3.partprobe   进行刷新
    4.mkfs.xfs    格式化
    5.mount       手动挂载使用
    6./etc/fstab  开机自动挂载使用

####################################################
Shell脚本编程

  shell语言

     脚本: 一个可以执行的文件,执行实现某种功能

案例1:  
请用 shell语言实现一个脚本,运行结果在屏幕输出hello world
[root@server0 ~]# vim  /root/hello.sh

echo hello world

[root@server0 ~]# chmod +x /root/hello.sh  #赋予所有人执行权限

[root@server0 ~]#  /root/hello.sh   #绝对路径运行

########################################################
规范Shell脚本的一般组成
• #! 环境声明
• # 注释文本
• 可执行代码

########################################################

案例2:
 编写一个面世问候 /root/hello.sh 脚本
– 显示出一段话“Hello World!!”
1)输出当前红帽系统的版本信息
2)输出当前使用的内核版本
3)输出当前系统的主机名

[root@server0 ~]# vim /root/hello.sh
	#!/bin/bash
	echo hello  world
	cat /etc/redhat-release
	uname -r
	hostname
	ifconfig  |  head -2

######################################################
简单脚本技巧


重定向输出
   
     >:   将前面命令的正确输出,进行重定向
     2>: 将前面命令的错误输出,进行重定向
        2>>:错误输出，追加重定向
     &>: 将前面命令的正确与错误输出,进行重定向
	&>>：全部输出的追加重定向

[root@server0 ~]# echo 123 > /opt/1.txt
[root@server0 ~]# cat /opt/1.txt  /etc/
123
cat: /etc/: 是一个目录
[root@server0 ~]# cat /opt/1.txt  /etc/ > /mnt/a.txt
cat: /etc/: 是一个目录
[root@server0 ~]# cat /mnt/a.txt 
123
[root@server0 ~]# cat /opt/1.txt  /etc/ 2> /mnt/a.txt 
123
[root@server0 ~]# cat /mnt/a.txt
cat: /etc/: 是一个目录
[root@server0 ~]# cat /opt/1.txt  /etc/ &> /mnt/a.txt 
[root@server0 ~]# cat /mnt/a.txt
123
cat: /etc/: 是一个目录
[root@server0 ~]# cat /opt/1.txt /etc/ 2>> /mnt/a.txt
123
[root@server0 ~]# cat /mnt/a.txt
123
cat: /etc/: 是一个目录
cat: /etc/: 是一个目录
[root@server0 ~]# cat /opt/1.txt /etc/ 2> >> /mnt/a.txt
-bash: 未预期的符号 `>>' 附近有语法错误
[root@server0 ~]# cat /opt/1.txt /etc/ 2> > /mnt/a.txt
-bash: 未预期的符号 `>' 附近有语法错误
[root@server0 ~]# cat /opt/1.txt /etc/ 2> echo > /mnt/a.txt
[root@server0 ~]# cat /mnt/a.txt
123
[root@server0 ~]# cat /opt/1.txt /etc/ 2> echo >> /mnt/a.txt
[root@server0 ~]# cat /mnt/a.txt
123
123


##################################################
案例3:
 创建用户zhangsan的脚本,并且设置密码123
[root@server0 ~]# vim  /root/user.sh
  #!/bin/bash
  useradd  zhangsan
  echo 123  |  passwd  --stdin  zhangsan 

[root@server0 ~]# chmod +x /root/user.sh
[root@server0 ~]# /root/user.sh

  黑洞设备:/dev/null

  为增加灵活度,为了适用多变的环境--------->变量

   变量:会变化的量, 类似于容器,以不变的名字,存储可以变化的值

   – 变量名=变量值

[root@server0 ~]# vim /root/user.sh
 #!/bin/bash
 abc
 useradd $abc  &> /dev/null
 echo 用户$abc创建成功
 echo 123  |  passwd  --stdin  $abc &> /dev/null
 echo 用户$abc密码设置成功

[root@server0 ~]# /root/user.sh

    为了脚本使用难度降低,方便用户随意输入参数 --------> 产生交互

    read  记录用户在键盘上的输入,并且传递值赋予变量

[root@server0 ~]# vim /root/user.sh
	#!/bin/bash
	read  -p   '请输入您要创建的用户名:'     abc
	useradd  $abc   &>  /dev/null
	echo  用户$abc创建成功
	echo  123  |  passwd  --stdin  $abc  &>  /dev/null
	echo  用户$abc密码设置成功

######################################################
定义/赋值变量
• 设置变量时的注意事项
 – 若指定的变量名已存在,相当于为此变量重新赋值
 – 等号两边不要有空格
 – 变量名只能由字母/数字/下划线组成,区分大小写
 – 变量名不能以数字开头,不要使用关键字和特殊字符


基本格式
– 引用变量值:$变量名
– 查看变量值:echo $变量名、echo ${变量名}

[root@server0 ~]# a=rhel
[root@server0 ~]# echo $a

[root@server0 ~]# echo $a7

[root@server0 ~]# echo ${a}7

  $[] : 数学运算
   
    +   -   *   /   
     %(取余运算)
     ^(指数运算)

[root@server0 ~]# echo $[1+3]

[root@server0 ~]# echo $[1-3]

[root@server0 ~]# echo $[2*3]

[root@server0 ~]# echo $[10/3]

[root@server0 ~]# echo $[10%3]

[root@server0 ~]# echo 1+1 | bc

[root@server0 ~]# echo 2*3 | bc

[root@server0 ~]# echo 2^3 | bc

  数学上: 余数一定小于除数

 
  $()与 ` ` 反撇号:将命令的输出结果作为参数
[root@server0 opt]# cd  /opt
[root@server0 opt]# date

[root@server0 opt]# date  +%F

[root@server0 opt]# mkdir $(date   +%F)
[root@server0 opt]# ls

[root@server0 opt]# mkdir nsd-$(date  +%F)

[root@server0 opt]# mkdir MySQL-$(date  +%F)
[root@server0 opt]# ls

[root@server0 opt]# mkdir `hostname`-`date   +%F`
[root@server0 opt]# ls

    '  ': 取消特殊字符的意义

##################################################
变量的种类



环境变量    变量名一般都大写,由系统定义完成,直接使用即可

   USER:永远储存当前登陆的用户名

位置变量    由系统定义完成,直接使用即可

    1  2  3  4  5  6  7  ........

[root@server0 /]# vim /root/2.sh

	#!/bin/bash
	cat -n $1  |  head -$2

[root@server0 /]# chmod +x  /root/2.sh
[root@server0 /]# /root/2.sh  /etc/passwd  3


预定义变量  由系统定义完成,直接使用即可

	$#  已加载的位置变量的个数(求和所有位置变量个数)
	$*  所有位置变量的值  内容的拼接

[root@server0 /]# vim /root/2.sh

	#!/bin/bash
	cat -n $1  |  head -$2
	echo $#
	echo $*

[root@server0 /]# /root/2.sh  /etc/passwd 4  a  b  c  d

    $?  程序退出后的状态值,0表示正常,其他值异常,判断上面命令是否执行成功
        @各种异常值的代表什么？

#####################################################

条件测试


• 检查文件状态
  -e:文档存在为真
  -d:文档存在,且为目录为真
  -f:文档存在,且为文件为真
[root@server0 /]# [  -e  /etc  ]
[root@server0 /]# echo $?
0
[root@server0 /]# [ -d  /etc/passwd  ]
[root@server0 /]# echo $?
1
[root@server0 /]# [ -f /etc/passwd  ]
[root@server0 /]# echo $?
0
[root@server0 /]# [ -f /etc  ]
[root@server0 /]# echo $?
1

• 比较整数大小  greater(大于)  little(小于)   equal(等于)

   -gt: 大于
   -ge: 大于等于
   -eq: 等于
   -ne: 不等于
   -lt: 小于
   -le: 小于等于
[root@server0 /]# [ 1 -gt 1 ]
[root@server0 /]# echo $?

[root@server0 /]# [ 1 -ge 1 ]
[root@server0 /]# echo $?

[root@server0 /]# [ 1 -le 2 ]
[root@server0 /]# echo $?

[root@server0 /]# [ 1 -eq 3 ]
[root@server0 /]# echo $?


• 字符串比对
    ==: 字符串相等为真
    !=:字符串不相等为真

[root@server0 /]# [  root  ==  redhat  ]
[root@server0 /]# echo $?
1
[root@server0 /]# [  root  !=  redhat  ]
[root@server0 /]# echo $?
0
[root@server0 /]# [  root  !=  root  ]
[root@server0 /]# echo $?
1
[root@server0 /]# [  redhat  ==  user  ]
[root@server0 /]# echo $?

######################################################
if选择结构

if双分支

 if  [条件测试];then
     命令序列xx
 else
     命令序列yy
 fi

案例4
  请书写脚本,用户输入一个IP地址,进行判断
   如果IP地址可以ping通 ,则输出 可以通信
   如果IP地址不可以ping通 ,则输出 不可以通信

[root@server0 /]# vim /root/ip.sh

	#!/bin/bash
	read  -p  '请输入您测试的IP地址:'    ip
	ping   -c  2   $ip   &>  /dev/null
	if   [  $?  -eq  0  ];then
	   echo  可以通信
	else 
	   echo  不可以通信
	fi


案例5:
        计算机随机产生一个0~9的随机数字
        用户输入一个0~9的随机数字
     判断:如果  用户输入  与   计算机随机产生的数字一致,输出  恭喜您猜对了
            如果  用户输入  与   计算机随机产生的数字一致,输出  猜错误了

   RANDOM:储存随机数的环境变量
[root@server0 /]# vim  /root/num.sh
	#!/bin/bash
	num1=$[$RANDOM%10]
	read  -p   '请您输入一个0~9之间的数字:'     num2
	if [  $num1  -eq  $num2  ];then
	   echo  恭喜您猜对了
	else
	   echo  猜错误了
	   echo  正确的是$num1
	fi


#####################################################

if多分支处理

	if [条件测试1];then
	   命令序列xx
	elif [条件测试2];then
	   命令序列yy
	elif [条件测试3];then
	   命令序列aa
        ......
	else
	    命令序列zz
	fi
 
案例6:
     用户输入成绩,判断
     如果大于等于90,则 输出 优秀
     如果大于等于80,则 输出 良好
     如果大于等于70,则 输出 合格
     如果大于等于60,则 输出 多努力
     以上条件均不满足,则 输出 在牛的肖邦,也弹不出哥的悲伤

[root@server0 /]# vim  /root/if.sh
	#!/bin/bash
	read -p '请输入您的成绩:'  num

	if [  $num  -ge   90  ];then
	  echo 优秀
	elif  [  $num  -ge  80  ];then
	  echo  良好
	elif  [  $num  -ge  70  ];then
	  echo 合格
	elif  [  $num  -ge  60  ];then
	  echo 多努力 
	else
	  echo 在牛的肖邦,也弹不出哥的悲伤
	fi

#################################################
案例7:
        计算机随机产生一个0~9的随机数字
        用户输入一个0~9的随机数字
     判断:
       如果  用户输入  与   计算机随机产生的数字一致,输出  恭喜您猜对了
       如果  用户输入  与   计算机随机产生的数字不一致,如果用户的数字大于计算机产生的数字输出猜大了,如果用户的数字小于计算机产生的数字输出猜小了.
$[$RANDOM%10]
$[ $RANDOM%10 ]

[root@server0 /]# vim  /root/num.sh
	#!/bin/bash
	num1=$[$RANDOM%10]
	read  -p  '请您输入一个0~9之间的数字:'    num2
	if  [  $num1   -eq  $num2  ];then
	   echo 恭喜您猜对了
	elif  [  $num2  -gt  $num1  ];then
	   echo  猜大了
	   echo  正确的是$num1
	else
	   echo  猜小了
	   echo  正确的是$num1
	fi


案例8:
        在案例7的基础上,允许用户可以有三次机会

for循环:
   作用反复执行重复性的操作

列表式循环:

	for 变量名 in 值列表
	do
	   命令序列
	done

[root@server0 /]# vim /root/for.sh
	#!/bin/bash
	for  i  in {1..10}
	do
	  useradd stu$i
	  echo stu$i创建成功
	done

Linux造数:   {起始..结束}   例:{3..10}



案例8:
        在案例7的基础上,允许用户可以有三次机会
[root@server0 /]# vim /root/num.sh 
	#!/bin/bash
	num1=$[$RANDOM%10]
	for i in  {1..3}
	do
	read  -p  '请您输入一个0~9之间的数字:'  num2
	if [ $num1 -eq $num2 ];then
	   echo 恭喜您猜对了
	   exit
	elif [ $num2 -gt $num1 ];then
	   echo 猜大了
	else
	   echo 猜小了
	fi
	done









﻿
还原三台虚拟机classroom server  desktop
[root@server0 ~]# rht-vmctl  reset classroom
[root@server0 ~]# rht-vmctl  reset server
[root@server0 ~]# rht-vmctl  reset desktop

确认虚拟机server  Yum是否可用
[root@server0 ~]# yum  clean   all
[root@server0 ~]# yum  repolist    
[root@server0 ~]# yum  -y  install  vsftpd 

######################################################
案例4：编写一个判断脚本
在server0 上创建/root/foo.sh 脚本
1）当运行/root/foo.sh   redhat，输出为fedora
2）当运行/root/foo.sh   fedora，输出为redhat
3）当没有任何参数或者参数不是redhat或者fedora时，
     其错误输出产生以下信息：/root/foo.sh redhat|fedora
*编写一个脚本，当输入redhat时输出fedora，当输入fedora时输出redhat，在没有参数或者参数不正确时能够输出一条带错误状态码的输出‘/root/foo.sh redhat|fedora’

[root@server0 ~]# vim  /root/foo.sh 
	#!/bin/bash
   if    [  $#   -eq   0  ];then    #判断是否输入参数
	 echo '/root/foo.sh  redhat|fedora'  >&2  #修改为错误输出
      exit  3      #脚本退出返回值为3
	elif     [  $1    ==   redhat  ];then
	     echo   fedora
	elif       [  $1   ==   fedora  ];then
	     echo    redhat
	else
   echo   '/root/foo.sh  redhat|fedora'  >&2  #修改为错误输出
      exit  4       #脚本退出返回值为4
	fi
[root@server0 ~]#  /root/foo.sh   redhat
[root@server0 ~]#  /root/foo.sh   fedora
[root@server0 ~]#  /root/foo.sh   abc

#####################################################

案例5:编写一个批量添加用户脚本
在 server0 上创建 /root/batchusers 脚本
1)此脚本要求提供用户名列表文件作为参数 
[root@server0 ~]# vim  /root/userlist 
duanwu
zhongqiu
zhsan
lisi

[root@server0 ~]# vim  /root/batchusers 
 #!/bin/bash
 for  i   in   `cat  $1`
 do
    useradd  $i
    echo  $i成功
 done
[root@server0 ~]# /root/batchusers   /root/userlist 

)如果没有提供参数,此脚本应该给出
提示 Usage: /root/batchusers,退出并返回相应值

3)如果提供一个不存在的文件,此脚本应该给出提
示 Input file not found,退出并返回相应值

4)新用户的登录Shell为 /bin/false,无需设置密码

    [root@server0 ~]# vim  /root/batchusers
	#!/bin/bash
	if   [ $#  -eq  0 ];then
	  echo  'Usage: /root/batchusers'  >&2 
	  exit  1
	elif [ -f $1 ];then
	  for i  in  `cat  $1`
	  do
	     useradd -s /bin/false  $i  #指定登陆的Shell解释器
	     echo  $i成功
	  done
	else
	   echo  'Input file not found'  >&2
		exit 2
     fi

#######################################################
系统安全保护

SELinux安全机制

SELinux运行模式的切换
• SELinux的运行模式

– enforcing(强制)、permissive(宽松)
– disabled(彻底禁用)

  修改为 disabled(彻底禁用)状态，必须需要通过重起系统

• 切换运行模式
– 临时切换:setenforce 1|0

– 固定配置:/etc/selinux/config 文件


虚拟机Server0
1.临时修改SELinux状态为permissive(宽松)
[root@server0 ~]# getenforce       #查看当前SELinux状态
Enforcing
[root@server0 ~]# setenforce 0     #设置当前SELinux状态为宽松
[root@server0 ~]# getenforce 
Permissive

2.修改固定配置:/etc/selinux/config 文件   #每次开机状态文件
SELINUX=permissive

虚拟机desktop0
1.临时修改SELinux状态为permissive(宽松)
[root@desktop0 ~]# getenforce 
Enforcing
[root@desktop0 ~]# setenforce 0
[root@desktop0 ~]# getenforce 
Permissive

2.修改固定配置:/etc/selinux/config 文件
SELINUX=permissive

#####################################################
配置用户环境,永久别名的定义

• 影响指定用户的 bash 解释环境
– ~/.bashrc,每次开启 bash 终端时生效

• 影响所有用户的 bash 解释环境
– /etc/bashrc,每次开启 bash 终端时生效

[root@server0 ~]# vim /root/.bashrc
alias hello='echo hello'

[root@server0 ~]# vim /home/student/.bashrc
alias hi='echo  hi'

[root@server0 ~]# vim /etc/bashrc
alias nsd='echo hello world'

关闭终端，从新开启一个终端进行远程管理gos

  root用户可以执行hello与nsd
  student用户可以执行hi与nsd

###################################################
防火墙策略管理

搭建Web服务

服务端:虚拟机Server0
1.安装可以提供Web服务软件
[root@server0 /]# yum -y install httpd

2.重起httpd服务
[root@server0 /]# systemctl restart httpd   #重起服务   
[root@server0 /]# systemctl enable httpd    #设置开机自启动
ln -s '/usr/lib/systemd/system/httpd.service' '/etc/systemd/system/multi-user.target.wants/httpd.service'

3.测试：
[root@server0 /]# firefox 172.25.0.11

4.书写一个页面文件
   默认存放网页文件的路径:/var/www/html
   默认网页文件的命令: index.html
[root@server0 /]# vim  /var/www/html/index.html
<marquee><font color=red><h1>NSD1804万岁  阳关明媚
 滚动              字体颜色            最大字体

[root@server0 /]# firefox  172.25.0.11


搭建FTP服务
1.安装一个可以提供FTP功能的软件
[root@server0 /]# yum -y install vsftpd

2.重起vsftpd服务，设置为开机自起
[root@server0 /]# systemctl restart vsftpd
[root@server0 /]# systemctl enable vsftpd
ln -s '/usr/lib/systemd/system/vsftpd.service' '/etc/systemd/system/multi-user.target.wants/vsftpd.service'

3.测试：
  默认FTP共享路径：/var/ftp
[root@server0 /]#  firefox  ftp://172.25.0.11
  默认可以看到pub目录

#######################################################
RHEL7防火墙：

   隔离作用：过滤所有的入站请求，允许出站

   硬件防火墙

   软件防火墙：firewalld

• 管理工具:firewall-cmd、firewall-config

####################################################

• 根据所在的网络场所区分,预设保护规则集
  – public:仅允许访问本机的sshd、dhcp、ping服务
  – trusted:允许任何访问
  – block:阻塞任何来访请求，明确回绝
  – drop:丢弃任何来访的数据包，直接丢弃不给回应，最节省资源

防火墙的判定：匹配及停止
    1.防火墙会查看请求中的源IP地址，再查询本防火墙所有区域中，那一个区域有该源IP地址的规则，则进入该区域

    2.进入默认区域（public）

#######################################################
默认区域的修改

虚拟机Server0
# firewall-cmd --get-default-zone   #查看默认区域
虚拟机desktop0
# ping -c 2 172.25.0.11   #可以ping通

虚拟机Server0
# firewall-cmd --set-default-zone=block  #修改默认区域为block
# firewall-cmd --get-default-zone        #查看默认区域
虚拟机desktop0
# ping -c 2 172.25.0.11 #不可以ping通，有回应

虚拟机Server0
# firewall-cmd --set-default-zone=drop #修改默认区域为drop
# firewall-cmd --get-default-zone       #查看默认区域
虚拟机desktop0
# ping -c 2 172.25.0.11  #不可以ping通，无回应

#######################################################
服务的添加
虚拟机Server0
# firewall-cmd --set-default-zone=public   #修改默认区域为public
# firewall-cmd --get-default-zone          #查看默认区域
# firewall-cmd --zone=public --list-all    #查看区域public规则
虚拟机desktop0
# firefox 172.25.0.11  #无法访问
# firefox ftp://172.25.0.11   #无法访问

虚拟机Server0
# firewall-cmd --zone=public  --add-service=http  #添加可以访问的协议
# firewall-cmd --zone=public --list-all 
虚拟机desktop0
# firefox 172.25.0.11  #访问成功
# firefox ftp://172.25.0.11   #无法访问

虚拟机Server0
# firewall-cmd --zone=public --add-service=ftp  #添加可以访问的协议
# firewall-cmd --zone=public --list-all 
虚拟机desktop0
# firefox 172.25.0.11  #访问成功
# firefox ftp://172.25.0.11   #访问成功

服务协议：

DNS：域名解析协议                    默认的端口：53
http:超文本传输协议                默认的端口：80
https：安全的超文本传输协议  默认的端口：443
tftp：简单的文件传输协议       默认的端口：69
ftp:文件传输协议                     默认的端口：21
ssh：网络管理协议                    默认的端口：22  
telnet：远程管理协议             默认的端口：23
smtp：用户发邮件协议              默认的端口：25
pop3：用户收邮件协议               默认的端口：110
snmp：网络管理协议                   默认的端口：161
					
         


###################################################
防火墙策略的永久设置

– 永久(permanent)
虚拟机Server0
# firewall-cmd --reload      #重新加载防火墙所有配置
# firewall-cmd --zone=public --list-all

# firewall-cmd --permanent --zone=public --add-service=http
# firewall-cmd --zone=public --list-all 

# firewall-cmd --reload      #重新加载防火墙所有配置
# firewall-cmd --zone=public --list-all 


#######################################################
源IP地址的添加

虚拟机Server0   
# firewall-cmd --zone=block --add-source=172.25.0.10
# firewall-cmd --zone=block --list-all 

虚拟机desktop0 
# firefox  172.25.0.11    #不可以访问
# ping   172.25.0.11      #不可以访问

真机：
# firefox   172.25.0.11   #可以访问
# ping   172.25.0.11      #可以访问

#####################################################
防火墙设置方式：


严格：默认区域设置为drop区域,允许的放入trusted区域
# firewall-cmd --set-default-zone=drop
# firewall-cmd --zone=trusted --add-source=172.25.0.10
宽松：默认区域设置为trusted区域，拒绝的单独放入drop区域
# firewall-cmd --set-default-zone=truested
# firewall-cmd --zone=drop --add-source=172.25.0.10

####################################################
防火墙的端口转发：

  端口：利用编号，标识一个服务或程序

 客户端访问172.25.0.11:5423服务端将其请求转发给本地的80端口

虚拟机Server0
[root@server0 ~]# firewall-cmd --reload 
虚拟机desktop0
[root@desktop0 ~]# firefox 172.25.0.11:5423

虚拟机Server0
# firewall-cmd --permanent --zone=public  
--add-forward-port=port=5423:proto=tcp:toport=80

# firewall-cmd --reload 
# firewall-cmd --zone=public --list-all 

虚拟机desktop0
[root@desktop0 ~]# firefox 172.25.0.11:5423

###################################################
配置IPv6地址

 IPv4地址：32个二进制    用  点  分隔4个部分    4个进制数表示

 IPv6地址：128个二进制   用  冒号  分隔 8个部分  每部分化成4个16进制数

虚拟机server0:

[root@server0 ~]# nmcli connection modify 'System eth0'  ipv6.method manual ipv6.addresses 2003:ac18::305/64 connection.autoconnect  yes

# nmcli connection up 'System eth0'

# ping6 2003:ac18::305

######################################################




 



﻿
还原三台虚拟机classroom server  desktop
[root@server0 ~]# rht-vmctl  reset classroom
[root@server0 ~]# rht-vmctl  reset server
[root@server0 ~]# rht-vmctl  reset desktop

虚拟机server0
[root@server0 ~]# firewall-cmd --set-default-zone=trusted 

虚拟机desktop0
[root@desktop0 ~]# firewall-cmd --set-default-zone=trusted

####################################################
Samba服务基础，配置SMB共享（跨平台的共享：Windows 与 Linux）

• Samba 软件项目
– 用途:为客户机提供共享使用的文件夹
– 协议:SMB(TCP 139)、CIFS(TCP 445)

• 所需软件包:samba
• 系统服务:smb



管理共享账号
• Samba用户 —— 专用来访问共享文件夹的用户
– 采用独立设置的密码
– 但需要提前建立同名的系统用户(可以不设密码)

• 使用 pdbedit 管理工具
– 添加用户:pdbedit -a 用户名
– 查询用户:pdbedit -L [用户名]
– 删除用户:pdbedit -x 用户名


• 修改 /etc/samba/smb.conf

[自定共享名]
path = 文件夹绝对路径
; public = no|yes //默认no
; browseable = yes|no //默认yes
; read only = yes|no //默认yes
; write list = 用户1 .. .. //默认无
; valid users = 用户1 .. .. //默认任何用户
; hosts allow = 客户机地址 .. ..
; hosts deny = 客户机地址 .. ..

服务端虚拟机Server0：
 1.安装samba软件
 2.创建Samba共享帐号
[root@server0 ~]# useradd harry
[root@server0 ~]# useradd kenji
[root@server0 ~]# useradd chihiro #这三个账户都没有设置密码
[root@server0 ~]# pdbedit -a harry     #添加为Samba帐号
[root@server0 ~]# pdbedit -a kenji     #添加为Samba帐号
[root@server0 ~]# pdbedit -a chihiro   #添加为Samba帐号
										    #这里需要设置samba帐号和密码

[root@server0 ~]# pdbedit -L           #查看Samba帐号 

3.创建共享目录
[root@server0 ~]# mkdir /common
[root@server0 ~]# echo 123 > /common/1.txt

4.修改配置文件/etc/samba/smb.conf

 补充vim 命令模式：/workgroup   #全文查找workgroup 按n跳转
                              按G可以直接到全文的最后 ,建议再文件最后加入内容        

    workgroup = STAFF        #设置工作组

	[common]                 #共享名
	path  =  /common         #共享实际路径

5.重起smb服务,设置smb服务为开机自启动

6.修改SELinux策略，布尔值（功能的开关）
 – 需要加 -P 选项才能实现永久设置
 查看布尔值
[root@server0 ~]# getsebool -a | grep samba
 修改布尔值
[root@server0 ~]# setsebool samba_export_all_ro on
[root@server0 ~]# getsebool -a | grep samba

客户端虚拟机Desktop0：
1. 安装客户端软件samba-client
2. 利用命令访问
[root@desktop0 ~]# smbclient -L 172.25.0.11
Enter root's password: 

[root@desktop0 ~]# smbclient -U harry //172.25.0.11/common
Enter harry's password: 
Domain=[STAFF] OS=[Unix] Server=[Samba 4.1.1]
smb: \> 

#####################################################
客户端访问服务端资源：
1.防火墙
2.服务本身的访问控制
3.SELinux策略
4.本地目录的权限（本地的权限）


#####################################################
更加科学的访问方式mount挂载
客户端：虚拟机desktop0

1.安装一个可以支持挂载smb资源的软件,所需软件包:cifs-utils
# yum -y install cifs-utils
# mkdir /mnt/test
# mount -o user=harry,pass=123 //172.25.0.11/common /mnt/test

# ls /mnt/test
# df -h    #查看挂载情况
 
2.开机自动挂载/etc/fstab

 _netdev:声明网络设备
       再开机启动时，首先开启网络服务后，再进行挂载本设备

//172.25.0.11/common  /mnt/test    cifs defaults,user=harry,pass=123,_netdev 0 0

[root@desktop0 ~]# umount /mnt/test/   #卸载设备
[root@desktop0 ~]# df -h
[root@desktop0 ~]# mount -a   #验证是否书写正确，进行挂载
[root@desktop0 ~]# df -h

######################################################
读写的Samba共享

虚拟机Server0:
1.创建共享目录
[root@server0 ~]# mkdir /devops
[root@server0 ~]# echo redhat > /devops/a.txt

2.修改/etc/samba/smb.conf

[devops]
path = /devops
write list = chihiro

3.重起smb服务

4.修改SELinux策略
[root@server0 ~]# getsebool -a | grep samba
[root@server0 ~]# setsebool samba_export_all_rw on
[root@server0 ~]# getsebool -a | grep samba

5.修改本地权限
[root@server0 ~]# setfacl -m  u:chihiro:rwx /devops/
[root@server0 ~]# getfacl /devops/

虚拟机Desktop0：

 No such file or directory:没找到文件或目录

1.开机自动挂载：

//172.25.0.11/devops /mnt/nsd  cifs defaults,user=chihiro,pass=123,_netdev 0 0

2.利用 mount  -a 进行测试挂载

####################################################
multiuser机制,为所有普通用户设计

作用：
  客户端挂载时，以权限较小的用户认证。必要时，可以通过指令进行用户身份的切换

• mount.cifs 的挂载参数
– multiuser,提供对客户端多个用户身份的区分支持
– sec=ntlmssp,提供NT局域网管理安全支持

• 使用 cifscreds 提交新的用户凭据并测试
– cifscreds add|update -u 共享用户名 服务器地址

[student@desktop0 nsd]$ cifscreds add -u chihiro 172.25.0.11

########################################################

NFS共享概述 (Linux与Linux)
• Network File System,网络文件系统
– 用途:为客户机提供共享使用的文件夹
– 协议:NFS(TCP/UDP 2049)、RPC(TCP/UDP 111)

• 所需软件包:nfs-utils
• 系统服务:nfs-server
• 修改 /etc/exports
– 文件夹路径    客户机地址(权限)

 只读 的NFS共享
虚拟机Server0：
1.安装nfs-utils包
2.创建共享目录
[root@server0 ~]# mkdir /public
[root@server0 ~]# echo 123 > /public/123.txt

3.修改配置文件/etc/exports
/public         *(ro)
共享路径                所有人(只读访问)

4.重起nfs-server服务
[root@server0 ~]# systemctl restart nfs-server
[root@server0 ~]# systemctl enable nfs-server

客户端访问：虚拟机Desktop0

  does not exist:不存在

[root@desktop0 /]# mkdir /mnt/nfsmount
[root@desktop0 /]# vim /etc/fstab

172.25.0.11:/public /mnt/nfsmount nfs defaults,_netdev 0 0

[root@desktop0 /]# mount -a
[root@desktop0 /]# df -h

#####################################################
什么是交换空间
• 相当于虚拟内存
– 当物理内存不够用时,使用磁盘空间来模拟内存
– 在一定程度上缓解内存不足的问题
– 交换分区:以空闲分区充当的交换空间



虚拟机Server
1.划分新的分区
    fdisk /dev/vdb 划分两个主分区，大小为2G与5G

2.添加交换空间
[root@server0 ~]# swapon -s         #查看Swap空间组成 成员
[root@server0 ~]# mkswap /dev/vdb1  #格式化交换文件系统
[root@server0 ~]# swapon /dev/vdb1  #启用Swap空间 成员
[root@server0 ~]# swapon -s  

[root@server0 ~]# mkswap /dev/vdb2
[root@server0 ~]# swapon /dev/vdb2
[root@server0 ~]# swapon -s 
[root@server0 ~]# swapoff /dev/vdb2
[root@server0 ~]# swapon -s

3.完成开机自动启用
[root@server0 ~]# vim  /etc/fstab
/dev/vdb1   swap    swap  defaults 0 0
/dev/vdb2   swap    swap  defaults 0 0

[root@server0 ~]# swapon  -a  #开机检测swap分区的命令
[root@server0 ~]# swapon  -s

########################################################











﻿还原三台虚拟机classroom server  desktop
[root@server0 ~]# rht-vmctl  reset classroom
[root@server0 ~]# rht-vmctl  reset server
[root@server0 ~]# rht-vmctl  reset desktop

虚拟机server0
[root@server0 ~]# firewall-cmd --set-default-zone=trusted 

虚拟机desktop0
[root@desktop0 ~]# firewall-cmd --set-default-zone=trusted

#######################################################
iSCSI网络磁盘

虚拟机Server0
一、划分一个分区5G
[root@server0 ~]# lsblk 
[root@server0 ~]# fdisk /dev/vdb
 n新建分区--->默认主分区回车 --->默认第一主分区回车--->起始回车--->+5G

[root@server0 ~]# lsblk 
[root@server0 ~]# ls /dev/vdb1

• Internet SCSI,网际SCSI接口
– 一种基于C/S架构的虚拟磁盘技术
– 服务器提供磁盘空间,客户机连接并当成本地磁盘使用


• backstore,后端存储
– 对应到服务端提供实际存储空间的设备,需要起一个
管理名称

• target,磁盘组
– 是客户端的访问目标,作为一个框架,由多个lun组成

• lun,逻辑单元
– 每一个lun需要关联到某一个后端存储设备,在客户端
会视为一块虚拟硬盘

二、构建iSCSI共享存储服务端
虚拟机Server0：
1.安装一个服务端软件targetcli
[root@server0 ~]# yum -y install targetcli

2.运行targetcli命令进行配置
[root@server0 ~]# targetcli 

---建立后端存储,为后端存储命名为nsd

/> backstores/block create nsd /dev/vdb1
Created block storage object nsd using /dev/vdb1.

/> ls

---建立target磁盘组（建立一个箱子）
• ISCSI Qualified Name 名称规范
– iqn.yyyy-mm.倒序域名:自定义标识
– 用来识别 target 磁盘组,也用来识别客户机身份

/> iscsi/ create  iqn.2018-05.example.com:server

/> ls

---lun需要关联(将后端存储放入箱子中)
/> iscsi/iqn.2018-05.example.com:server/tpg1/luns create /
  backstores/block/nsd 

/> ls

---ACL访问控制, 客户端声称的名字
/> iscsi/iqn.2018-05.example.com:server/tpg1/acls create 
  iqn.2018-05.example.com:abc

/> ls

---启用IP地址与端口
/> iscsi/iqn.2018-05.example.com:server/tpg1/portals  
  create 172.25.0.11

/> ls

/> exit   #保存并退出


3.重起服务target，设置开机自启动
[root@server0 ~]# systemctl restart target
[root@server0 ~]# systemctl enable target

客户端：访问服务端共享存储
虚拟机Desktop:
1.安装一个客户端软件iscsi-initiator-utils
[root@desktop0 ~]# yum repolist  #产生缓存
[root@desktop0 ~]# yum -y install iscsi(tab)

2.修改配置文件/etc/iscsi/initiatorname.iscsi
  #指定客户端声称的名字
[root@desktop0 ~]# vim /etc/iscsi/initiatorname.iscsi 
InitiatorName=iqn.2018-05.example.com:abc

3.重起iscsid服务,该服务只是刷新客户端iqn名称
[root@desktop0 ~]# systemctl restart iscsid
Warning: Unit file of iscsid.service changed on disk, 'systemctl daemon-reload' recommended.
[root@desktop0 ~]# systemctl daemon-reload
[root@desktop0 ~]# systemctl restart iscsid

4.发现服务端共享存储,  Ctrl 加  - 号 放小字体   Ctrl shift 加 + 号
[root@room9pc01 ~]# man iscsiadm  #按大写的G到最后

[root@desktop0 ~]# iscsiadm --mode discoverydb --type sendtargets --portal 172.25.0.11 --discover

172.25.0.11:3260,1 iqn.2018-05.example.com:server

5.重起iscsi加载共享存
[root@desktop0 ~]# lsblk 
[root@desktop0 ~]# systemctl restart iscsi
[root@desktop0 ~]# systemctl enable iscsi
[root@desktop0 ~]# lsblk  
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
sda      8:0    0   5G  0 disk 

######################################################
数据库管理

  数据库:存放数据的仓库
  
   数据库中有很多的库，再库里有很多的表格
   表字段（表头）与表记录（每一个记录）


虚拟机Server0
部署mariadb数据库服务器
1.安装mariadb-server数据主程序
[root@server0 ~]# yum -y  install mariadb-server

2.启动mariadb服务，设置为开机自启动
[root@server0 ~]# systemctl restart mariadb
[root@server0 ~]# systemctl enable mariadb

    mariadb与mysql数据库，默认端口为3306

3.进入mariadb数据库,默认情况下数据库是没有密码的

[root@server0 ~]# mysql

MariaDB [(none)]> show  databases;   #查看所有库

MariaDB [(none)]> create  database  nsd1804;  #创建nsd1804库
MariaDB [(none)]> show  databases;   #查看所有库

MariaDB [(none)]> drop  database  nsd1804;  #删除nsd1804库
MariaDB [(none)]> show databases;

MariaDB [(none)]> create  database  nsd;  #创建nsd库
MariaDB [(none)]> show  databases;
MariaDB [(none)]> exit
Bye

4.在Linux命令行mariadb数据库,设置数据库管理员密码

 数据库管理员：名root，对mariadb数据库最高权限的用户，信息mysql库

 系统管理员：名root，对Linux系统最高权限的用户，信息/etc/passwd

• 为数据库账号修改密码
– mysqladmin [-u用户名] [-p[旧密码]] password '新密码'

[root@server0 ~]# mysqladmin -u root password '123'
交互式
[root@server0 ~]# mysql -u root -p 
Enter password:
 
非交互式
[root@server0 ~]# mysql -u root -p123 

5.MariaDB 主配置文件/etc/my.cnf
• 禁止监听,只服务于本机
[root@server0 ~]# vim /etc/my.cnf
[mysqld]
skip-networking   //跳过网络监听
.. ..
[root@server0 ~]# systemctl restart mariadb

6.表的操作： 增(insert)    删(delete)     改(update)        查(select)
[root@server0 ~]# mysql -u root -p123
MariaDB [(none)]> use  mysql;     #进入mysql库

MariaDB [mysql]> show tables;     #查看所有表格

MariaDB [mysql]> desc user;       #查看表结构

MariaDB [mysql]> select user,host,password from user;

MariaDB [mysql]> select user,password from user;

MariaDB [(none)]> select user,password from mysql.user;

  select   表字段1,表字段2     from   库名.表名;

7.恢复库中的数据
[root@server0 ~]# wget http://classroom.example.com/pub/materials/users.sql

[root@server0 ~]# mysql -u root -p123 nsd < users.sql

[root@server0 ~]# mysql -u root -p123 

MariaDB [(none)]> use nsd;   #进入nsd库

MariaDB [nsd]> show tables;  #查看所有表格

MariaDB [nsd]> select * from base;   #查看base表中所有字段

MariaDB [nsd]> select * from location;

8.数据库表查询，有条件查询
MariaDB [nsd]> select * from base where 表字段='值'; 

MariaDB [nsd]> use nsd

MariaDB [nsd]> select * from base where name='Barbara';

MariaDB [nsd]> select * from base where name='tom';

MariaDB [nsd]> select * from base where password='123';

 多个条件之间   and（同时满足）  与  or （或者满足其中一个即可）

MariaDB [nsd]> select * from base where password='123'  or  password='456';
MariaDB [nsd]> select * from base where name='tom'      and  password='123';

9.数据库的授权
– 除了root用户,此数据库nsd只能被用户lisi查询,此用户的密码为123

– GRANT 权限列  ON 数据库名.表名  TO 用户名@
客户机地址 IDENTIFIED BY '密码';

 grant select  on  nsd.*  to  lisi@localhost identified by  '123';

  当lisi从localhost本地登陆数据库输入密码123，将会获得nsd库中所有表的查询权限

MariaDB [nsd]> grant select  on  nsd.*  to  lisi@localhost identified by  '123';

查看表记录
MariaDB [nsd]> select user,host,password from mysql.user where user='lisi';

[root@server0 ~]# mysql -u lisi -p123  #测试lisi登陆

#####################################################
2. 在系统 server0 上使用数据库 nsd,并使用相
应的 SQL 查询以回答下列问题:
1)密码是 solicitous 的人的名字?
[root@server0 ~]# mysql -u root -p123

MariaDB [(none)]> use nsd;

MariaDB [nsd]> select * from base;

MariaDB [nsd]> select * from base where password='solicitous';

MariaDB [nsd]> select name,password from base where password='solicitous';

2)有多少人的姓名是 Barbara 同时居住在 Sunnyvale?

MariaDB [nsd]> select  *  from  base,location 
 where 
 base.name='Barbara' and  location.city='Sunnyvale'      
 and  base.id=location.id;

MariaDB [nsd]> select  count(*)  from  base,location 
 where 
 base.name='Barbara'  and  location.city='Sunnyvale'       
 and  base.id=location.id;

MariaDB [nsd]> insert  base  values('6','Barbara','789');
MariaDB [nsd]> select *  from  base;
MariaDB [nsd]> insert  location  values('6','Sunnyvale');
MariaDB [nsd]> select *  from  location;


1. 禁止空密码root用户访问 mariadb 数据库

MariaDB [(none)]> use mysql;

> select user,host,password from user;
 
> select user,host,password from user where password='';

> delete from user  where password='';    #删除表记录

> select user,host,password from user;

> flush  privileges;    #刷新数据库user表信息；

> exit

######################################################






﻿还原三台虚拟机classroom server  desktop
[root@server0 ~]# rht-vmctl  reset classroom
[root@server0 ~]# rht-vmctl  reset server
[root@server0 ~]# rht-vmctl  reset desktop

虚拟机server0
[root@server0 ~]# firewall-cmd --set-default-zone=trusted 

虚拟机desktop0
[root@desktop0 ~]# firewall-cmd --set-default-zone=trusted

#######################################################
Web通信基本概念
• 基于 B/S (Browser/Server)架构的网页服务
– 服务端提供网页
– 浏览器下载并显示网页
• Hyper Text Markup Language,超文本标记语言(html)
• Hyper Text Transfer Protocol,超文本传输协议(http)

• 软件包:httpd
• 系统服务:httpd

• 提供的默认配置
– Listen:监听地址:端口(80)
– ServerName:本站点注册的DNS名称(空缺)
– DocumentRoot:网页根目录(/var/www/html)
– DirectoryIndex:起始页/首页文件名(index.html)
虚拟机Server0
1.安装httpd软件包
[root@server0 ~]# yum -y install httpd

2.启动httpd服务
[root@server0 ~]# systemctl  restart  httpd
[root@server0 ~]# systemctl  enable  httpd

3.书写一个页面文件
   默认的网页文件路径：/var/www/html
   默认的网页文件名：index.html
[root@server0 ~]# cat /var/www/html/index.html
My First Web

######################################################
二、修改配置文件/etc/httpd/conf/httpd.conf

 今日可用的域名     server0.example.com
                www0.example.com
                webapp0.example.com

  IncludeOptional conf.d/*.conf     #调用配置文件


ServerName:本站点注册的完整的域名

1.修改配置文件/etc/httpd/conf/httpd.conf
 (补充：vim末行模式  set  nu  开启行号)
 (补充：vim命令模式  /ServerName  全文搜索ServerName 按n)

  95行  ServerName server0.example.com:80

2.重起httpd服务
[root@server0 ~]# systemctl restart  httpd

3.测试利用域名访问
[root@server0 ~]# firefox server0.example.com

#################################################
 DocumentRoot:网页文件的根目录(/var/www/html)

1.创建目录书写页面
[root@server0 ~]# mkdir /var/www/myweb
[root@server0 ~]# cat  /var/www/myweb/index.html
 wo shi myweb
2.修改配置文件/etc/httpd/conf/httpd.conf
 (补充：vim末行模式  set  nu  开启行号)
 (补充：vim命令模式  /DocumentRoot  全文搜索DocumentRoot 按n)

119 DocumentRoot "/var/www/myweb"

3.重起httpd服务
[root@server0 ~]# systemctl restart  httpd

4.测试利用域名访问
[root@server0 ~]# firefox server0.example.com

######################################################
####################虚拟Web主机########################

 作用：让一台服务器，提供多个网站

虚拟Web主机构建方式：

     1.基于域名的区分方式
     2.基于端口的区分方式
     3.基于IP的区分方式

虚拟Server0
1.建立新的调用配置文件/etc/httpd/conf.d/nsd01.conf
<VirtualHost  *:80>                  #在所有网卡启用80端口
  ServerName   www0.example.com      #指定网站域名
  DocumentRoot   /var/www/nsd01      #指定网页文件路径
</VirtualHost>

<VirtualHost  *:80>
  ServerName   webapp0.example.com
  DocumentRoot   /var/www/nsd02
</VirtualHost>

# mkdir  /var/www/nsd01   /var/www/nsd02
# echo wo shi nsd01  >  /var/www/nsd01/index.html
# echo wo shi nsd02  >  /var/www/nsd02/index.html
# systemctl  restart  httpd


 注意：一旦启用虚拟Web主机功能，所有的站点都必须用虚拟Web主机来实现

[root@server0 ~]# vim /etc/httpd/conf.d/nsd01.conf
 ......
<VirtualHost  *:80>
  ServerName   server0.example.com
  DocumentRoot   /var/www/myweb
</VirtualHost>

[root@server0 ~]# systemctl restart httpd

######################################################
#################Web的访问控制##########################
– 每个文件夹自动继承其父目录的ACL访问权限
– 除非针对子目录有明确设置

在 Web 网站 http://server0.example.com 的
DocumentRoot 目录下创建一个名为 private 的子目录
要求如下:
虚拟机Server0
# mkdir /var/www/myweb/private
# echo wo shi private > /var/www/myweb/private/index.html
 
[root@server0 ~]# cat /etc/httpd/conf.d/nsd02.conf
<Directory "/var/www/myweb/private">
    Require ip 172.25.0.11
</Directory>
[root@server0 ~]# systemctl restart httpd

客户端虚拟机Desktop：访问测试
[root@desktop0 ~]# firefox  server0.example.com/private
网页报错信息
Forbidden
You don't have permission to access /private/ on this server.

#####################################################
1.防火墙
2.服务访问控制
3.SELinux
4.本地目录的权限
###################################################

案例4:使用自定Web根目录
调整 Web 站点 http://server0.example.com 的网页
目录,要求如下:

虚拟机Server0：
1)新建目录 /webroot,作为此站点新的网页目录
[root@server0 ~]# mkdir /webroot
[root@server0 ~]# echo wo shi webroot > /webroot/index.html

2)修改配置文件/etc/httpd/conf.d/nsd01.conf
......
<VirtualHost  *:80>
  ServerName  server0.example.com
  DocumentRoot  /webroot
</VirtualHost>


3)修改配置文件/etc/httpd/conf.d/nsd02.conf(访问控制)
......
<Directory  "/webroot">
    Require all granted
</Directory>
           
4)SELinux安全上下文（标签值）
• 参照标准目录,重设新目录的属性:
– chcon [-R] --reference=模板目录    新目录
[root@server0 ~]# ls -Zd /webroot/
[root@server0 ~]# chcon -R  --reference=/var/www  /webroot/
[root@server0 ~]# ls -Zd /webroot/

5)重起服务
[root@server0 ~]#  systemctl  restart  httpd

客户端desktop:访问测试
[root@server0 ~]# firefox server0.example.com

######################################################
部署动态网站


静态网站的运行
• 服务端的原始网页 = 浏览器访问到的网页
– 由Web服务软件处理所有请求
– 文本(txt/html)、图片(jpg/png)等静态资源
– 静态网站不需要翻译


动态网站的运行
• 服务端的原始网页 ≠ 浏览器访问到的网页
– 由Web服务软件接受请求,动态程序转后端模块处理
– PHP网页、Python网页、JSP网页......
– 动态网站需要其他程序翻译
虚拟机Server0：

为站点 webapp0.example.com 配置提供动态Web
1.部署Python的页面
[root@server0 ~]# vim /etc/httpd/conf.d/nsd01.conf
 查看webapp0.example.com的DocumentRoot路径
  
# cd /var/www/nsd02/
# wget http://classroom.example.com/pub/materials/webinfo.wsgi

2.方便用户访问,网页跳转（网页别名）
[root@server0 /]# vim /etc/httpd/conf.d/nsd01.conf
......
<VirtualHost  *:80>
  ServerName webapp0.example.com
  DocumentRoot /var/www/nsd02
  Alias   /    /var/www/nsd02/webinfo.wsgi

   #当用户访问网页文件根目录时，将webinfo.wsgi呈现

</VirtualHost>
......
[root@server0 /]# systemctl restart httpd

[root@server0 /]# firefox webapp0.example.com

3.翻译Python页面
[root@server0 /]# yum -y install mod_wsgi
[root@server0 /]# vim /etc/httpd/conf.d/nsd01.conf 
<VirtualHost  *:80>
  ServerName webapp0.example.com
  DocumentRoot /var/www/nsd02
  WsgiScriptAlias /  /var/www/nsd02/webinfo.wsgi

</VirtualHost>
[root@server0 /]#  systemctl restart httpd
[root@server0 /]#  firefox webapp0.example.com

  UNIX时间戳：自1970-1-1 0:0:0算起，到达当前时间所经历的秒数

4.修改虚拟Web主机的端口
[root@server0 /]# vim /etc/httpd/conf.d/nsd01.conf
......
Listen 8909
<VirtualHost  *:8909>
  ServerName webapp0.example.com
  DocumentRoot /var/www/nsd02
  WsgiScriptAlias /  /var/www/nsd02/webinfo.wsgi
</VirtualHost>
......

5.修改SELinux开放的端口，-a添加   -t 类型   -p 协议
# semanage port -l | grep http
# semanage port -a -t  http_port_t  -p tcp 8909
# semanage port -l | grep http  #查看是否添加成功
# systemctl restart httpd

[root@desktop0 ~]# firefox webapp0.example.com:8909

#####################################################
安全Web服务

  https协议传输，安全的超文本传输协议  端口：443

– 公钥:主要用来加密数据
– 私钥:主要用来解密数据(与相应的公钥匹配)
– 数字证书:证明拥有者的合法性/权威性(单位名称、
有效期、公钥、颁发机构及签名、......)
– Certificate Authority,数字证书授权中心:负责证书
的申请/审核/颁发/鉴定/撤销等管理工作

虚拟机Server0：
1.部署网站证书（营业执照）
[root@server0 /]# cd /etc/pki/tls/certs/
[root@server0 certs]# wget http://classroom.example.com/pub/tls/certs/server0.crt
[root@server0 certs]# ls

2.部署数字证书授权中心信息（根证书）（公安局信息）
[root@server0 /]# cd /etc/pki/tls/certs/
[root@server0 certs]# wget http://classroom.example.com/pub/example-ca.crt
[root@server0 certs]# ls

3.部署私钥文件,用于解密数据
[root@server0 certs]# cd /etc/pki/tls/private/
[root@server0 private]# wget http://classroom.example.com/pub/tls/private/server0.key
[root@server0 certs]# ls

4.安装支持安全Web的软件
[root@server0 /]# yum -y install mod_ssl

5.修改配置文件
[root@server0 /]# vim /etc/httpd/conf.d/ssl.conf
  补充：vim末行模式下 输入 : set  nu 显示行号

 59 DocumentRoot "/var/www/myweb"
 60 ServerName www0.example.com:443

指定网站证书
100 SSLCertificateFile /etc/pki/tls/certs/server0.crt

指定私钥文件
107 SSLCertificateKeyFile /etc/pki/tls/private/server0.key

指定根证书（数字授权中心信息）
122 SSLCACertificateFile /etc/pki/tls/certs/example-ca.crt

6.重起 httpd 服务

7.验证
[root@desktop0 ~]# firefox https://www0.example.com

######################################################

        





﻿还原三台虚拟机classroom server  desktop
[root@server0 ~]# rht-vmctl  reset classroom
[root@server0 ~]# rht-vmctl  reset server
[root@server0 ~]# rht-vmctl  reset desktop

虚拟机server0
[root@server0 ~]# firewall-cmd --set-default-zone=trusted 

虚拟机desktop0
[root@desktop0 ~]# firewall-cmd --set-default-zone=trusted

#######################################################
邮件服务

前提：主机名设置为固定静态
虚拟机Server0：
[root@server0 ~]# vim /etc/hostname 
server0.example.com

虚拟机desktop0：
[root@desktop0 ~]# vim /etc/hostname 
desktop0.example.com


• 电子邮件服务器的基本功能
– 为用户提供电子邮箱存储空间(用户名@邮件域名)
– 处理用户发出的邮件 —— 传递给收件服务器
– 处理用户收到的邮件 —— 投递到邮箱

  SMTP（25）:用户发出邮件的协议

  pop3（110）  IMAP（143）:用户收邮件的协议

#################################################
快速部署postfix邮件服务器

虚拟机Server0
1.安装postfix软件
[root@server0 ~]# rpm -q postfix

2.修改主配置文件/etc/postfix/main.cf
[root@server0 ~]# vim  /etc/postfix/main.cf
 在vim末行模式   :set  nu 显示行号
  
  99行  myorigin = server0.example.com   #默认补全的域名后缀
 116行 inet_interfaces = all      #本机所有网卡均支持邮件功能
 164行 mydestination = server0.example.com  #判断为本域邮件

3.重起postfix服务

[root@server0 ~]# systemctl restart postfix
#################################################
在本机虚拟机Server0验证：
[root@server0 ~]# useradd  yg
[root@server0 ~]# useradd  xln
• mail 发信操作
– mail -s '邮件标题'   -r 发件人   收件人[@收件域]...

• mail 收信操作
– mail [-u 用户名]

[root@server0 ~]# mail -s '葵花宝典'     -r   yg   xln
我 练成了，haha
.
EOT
[root@server0 ~]# mail -u xln
>N  1 yg@server0.example.c  Wed May 16 10:26  18/610   
& 1   输入编号1查看邮件

#####################################################
parted分区工具

    GPT分区模式： 128个主分区    最大18EB容量

[root@server0 ~]# parted  /dev/vdb
(parted) mktable gpt     #指定分区模式
(parted) print           #输出分区信息
(parted) mkpart          #划分新的分区
分区名称？  []? haha         #分区的名字
文件系统类型？  [ext2]? ext4  #文件系统，无实际意义
起始点？ 0           
结束点？ 2G          
警告: The resulting partition is not properly aligned
for best performance.
 忽略/Ignore/放弃/Cancel? Ignore    #忽略
(parted) print
(parted) unit  GB    #利用GB作为显示单位
(parted) print
(parted) mkpart 
 分区名称？  []? haha 
 文件系统类型？  [ext2]? ext4
 起始点？ 2G          
 结束点? 6G 
(parted) print   
######################################################


配置聚合连接(网卡绑定  链路聚合  组队)

  作用：备份网卡，防止单点故障

   热备份(activebackup)连接冗余

1.创建虚拟网卡team0 ,  # man teamd.conf   全文搜索/example

# nmcli connection  add  type  team         
  con-name  team0  ifname team0  autoconnect  yes          
  config  '{"runner": {"name": "activebackup"}}'

# nmcli connection 添加     类型    为组队
    配置文件名   team0  ifconfig显示的名字为  team0  开机自启动
    配置为  '{"runner": {"name": "activebackup"}}' (热备份方式)

# 如果敲错：
# nmcli connection  delete  team0     #删掉从新做
2.添加成员

# nmcli connection add type team-slave 
  con-name team0-1 ifname eth1 master team0

# nmcli connection add type team-slave 
  con-name team0-2 ifname eth2 master team0

# nmcli connection  添加  类型   为team的成员
    配置文件名  为team0-2  网卡为  eth2  主设备为  team0

# 如果敲错：
# nmcli connection  delete  team0-1     #删掉从新做
# nmcli connection  delete  team0-2     #删掉从新做

3.为team0配置ip地址
[root@server0 ~]# nmcli  connection  modify  team0       ipv4.method  manual  ipv4.addresses  192.168.1.1/24     connection.autoconnect   yes

4.激活所有的配置
[root@server0 ~]# nmcli connection up team0
[root@server0 ~]# nmcli connection up team0-1
[root@server0 ~]# nmcli connection up team0-2

[root@server0 ~]# ifconfig team0


5.专业检测team0命令
[root@server0 ~]# teamdctl team0 state

[root@server0 ~]# ifconfig eth1 down
##############################################

搭建SERVICES教学环境

1.真机搭建Web服务共享光盘所有内容
[root@room9pc01 ~]# rpm -q httpd
[root@room9pc01 ~]# systemctl restart  httpd
[root@room9pc01 ~]# systemctl enable  httpd

[root@room9pc01 ~]# mkdir /var/www/html/rhel7
[root@room9pc01 ~]# mount /iso/rhel-server-7.4-x86_64-dvd.iso  /var/www/html/rhel7/

[root@room9pc01 ~]# ls /var/www/html/rhel7/
[root@room9pc01 ~]# firefox 192.168.4.254/rhel7

修改配置文件/etc/fstab内容不支持快捷方式
[root@room9pc01 ~]# vim /etc/fstab 

/var/lib/libvirt/images/iso/rhel-server-7.4-x86_64-dvd.iso /var/www/html/rhel7 iso9660 defaults 0 0

[root@room9pc01 ~]# umount  /dev/loop*
[root@room9pc01 ~]# df -h

# mount -a 在检测所有的loop设备时，需要所有的loop设备全部卸载

[root@room9pc01 ~]# df -h

######################################################
利用真机clone-vm7产生产两台虚拟机，利用root密码123456

2.搭建虚拟机A服务端
   要求：配置永久主机名svr7.tedu.cn
	     配置eth0永久 IP地址：192.168.4.7/24
             使用真机Web服务器作为Yum源
[root@localhost ~]# cat /etc/hostname 
svr7.tedu.cn
[root@localhost ~]# hostname svr7.tedu.cn  #临时配置当前生效
[root@localhost ~]# exit

3.搭建虚拟机B客户端
   要求：配置永久主机名pc207.tedu.cn
	     配置eth0永久 IP地址：192.168.4.207/24
             使用真机Web服务器作为Yum源

#######################################################
扩展的几个应用

目录结构
[root@svr7 ~]# man hier

	/boot 存放系统引导必需的文件,包括内核、启动配置
	/bin、/sbin 存放各种命令程序
	/dev 存放硬盘、键盘、鼠标、光驱等各种设备文件
	/etc 存放Linux系统及各种程序的配置文件
	/root、/home/用户名 分别是管理员root、普通用户的默认家目录
	/var 存放日志文件、邮箱目录等经常变化的文件
	/proc 存放内存中的映射数据,不占用磁盘
	/tmp 存放系统运行过程中使用的一些临时文件

#######################################################
权限的数值表示

• 权限的数值化
– 基本权限:r = 4,w = 2,x = 1
[root@svr7 ~]# mkdir /nsd01
[root@svr7 ~]# ls -ld /nsd01

[root@svr7 ~]# chmod 700 /nsd01
[root@svr7 ~]# ls -ld /nsd01

[root@svr7 ~]# chmod 007 /nsd01
[root@svr7 ~]# ls -ld /nsd01

[root@svr7 ~]# chmod 750 /nsd01
[root@svr7 ~]# ls -ld /nsd01

[root@svr7 ~]# chmod 755 /nsd01
[root@svr7 ~]# ls -ld /nsd01

##################################################
历史命令
• 管理/调用曾经执行过的命令
– history:查看历史命令列表
– history -c:清空历史命令
– !n:执行命令历史中的第n条命令
– !str:执行最近一次以str开头的历史命令
• 调整历史命令的数量

• 调整历史命令的数量
[root@svr7 ~]# vim /etc/profile
HISTSIZE=1000   //默认记录1000条

[root@svr7 ~]# history

[root@svr7 ~]# history -c   #清空历史命令

[root@svr7 ~]# cat /etc/hostname
[root@svr7 ~]# cat /etc/redhat-release

[root@svr7 ~]# uname -r

[root@svr7 ~]# !cat

###################################################
实用小命令工具
• du,统计文件的占用空间
– du [选项]... [目录或文件]...

– -s:只统计每个参数所占用的总空间大小
– -h:提供易读容量单位(K、M等)

[root@svr7 ~]# du -sh /root/

[root@svr7 ~]# du -sh /root/ /etc/

[root@svr7 ~]# du -sh /root/ /etc/  /

[root@svr7 ~]# du -sh /boot

###################################################
• date,查看/调整系统日期时间
– date +%F、date +%R
– date +"%Y-%m-%d %H:%M:%S"
– date -s "yyyy-mm-dd  HH:MM:SS"   #修改时间

• ln,创建软连接,快捷方式
       ln  -s   /路径/源文件    /路径/快捷方式名
   
[root@svr7 ~]# ln -s  /etc/redhat-release   /abc

[root@svr7 ~]# ls -l /abc 

[root@svr7 ~]# cat  /abc 


 zip归档工具,跨平台的压缩格式

• 归档+压缩操作
– zip [-r] 备份文件.zip 被归档的文档...

[root@svr7 ~]# zip -r /opt/test.zip  /home/  /root/
[root@svr7 ~]# ls /opt

• 释放归档+解压操作
– unzip 备份文件.zip [-d 目标文件夹]

[root@svr7 ~]# unzip /opt/test.zip -d /mnt

[root@svr7 ~]# zip -r /opt/file.zip  /etc/passwd /etc/group
[root@svr7 ~]# ls /opt
[root@svr7 ~]# unzip /opt/file.zip -d /mnt


使用man手册
[root@svr7 ~]# man  5  passwd   #配置文件的帮助信息

   5:代表配置文件类型的帮助信息
######################################################
vim文本编辑器

[root@svr7 ~]# cp /etc/passwd  /opt/test
[root@svr7 ~]# vim /opt/test

命令模式操作

移动光标
	Home 键 或 ^、数字 0 	跳转到行首
	End 键 或“$”键 		跳转到行尾
	PgUp 键、PgDn 键 		向上翻页、向下翻页
	1G 或 gg 			跳转到文件的首行
	G 					跳转到文件的末尾行

复制/粘贴/删除
	yy、#yy 		  复制光标处的一行、#行
	p			  粘贴到光标处之后、之前
	x 或 Delete键     删除光标处的单个字符
	dd、#dd 		  删除光标处的一行、#行
	d^ 			  从光标处之前删除至行首
	d$ 			  从光标处删除到行尾
    C(大写)        从光标处删除到行尾,并且进入插入模式

查找/撤销/保存
	/word 		向后查找字符串“word”
	n、N 		跳至后/前一个结果
	u 			撤销最近的一次操作
	Ctrl + r 	取消前一次撤销操作
	ZZ(大写)		保存修改并退出

    Ctrl + z     把当前的程序暂停放入后台

#####################################################
E325: 注意
发现交换文件 "/opt/.1.txt.swp"

  将交换文件删除即可恢复
#####################################################

末行模式操作

  :r   /etc/filesystems   读入其他文件内容,到当前文件内容

 [root@svr7 ~]# echo  123  >  /opt/1.txt
 [root@svr7 ~]# echo  abc  >  /opt/2.txt
 [root@svr7 ~]# vim  /opt/2.txt
       
        末行模式下   :r   /opt/1.txt    #读入/opt/1.txt文件内容
  			 :r   /etc/passwd   #读入/etc/passwd文件内容
 

	:s/root/admin		替换当前行第一个“root”
	:s/root/admin/g 	  	替换当前行所有的“admin”
	:1,10 s/root/admin/g 替换第1-10行所有的“admin”
	:% s/root/admin/g 	替换文件内所有的“admin”


	:set  nu或nonu   显示/不显示行号
	:set  ai或noai   启用/关闭自动缩进

#####################################################
自定义Yum仓库
真机上操作：
1.准备众多RPM包，真机将tools.tar.gz传递到虚拟机A中
# scp  /root/桌面/tools.tar.gz  root@192.168.4.7:/root/

  -r：递归传递目录

虚拟机A上操作：
2.验证
# ls  /root

3.解包到根目录
[root@svr7 ~]# tar -xf  /root/tools.tar.gz  -C   /
[root@svr7 ~]# ls /
[root@svr7 ~]# ls /tools/
[root@svr7 ~]# ls /tools/other/

4.生成仓库数据文件
[root@svr7 ~]# ls  /tools/other/
[root@svr7 ~]# createrepo   /tools/other/
[root@svr7 ~]# ls  /tools/other/

[root@svr7 ~]# vim  /etc/yum.repos.d/rhel7.repo 
	......
	[myrpm]                   #仓库标识，必须要修改
	name=myrpm
	baseurl=file:///tools/other
	enabled=1
	gpgcheck=0

[root@svr7 ~]# yum  repolist 

##################################################
实用小命令工具(续2)
• ln,创建软连接
– 软连接 --> 原始文档 --> i节点 --> 文档数据
– ln -s 原始文件或目录  软连接文件
若原始文件或目录被删除,连接文件将失效
软连接可存放在不同分区/文件系统


• ln,创建硬连接
– 硬连接 --> i节点 --> 文档数据
– ln 原始文件   硬连接文件
若原始文件被删除,连接文件仍可用
硬连接与原始文件必须在同一分区/文件系统


区别： 软连接 对 原始文档 做快捷方式，硬连接对 i节点  做快捷方式

i节点：硬盘存储数据时，文件或目录的唯一编号

查看  ls  -i

读取数据过程：   1.txt----->i节点-------->到存储空间中取的相应的数据

######################################################
源码编译安装

 rpm包：简单，不够灵活


  源码包：灵活可以选安装位置及功能，版本较新

如何安装

 rpm包：rpm -ivh   yum install


  源码包------开发工具编译 -------》可以执行的程序 -------》运行安装


步骤一：安装开发工具gcc、make
[root@svr7 /]# yum -y install  gcc  make
[root@svr7 /]# rpm -q gcc
gcc-4.8.5-16.el7.x86_64
[root@svr7 /]# rpm -q make
make-3.82-23.el7.x86_64

步骤二：tar进行解包
# tar -xf  /tools/inotify-tools-3.13.tar.gz  -C   /
# ls /
# ls /inotify-tools-3.13/

步骤三： ./configure 进行配置
  作用1：检测系统是否安装gcc  作用2：可以指定安装的位置及功能

    --prefix=指定安装位置

常见报错：未安装gcc
checking for gcc... no
checking for cc... no
checking for cl.exe... no
configure: error:

# cd /inotify-tools-3.13/
# ./configure  --prefix=/usr/local/myrpm

步骤四：make 进行编译
# cd /inotify-tools-3.13/
# make 

步骤五：make install 进行安装
# cd /inotify-tools-3.13/
# make install 

# ls /usr/local/myrpm/bin/

#################################################



######################################################
利用真机clone-vm7产生产两台虚拟机，利用root密码123456

1.搭建虚拟机A服务端
   要求：配置永久主机名svr7.tedu.cn
	     配置eth0永久 IP地址：192.168.4.7/24
             使用真机Web服务器作为Yum源

2.搭建虚拟机B客户端
   要求：配置永久主机名pc207.tedu.cn
	     配置eth0永久 IP地址：192.168.4.207/24
             使用真机Web服务器作为Yum源

#######################################################
DNS服务器

DNS服务器的功能
– 正向解析:根据注册的域名查找其对应的IP地址
– 反向解析:根据IP地址查找对应的注册域名,不常用

   所有 的域名都要点" . "结尾

                         根域 .

一级域名:    .cn    .us   .kr   .jp   .tw  .hk   .......

二级域名:  .com.cn   .net.cn   .org.cn   .edu.cn  .gov.cn ..

三级域名:  .abc.com.cn   .nb.com.cn   .haxi.com.cn  ......

具体的主机名： www.abc.com.cn   tts.abc.com.cn  ftp.abc.com.cn


• Full Qualified Domain Name,完全合格主机名(FQDN)
   由合法的域名与主机名组成


– 系统服务: named
– 默认端口: 53

• 主配置文件:/etc/named.conf    #设置本机负责解析的域名
• 地址库文件:/var/named/        #主机名与IP地址的对应关系


###################################################
搭建基本的DNS服务器

虚拟机A：
1.安装软件包
[root@svr7 ~]# yum -y install bind-chroot  bind
bind-9.9.4-29.el7.x86_64   //域名服务包
bind-chroot-9.9.4-29.el7.x86_64  //提供虚拟根支持,牢笼政策

2.修改主配置文件/etc/named.conf
[root@svr7 ~]# vim /etc/named.conf 

	options {
		directory 	"/var/named";   #指定地址库文件的位置
	};
	zone "tedu.cn" IN {         #指定本地负责解析的域名
		type  master;           #指定本机为主DNS服务器
		file "tedu.cn.zone";    #指定地址库文件名称
	};

3.建立地址库文件 /var/named/tedu.cn.zone
  # 注意文件权限,named用户有读取
 # cp -p 保持源文件属性不变进行复制
  # 本文件域名没有点结尾，默认补全本文件负责的域名
[root@svr7 ~]# cd  /var/named/
[root@svr7 named]# cp -p  named.localhost  tedu.cn.zone
[root@svr7 named]# ls -l  tedu.cn.zone

[root@svr7 named]# vim   tedu.cn.zone

 tedu.cn.      NS     svr7         #证明DNS服务器主机名
 svr7          A      192.168.4.7  #解析DNS服务器主机名对应IP
 www           A      1.2.3.4
 ftp           A      1.1.1.1

4.重起named服务
[root@svr7 ~]# systemctl restart named

################################################
客户端虚拟机B：
测试解析结果
# echo  nameserver  192.168.4.7  > /etc/resolv.conf 
# cat  /etc/resolv.conf

# nslookup  www.tedu.cn
# nslookup  ftp.tedu.cn

#####################################################
DNS的多区域解析
虚拟机 A：
[root@svr7 /]# vim /etc/named.conf  #文件最后追加写入

 zone "qq.com" IN {
	 type master;
	 file "qq.com.zone";
 };

[root@svr7 /]# cd /var/named/
[root@svr7 named]# cp -p tedu.cn.zone  qq.com.zone
	qq.com.      NS      svr7
	svr7          A      192.168.4.7
	www           A      1.2.3.4
	ftp           A      1.1.1.1
[root@svr7 named]# ！sys
###################################################

DNS的特殊解析记录

1 解析记录的轮询
[root@svr7 /]# vim /var/named/tedu.cn.zone 
 
	www           A      192.168.4.11
	www           A      192.168.4.20
	www           A      192.168.4.21

2.泛域名解析
[root@svr7 /]# vim /var/named/tedu.cn.zone 

  *             A      10.20.30.40
  tedu.cn.      A      2.2.2.2

[root@svr7 /]# systemctl restart named

3.特殊泛域名的解析

     stu1.tedu.cn ------》192.168.10.1
     stu2.tedu.cn ------》192.168.10.2
     stu3.tedu.cn ------》192.168.10.3
     stu4.tedu.cn ------》192.168.10.4
          ......
     stu50.tedu.cn ------》192.168.10.50

  内置函数  可以产生连续的数字 $GENERATE 

[root@svr7 /]# vim /var/named/tedu.cn.zone

     $GENERATE 1-50  stu$    A   192.168.10.$

[root@svr7 /]# systemctl restart named


4. 解析记录的别名
[root@svr7 /]# vim /var/named/tedu.cn.zone
  tts     CNAME      ftp

[root@svr7 /]# systemctl restart named
######################################################
DNS子域授权

      父域  www.qq.com

      子域  www.bj.qq.com




一  将虚拟机B搭建DNS服务，负责解析bj.qq.com
1.安装软件包
[root@pc207 ~]# yum -y install bind-chroot  bind
2.修改主配置文件/etc/named.conf
[root@pc207 ~]# vim /etc/named.conf 
	options {
		directory 	"/var/named";  
	};
	zone "bj.qq.com" IN {        
		type  master;          
		file "bj.qq.com.zone"; 
	};
3.建立地址库文件 /var/named/bj.qq.com.zone
[root@pc207 named]# vim   bj.qq.com.zone
 bj.qq.com.      NS     pc207         
 pc207           A      192.168.4.207 
 www             A      200.0.0.1

4.重起named服务


[root@pc207 /]# nslookup  www.bj.qq.com  192.168.4.207
Server:		192.168.4.207
Address:	192.168.4.207#53

Name:	www.bj.qq.com
Address: 200.0.0.1

[root@pc207 /]# nslookup  www.qq.com  192.168.4.7
Server:		192.168.4.7
Address:	192.168.4.7#53

Name:	www.qq.com
Address: 1.2.3.4

####################################################
  父域DNS为虚拟机A，可以解析qq.com
  子域DNS为虚拟机B，可以解析bj.qq.com

  父域DNS为虚拟机A，可以解析bj.qq.com  [子域授权]
  



二 进行子域授权配置
虚拟机A：
[root@svr7 /]# vim /var/named/qq.com.zone
 qq.com.      NS      svr7
 bj.qq.com.   NS      pc207
 svr7          A      192.168.4.7
 pc207         A      192.168.4.207
 www           A      1.2.3.4

[root@svr7 /]# systemctl restart named

[root@pc207 /]# nslookup www.bj.qq.com 192.168.4.7
Server:		192.168.4.7
Address:	192.168.4.7#53

Non-authoritative answer:    #非权威解答
Name:	www.bj.qq.com
Address: 200.0.0.1



递归查询：
     客户端请求DNS服务器解析域名，DNS服务器与其他DNS服务器询问，最终将查询结果带回来过程

 options {
        directory       "/var/named";
        recursion no;         #是否启用递归查询
   };

迭代查询：
   DNS服务器与其他DNS服务器询问过程

########################################################

 子域DNS为虚拟机B，可以解析qq.com  [子域转发]

三  子域转发
虚拟机B：
[root@pc207 /]# vim /etc/named.conf       #追加写入

 zone "qq.com" IN {
         type forward;                    #类型为转发
         forwarders {  192.168.4.7;  };   #转发给父域的IP地址
  };

[root@pc207 /]# systemctl restart named

[root@pc207 /]# nslookup www.qq.com 192.168.4.207

####################################################
缓存DNS服务器,缓存解析记录，加快解析速度

• 方式1:全局转发
– 将请求转发给指定的公共DNS(其他缓存DNS),请求递归服务

• 方式2:根域迭代
– 依次向根、一级、二级......域的DNS服务器迭代


1.真机搭建Yum仓库
[root@room9pc01 ~]# mkdir  /dvd
[root@room9pc01 ~]# ls  /dvd

# mount /iso/CentOS-7-x86_64-DVD-1708.iso  /dvd

[root@room9pc01 ~]# ls /dvd

[root@room9pc01 ~]# cd  /etc/yum.repos.d
[root@room9pc01 yum.repos.d]# mkdir repo
[root@room9pc01 yum.repos.d]# mv *.repo  repo
[root@room9pc01 yum.repos.d]# vim dvd.repo

	[dvd]
	name=CentOS7.4
	baseurl=file:///dvd
	enabled=1
	gpgcheck=0
[root@room9pc01 /]# yum -y install bind bind-chroot

2.查看真机本机DNS服务器,配置DNS服务器
[root@room9pc01 ~]# cat  /etc/resolv.conf 
nameserver  172.40.1.10

[root@room9pc01 ~]# vim /etc/named.conf 
 
 options   {
	directory 	"/var/named";
    forwarders   {   172.40.1.10;  };
  };

[root@room9pc01 ~]# systemctl restart named
3.虚拟机A 上验证
# echo nameserver 192.168.4.254 > /etc/resolv.conf 
# cat /etc/resolv.conf
# nslookup www.qq.com

#######################################################



######################################################
利用真机clone-vm7产生产两台虚拟机，利用root密码123456

1.搭建虚拟机A服务端
   要求：配置永久主机名svr7.tedu.cn
	     配置eth0永久 IP地址：192.168.4.7/24
             使用真机Web服务器作为Yum源

2.搭建虚拟机B客户端
   要求：配置永久主机名pc207.tedu.cn
	     配置eth0永久 IP地址：192.168.4.207/24
             使用真机Web服务器作为Yum源

#######################################################
DNS服务器

– 系统服务: named
– 默认端口: 53

• 主配置文件:/etc/named.conf    #设置本机负责解析的域名
• 地址库文件:/var/named/        #主机名与IP地址的对应关系


###################################################
搭建基本的DNS服务器

虚拟机A：
1.安装软件包
[root@svr7 ~]# yum -y install bind-chroot  bind
bind-9.9.4-29.el7.x86_64   //域名服务包
bind-chroot-9.9.4-29.el7.x86_64  //提供虚拟根支持,牢笼政策

2.修改主配置文件/etc/named.conf
[root@svr7 ~]# vim /etc/named.conf 

	options {
		directory 	"/var/named";   #指定地址库文件的位置
	};
	zone "tedu.cn" IN {         #指定本地负责解析的域名
		type  master;           #指定本机为主DNS服务器
		file "tedu.cn.zone";    #指定地址库文件名称
	};

3.建立地址库文件 /var/named/tedu.cn.zone
  # 注意文件权限,named用户有读取
 # cp -p 保持源文件属性不变进行复制
  # 本文件域名没有点结尾，默认补全本文件负责的域名
[root@svr7 ~]# cd  /var/named/
[root@svr7 named]# cp -p  named.localhost  tedu.cn.zone
[root@svr7 named]# ls -l  tedu.cn.zone

[root@svr7 named]# vim   tedu.cn.zone

 tedu.cn.      NS     svr7         #证明DNS服务器主机名
 svr7          A      192.168.4.7  #解析DNS服务器主机名对应IP
 www           A      1.2.3.4
 ftp           A      1.1.1.1

4.重起named服务
[root@svr7 ~]# systemctl restart named

################################################
客户端虚拟机B：
测试解析结果
# echo  nameserver  192.168.4.7  > /etc/resolv.conf 
# cat  /etc/resolv.conf

# nslookup  www.tedu.cn
# nslookup  ftp.tedu.cn

#####################################################
检测虚拟机B是否可以，通过虚拟机A的DNS，进行解析www.tedu.cn
1.检测虚拟机B  /etc/resolv.conf
2.检测虚拟机A  named服务是否开启,将named服务设置为开机自启动

#####################################################
DNS分离解析（视图解析）

– 能够区分客户机的来源地址
– 为不同类别的客户机提供不同的解析结果(IP地址)
– 当不同的客户端解析同一域名，得到的结果不同
– 为客户端提供网络最近的资源


• 环境及需求
– 权威DNS:svr7.tedu.cn 192.168.4.7
– 负责区域:tedu.cn
– A记录分离解析 —— 以 www.tedu.cn 为例
客户机来自 解析结果
	192.168.4.207---------->192.168.4.100
	其他地址 ----------> 1.2.3.4


	view "联通" {
	match-clients {  来源地址1;  }
	zone "12306.cn" IN {
	...... 地址库1;
	}; };

	view "铁通" {
	match-clients {  来源地址2;  }
	zone "12306.cn" IN {
	...... 地址库2;
	}; };

注意：
     1.所有的客户端到要匹配分类成功
     2.由上及下，匹配及停止
     3.所有的zone都要在view中
   4.view中所有的zone数量必须保持一致

虚拟机A
1.修改配置文件/etc/named.conf
view   "nsd"   {                          #分类名称
  match-clients  {   192.168.4.207;  };   #匹配客户及地址
   zone  "tedu.cn"  IN  {
         type  master;
         file  "tedu.cn.zone";           #指定读取的地址库文件
    };
};
view   "other"   {
  match-clients  {   any;  };
   zone  "tedu.cn"  IN  {
         type  master;
         file  "tedu.cn.other";
    };
};
2.建立两个地址库文件tedu.cn.zone与tedu.cn.other写入不同的解析结果


• 环境及需求
– 权威DNS:svr7.tedu.cn 192.168.4.7
– 负责区域:tedu.cn  qq.com
– A记录分离解析 —— 以 www.tedu.cn 为例 以 www.qq.com 为例
客户机来自 解析结果
	192.168.4.207---------->192.168.4.100
	其他地址 ----------> 1.2.3.4

options {
        directory       "/var/named";
};

view   "nsd"   {
  match-clients  {   192.168.4.207;  };
   zone "tedu.cn" IN {
         type master;
         file "tedu.cn.zone";
    };
   zone "qq.com" IN {
        type master;
        file "qq.com.zone";
    };
};

view   "other"   {
  match-clients  {   any;  };
   zone "tedu.cn" IN {
         type master;
         file "tedu.cn.other";
    };
   zone "qq.com" IN {
        type master;
        file "qq.com.other";
    };
};

########################################################
acl地址列表,方便匹配客户端地址

	acl "liantong" {
	IP地址1; IP地址2; .. ..
	网段1; 网段2; .. ..
	.. ..
	};

#######################################################


RAID阵列概述
• 廉价冗余磁盘阵列
– Redundant Arrays of Inexpensive Disks
– 通过硬件/软件技术,将多个较小/低速的磁盘整合成一个大磁盘

– 阵列的价值:提升I/O效率、硬件级别的数据冗余
– 不同RAID级别的功能、特性各不相同


• RAID 0,条带模式
– 同一个文档分散存放在不同磁盘
– 并行写入以提高效率
– 至少需要2块磁盘

• RAID 1,镜像模式
– 一个文档复制成多份,分别写入不同磁盘
– 多份拷贝提高可靠性,效率无提升
– 至少需要2块磁盘


• RAID5,高性价比模式
– 相当于RAID0和RAID1的折中方案
– 需要至少一块磁盘的容量来存放校验数据
– 至少需要3块磁盘


• RAID6,高性价比/可靠模式
– 相当于扩展的RAID5阵列,提供2份独立校验方案
– 需要至少两块磁盘的容量来存放校验数据
– 至少需要4块磁盘


• RAID 0+1/RAID 1+0
– 整合RAID 0、RAID 1的优势
– 并行存取提高效率、镜像写入提高可靠性
– 至少需要4块磁盘

• 硬RAID:由RAID控制卡管理阵列
– 主板 --> 阵列卡 --> 磁盘 --> 操作系统 --> 数据

• 软RAID:由操作系统来管理阵列
– 主板--> 磁盘-->操作系统-->RAID软件 -->数据

#####################################################
进程管理

    程序：静态的代码，占用磁盘的空间

    进程：动态运行的代码，占用CPU与内存

   PID：标识进程
     父进程与子进程

   systemd:所有进程的父进程   PID为1


查看进程树
• pstree — Processes Tree
– 格式:pstree [选项] [PID或用户名]
• 常用命令选项
– -a:显示完整的命令行
– -p:列出对应PID编号
[root@svr7 /]# pstree lisi
未发现进程。
[root@svr7 /]# pstree lisi
bash───vim
[root@svr7 /]# pstree -p lisi
bash(3356)───vim(3392)
[root@svr7 /]# pstree -ap lisi
bash,3356
  └─vim,3392 a.txt
[root@svr7 /]# pstree 
#####################################################
• ps aux 操作
– 列出正在运行的所有进程

用户 进程ID %CPU %内存 虚拟内存 固定内存 终端 状态 起始时间 CPU时间 程序指令


[root@svr7 /]# ps aux | wc -l   #统计正在运行进程的个数


• ps -elf 操作
– 列出正在运行的所有进程

PPID:父进程的PID号

[root@svr7 /]# ps aux | wc -l 

[root@svr7 /]# ps -elf | wc -l 

[root@svr7 /]# ps aux

[root@svr7 /]# ps -elf

[root@svr7 /]# ps aux | grep lisi
############################################
进程动态排名
• top 交互式工具
– 格式:top [-d 刷新秒数] [-U 用户名]

[root@svr7 /]# top -d 1

  按大写P可以CPU进行排序
  按大写M可以内存进行排序


检索进程
• pgrep — Process Grep
– 用途:pgrep [选项]... 查询条件

• 常用命令选项
– -l:输出进程名,而不仅仅是 PID
– -U:检索指定用户的进程
– -t:检索指定终端的进程
– -x:精确匹配完整的进程名

[root@svr7 /]# pgrep -lU lisi

[root@svr7 /]# pgrep  -l crond

[root@svr7 /]# pgrep  -l log

[root@svr7 /]# pstree -ap lisi


[root@svr7 /]# pgrep -lU lisi -t pts/2

  图形下的终端窗口：依次命令为 pts/0    pts/1   pts/2  

#################################################
查看进程： pstree(结构显示清晰)  
         ps aux (输出进程内容详细) 
         ps -elf(输出进程的PPID) 
         top(动态排名，有CPU负载信息，可以进行排序) 
         pgrep(输出简洁，方便运用Shell脚本) 

#################################################
进程的前后台调度

进程放入后台：
    1. 命令行末尾添加“&”符号
  2.Ctrl + z 组合键暂停并转入后台

[root@svr7 /]# sleep 900 &      #将进程正在运行放入后台
[root@svr7 /]# jobs             #查看后台进程信息
   
[root@svr7 /]# sleep 800        
^Z                              #按Ctrl+z暂停放入后台
[2]+  已停止               sleep 800
[root@svr7 /]# jobs           #查看后台进程信息
 
[root@svr7 /]# bg 2           #将后台编号为2的进程继续运行
[root@svr7 /]# jobs 
[root@svr7 /]# fg 1           #将后台编号为1的进程恢复到前台
sleep 900
^C                            #按Ctrl+c终止正在运行的进程
[root@svr7 /]# jobs 
[root@svr7 /]# fg 2
sleep 800
^C

杀死进程
• 干掉进程的不同方法
– Ctrl+c 组合键,中断当前命令程序
– kill [-9] PID... 、kill [-9] %后台任务编号
– killall [-9] 进程名...
– pkill 查找条件


[root@svr7 /]# sleep 800  &
[root@svr7 /]# sleep 900  &
[root@svr7 /]# sleep 1000 &
[root@svr7 /]# sleep 1100 &
[root@svr7 /]# jobs -l

[root@svr7 /]# kill  5518
[root@svr7 /]# jobs -l

[root@svr7 /]# kill  -9 5519
[root@svr7 /]# jobs -l

[root@svr7 /]# killall sleep
[root@svr7 /]# jobs -l

杀死一个用户开启的所有进程（踢出一个用户）

[root@svr7 /]# killall -9 -u lisi

#####################################################
日志管理

日志的功能
• 系统和程序的“日记本”
– 记录系统、程序运行中发生的各种事件
– 通过查看日志,了解及排除故障
– 信息安全控制的“依据”


• 常见的日志文件
  /var/log/messages 记录内核消息、各种服务的公共消息
  /var/log/dmesg    记录系统启动过程的各种消息
  /var/log/cron     记录与cron计划任务相关的消息
  /var/log/maillog  记录邮件收发相关的消息
  /var/log/secure   记录与访问限制相关的安全消息


 tailf实时跟踪日志消息
[root@svr7 /]# echo 123 > /opt/123.txt
[root@svr7 /]# tailf  /opt/123.txt

• users、who、w 命令
– 查看已登录的用户信息,详细度不同


• last、lastb 命令
– 查看最近登录成功/失败的用户信息

[root@svr7 /]# users
[root@svr7 /]# who
[root@svr7 /]# w

[root@svr7 /]# last  -2   #最近登陆成功2条记录
[root@svr7 /]# lastb  -2  #最近登陆失败2条记录


• Linux内核定义的事件紧急程度
– 分为 0~7 共8种优先级别
– 其数值越小,表示对应事件越紧急/重要

  0  EMERG（紧急）	   会导致主机系统不可用的情况
  1  ALERT（警告）	   必须马上采取措施解决的问题
  2  CRIT（严重）	           比较严重的情况
  3  ERR（错误）	            运行出现错误
  4  WARNING（提醒）         可能会影响系统功能的事件
  5  NOTICE（注意）          不会影响系统但值得注意
  6  INFO（信息）	            一般信息
  7  DEBUG（调试）	    程序或系统调试信息等

使用journalctl工具
• 提取由 systemd-journal 服务搜集的日志
– 主要包括内核/系统日志、服务日志

• 常见用法
– journalctl | grep 关键词
– journalctl -u 服务名 [-p 优先级]

[root@svr7 /]# systemctl restart httpd

[root@svr7 /]# journalctl  |  grep httpd

[root@svr7 /]# journalctl -u  httpd  -p  6


– journalctl -n 消息条数
– journalctl --since="yyyy-mm-dd HH:MM:SS" --
until="yyyy-mm-dd HH:MM:SS"

####################################################
补充：
  /etc/hosts:提供域名解析，只为本机提供解析服务

虚拟机A：
[root@svr7 /]# tail -1  /etc/hosts  #追加写入
192.168.4.7  www.abc.com   www.haha.com

[root@svr7 /]# ping  www.abc.com


解析优先级 ：
  浏览器输入域名------>本机/etc/hosts--->/etc/resolv.conf--->DNS

######################################################
补充：
     PATH：环境变量

     PATH：提供命令搜寻路径
         (执行命令时，会到PATH变量值路径中寻找改程序，如果找到就执行，如果找不到输出未找到)

[root@svr7 /]# vim /opt/hello.sh
#!/bin/bash
echo hello world
[root@svr7 /]# chmod +x /opt/hello.sh
[root@svr7 /]# /opt/hello.sh
hello world
[root@svr7 /]# hello.sh
bash: hello.sh: 未找到命令...

[root@svr7 /]# echo $PATH

[root@svr7 /]# cp /opt/hello.sh  /usr/bin/
[root@svr7 /]# ls /usr/bin/hello.sh 
/usr/bin/hello.sh
[root@svr7 /]# hello.sh 

#####################################################







######################################################
利用真机clone-vm7产生产两台虚拟机，利用root密码123456

1.搭建虚拟机A服务端
   要求：配置永久主机名svr7.tedu.cn
	     配置eth0永久 IP地址：192.168.4.7/24
             使用真机Web服务器作为Yum源

2.搭建虚拟机B客户端
   要求：配置永久主机名pc207.tedu.cn
	     配置eth0永久 IP地址：192.168.4.207/24
             使用真机Web服务器作为Yum源

#######################################################
部署DHCP服务器

DHCP概述及原理
• Dynamic Host Configuration Protocol
– 动态主机配置协议,由 IETF(Internet 网络工程师任
务小组)组织制定,用来简化主机地址分配管理

• 主要分配以下入网参数
– IP地址/子网掩码/广播地址
– 默认网关地址、DNS服务器地址


DHCP地址分配的四次会话,整个过程是利用广播进行，先到先得
– DISCOVERY --> OFFER --> REQUEST -->ACK


一、搭建基本的DHCP服务器
1.安装dhcp软件包

2.修改配置文件/etc/dhcp/dhcpd.conf
[root@svr7 /]# vim /etc/dhcp/dhcpd.conf

subnet 192.168.4.0 netmask 255.255.255.0 {  #指定分配的网络
  range 192.168.4.100  192.168.4.150;       #指定分别的范围
  option domain-name-servers 192.168.4.7;   #指定DNS服务器地址
  option routers 192.168.4.254;          #指定网关地址
  default-lease-time 600;                
  max-lease-time 7200;
}
3.重起服务
[root@svr7 /]# systemctl restart dhcpd


################################################
PXE服务端
• 需要哪些服务组件
– DHCP服务,分配IP地址、定位引导程序
– TFTP服务,提供引导程序下载
– HTTP服务,提供yum安装源



###################################################
二、配置DHCP服务PXE的引导
1.修改配置文件/etc/dhcp/dhcpd.conf
[root@svr7 /]# vim /etc/dhcp/dhcpd.conf

subnet 192.168.4.0 netmask 255.255.255.0 {  #指定分配的网络
  range 192.168.4.100  192.168.4.150;       #指定分别的范围
  option domain-name-servers 192.168.4.7;   #指定DNS服务器地址
  option routers 192.168.4.254;          #指定网关地址
  default-lease-time 600;                
  max-lease-time 7200;
  next-server 192.168.4.7;   #指定下一个服务器IP地址
  filename  "pxelinux.0";    #指定网卡引导文件
}

2.重起服务
[root@svr7 /]# systemctl restart dhcpd

  pxelinux.0：网卡引导文件（网络安装说明书）二进制文件
                          安装一个软件获得

####################################################
三、搭建tftp服务
    
    tftp:简单的文件传输协议   端口：69
       默认共享数据路径：/var/lib/tftpboot
1.安装tftp-server软件包

2.部署pxelinux.0文件
# yum  provides  */pxelinux.0   #查询仓库中产生pxelinux.0包

# yum -y install syslinux       #安装软件包

# rpm -ql syslinux | grep pxelinux.0  #查询软件包安装清单

# cp /usr/share/syslinux/pxelinux.0  /var/lib/tftpboot/

# ls /var/lib/tftpboot/

3.重起tftp服务
# systemctl  restart  tftp 


pxelinux.0-----》
                读取菜单文件/var/lib/tftpboot/pxelinux.cfg/default

4.部署默认菜单文件
# mkdir /var/lib/tftpboot/pxelinux.cfg   #建立菜单文件存放路径

# mount /dev/cdrom  /mnt

# ls  /mnt/isolinux/

# cp /mnt/isolinux/isolinux.cfg  /var/lib/tftpboot/pxelinux.cfg/default

# ls -l /var/lib/tftpboot/pxelinux.cfg/default

# chmod 644 /var/lib/tftpboot/pxelinux.cfg/default 

# ls -l /var/lib/tftpboot/pxelinux.cfg/default


5.部署背景图片与识别图形的模块
   vesamenu.c32(识别图形的模块)
   splash.png(背景图片)

# cp /mnt/isolinux/vesamenu.c32 /mnt/isolinux/splash.png 
  /var/lib/tftpboot/

# ls /var/lib/tftpboot/

6.部署启动内核与驱动程序
   vmlinuz(启动内核)
   initrd.img(驱动程序)
# cp /mnt/isolinux/vmlinuz /mnt/isolinux/initrd.img 
   /var/lib/tftpboot/

# ls /var/lib/tftpboot/
initrd.img  pxelinux.cfg  vesamenu.c32
pxelinux.0  splash.png    vmlinuz

7.修改菜单文件/var/lib/tftpboot/pxelinux.cfg/default
# vim  /var/lib/tftpboot/pxelinux.cfg/default

 末行模式 : set nu 显示行号

  default vesamenu.c32   #默认读取的图形模块
  timeout 600            #默认读秒的时间
   ......
  menu background splash.png     #背景
  menu title NSD1804 PXE Server  #标题
   ......
label linux
  menu label Install RHEL7  #屏幕显示选项字样
  kernel vmlinuz            #加载内核
  append initrd=initrd.img  #解压驱动程序


################################################
总结：
      DHCP--->IP地址----->next-server--->filename
      tftp--->pxelinux.0
          --->default
          --->vesamenu.c32、splash.png、vmlinuz、initrd.img
    
#################################################
简单测试：
   新建虚拟机测试，安装方式为pxe网络引导，网络类型选择private1

###################################################
四、搭建httpd服务，提供RPM包

1.安装httpd软件
[root@svr7 /]# yum -y install httpd
[root@svr7 /]# rpm -q httpd

2.共享光盘内容
[root@svr7 /]# mkdir /var/www/html/rhel7
[root@svr7 /]# ls /var/www/html/rhel7
[root@svr7 /]# mount /dev/cdrom  /var/www/html/rhel7

3.重起httpd服务
[root@svr7 /]# systemctl restart httpd
[root@svr7 /]# firefox http://192.168.4.7/rhel7

####################################################
五、生成应答文件，实现无人值守安装

1.安装图形的工具system-config-kickstart 

2.运行命令system-config-kickstart 
[root@room9pc01 ~]# ssh -X root@192.168.4.7
root@192.168.4.7's password: 

[root@svr7 ~]# system-config-kickstart
   检查  软件选择  是否可以进行选择
  
   修改Yum客户端配置文件：仓库标识 [development]
  
[root@svr7 ~]# system-config-kickstart

[root@svr7 ~]# ls /root/

[root@svr7 ~]# vim /root/ks.cfg

3.共享ks应答文件
[root@svr7 ~]# cp /root/ks.cfg  /var/www/html/
[root@svr7 ~]# ls /var/www/html/

4.通过菜单文件进行指定ks.cfg应答文件
[root@svr7 ~]# vim /var/lib/tftpboot/pxelinux.cfg/default
......
label linux
 menu label Install RHEL7
 menu default            #读秒结束默认选择
 kernel vmlinuz
 append initrd=initrd.img  ks=http://192.168.4.7/ks.cfg

####################################################

总结：
  DHCP--->IP地址----->next-server--->filename
  tftp--->pxelinux.0
      --->default
      --->vesamenu.c32、splash.png、vmlinuz、initrd.img
      --->ks.cfg应答文件
      ---> url --url="http://192.168.4.7/rhel7"

#################################################
  注意服务的启动 ： dhcpd  tftp  httpd





   在真机上，利用clone-vm7新建一台虚拟机，名字:PXE-Server
  
   1.配置IP地址：192.168.4.168/24
   2.搭建Yum仓库   
   3.主机名：PXE.tedu.cn
   4.硬盘的大小60G

######################################################
搭建一键装机平台
一 、搭建DHCP服务
1.安装dhcp
2.修改配置文件
subnet 192.168.4.0  netmask  255.255.255.0 {
  range 192.168.4.180  192.168.4.230;
  next-server  192.168.4.168;
  filename  "pxelinux.0";
}

3.重起dhcpd服务，设置开机自起动

#####################################################
二、搭建tftp

1.安装tftp-server
2.启动tftp服务，设置开机自起动


3. 部署pxeliunx.0
 # yum provides */pxelinux.0
 # rpm -ql syslinux | grep pxelinux.0

 # cp /usr/share/syslinux/pxelinux.0  /var/lib/tftpboot/

 # ls /var/lib/tftpboot/

4. 部署光盘内容
[root@PXE ~]# yum -y install httpd
[root@PXE ~]# mkdir /var/www/html/rhel6
[root@PXE ~]# mkdir /var/www/html/rhel7

[root@PXE ~]# mount /dev/cdrom  /mnt/    #切换成光盘为rhel7
[root@PXE ~]# ls /mnt/
[root@PXE ~]# cp -r  /mnt/*    /var/www/html/rhel7/

[root@PXE ~]# umount  /mnt
[root@PXE ~]# mount /dev/cdrom  /mnt/   #切换成光盘为rhel6
[root@PXE ~]# ls /mnt/
[root@PXE ~]# cp -r  /mnt/*    /var/www/html/rhel6/

[root@PXE ~]# du  -sh /var/www/html/rhel7/
[root@PXE ~]# du  -sh /var/www/html/rhel6/


5.部署rhel7、rhel6   的启动内核与驱动程序

# mkdir /var/lib/tftpboot/rhel6
# mkdir /var/lib/tftpboot/rhel7

# cp /var/www/html/rhel6/isolinux/vmlinuz   
     /var/www/html/rhel6/isolinux/initrd.img            
     /var/lib/tftpboot/rhel6/

# cp /var/www/html/rhel7/isolinux/vmlinuz  
     /var/www/html/rhel7/isolinux/initrd.img               
     /var/lib/tftpboot/rhel7/

# ls /var/lib/tftpboot/rhel7
# ls /var/lib/tftpboot/rhel6


6.部署图形模块与背景
# cp /var/www/html/rhel6/isolinux/vesamenu.c32  
     /var/lib/tftpboot/

# rpm -ql syslinux | grep jpg

# cp /usr/share/doc/syslinux-4.05/sample/syslinux_splash.jpg   /var/lib/tftpboot/
 

# ls /var/lib/tftpboot/

7.部署菜单文件
# mkdir /var/lib/tftpboot/pxelinux.cfg

# cp /var/www/html/rhel6/isolinux/isolinux.cfg 
     /var/lib/tftpboot/pxelinux.cfg/default

# chmod 644 /var/lib/tftpboot/pxelinux.cfg/default

# ls -l /var/lib/tftpboot/pxelinux.cfg/default


8.修改菜单文件内容
# vim /var/lib/tftpboot/pxelinux.cfg/default
......
menu background syslinux_splash.jpg
menu title Welcome to PXE Server!
......    
label linux
  menu label Install RHEL7
  kernel rhel7/vmlinuz
  append initrd=rhel7/initrd.img

label vesa
  menu label Install RHEL6
  kernel rhel6/vmlinuz
  append initrd=rhel6/initrd.img 

label local
  menu label Boot from local drive
  menu default           #读秒结束最后默认选择，从本地硬盘启动
  localboot 0xffff



#####################################################
三、搭建httpd服务共享光盘所有内容

1.启动服务
[root@PXE /]# systemctl restart httpd
[root@PXE /]# systemctl enable httpd

2.测试访问
[root@PXE /]# firefox  http://192.168.4.168/rhel6
[root@PXE /]# firefox  http://192.168.4.168/rhel7

####################################################
四、生成ks文件
[root@PXE /]# yum -y install system-config-kickstart

  修改Yum客户端配置文件的标示名
   [development]


[root@PXE /]# system-config-kickstart  #先看“软件包选择”
        软件包选择：  在“桌面”一栏选择----->第一个为GNOME  则为rhel7

    RHEL7的文件系统为xfs
#####################################################

[root@PXE ~]# vim /etc/yum.repos.d/rhel7.repo 
     执行向rhel6的光盘

 [development]
 name=rhel7
 baseurl=http://192.168.4.168/rhel6
 enabled=1
 gpgcheck=0

[root@PXE ~]# yum clean all       #清空Yum缓存

[root@PXE ~]# system-config-kickstart 
        软件包选择：  在“桌面”一栏选择----->第一个为KDE桌面  则为rhel6

    RHEL6的文件系统为ext4

[root@PXE ~]# ls /root/ks*
/root/ks6.cfg  /root/ks7.cfg

#############################################
五、指定ks应答文件

1.共享ks应答文件
[root@PXE ~]# cp /root/ks*  /var/www/html/
[root@PXE ~]# ls /var/www/html/

2.修改菜单文件

# vim /var/lib/tftpboot/pxelinux.cfg/default

label linux
  menu label Install RHEL7
  kernel rhel7/vmlinuz
  append initrd=rhel7/initrd.img ks=http://192.168.4.
168/ks7.cfg

label vesa
  menu label Install RHEL6
  kernel rhel6/vmlinuz
  append initrd=rhel6/initrd.img ks=http://192.168.4.
168/ks6.cfg


####################################################







######################################################
利用真机clone-vm7产生产两台虚拟机，利用root密码123456

1.搭建虚拟机A服务端
   要求：配置永久主机名svr7.tedu.cn
	     配置eth0永久 IP地址：192.168.4.7/24
             使用真机Web服务器作为Yum源

2.搭建虚拟机B客户端
   要求：配置永久主机名pc207.tedu.cn
	     配置eth0永久 IP地址：192.168.4.207/24
             使用真机Web服务器作为Yum源

#######################################################
rsync同步操作,让两个目录内容一致

• 命令用法
– rsync [选项...] 源目录 目标目录

• 同步与复制的差异
– 复制:完全拷贝源到目标
– 同步:增量拷贝,只传输变化过的数据


• 本地同步
– rsync [选项...] 本地目录1 本地目录2
– rsync [选项...] 本地目录1/ 本地目录2
[root@svr7 ~]# mkdir /todir
[root@svr7 ~]# rsync -a /boot /todir   //同步整个文件夹
[root@svr7 ~]# rsync -a /boot/ /todir  //只同步目录下的数据

• rsync操作选项
– -n:测试同步过程,不做实际修改
– --delete:删除目标文件夹内多余的文档
– -a:归档模式,相当于-rlptgoD
– -v:显示详细操作信息
– -z:传输过程中启用压缩/解压

[root@svr7 ~]# mkdir /todir
[root@svr7 ~]# mkdir /nsd

[root@svr7 ~]# touch /nsd/1.txt
[root@svr7 ~]# touch /nsd/2.txt
[root@svr7 ~]# cp /etc/passwd /nsd
[root@svr7 ~]# ls /nsd
[root@svr7 ~]# rsync -avz /nsd/  /todir
[root@svr7 ~]# ls /todir

[root@svr7 ~]# echo 123 > /nsd/1.txt
[root@svr7 ~]# cat /nsd/1.txt 

[root@svr7 ~]# cat /todir/1.txt 
[root@svr7 ~]# rsync -avz /nsd/  /todir

[root@svr7 ~]# cat /todir/1.txt 



删除目标多余的文档
[root@svr7 ~]# rsync -avz --delete /nsd/  /todir/

[root@svr7 ~]# ls /nsd
[root@svr7 ~]# ls /todir

[root@svr7 ~]# touch /todir/abc.txt
[root@svr7 ~]# ls /nsd
[root@svr7 ~]# ls /todir

[root@svr7 ~]# rsync -avz --delete /nsd/  /todir/
[root@svr7 ~]# ls /nsd
[root@svr7 ~]# ls /todir

#######################################################
远程同步

rsync+SSH同步

• 与远程的 SSH目录保持同步
– 下行:rsync [...]   user@host:远程目录    本地目录
– 上行:rsync [...]   本地目录       user@host:远程目录

虚拟机A：
# rsync -avz --delete /opt/  root@192.168.4.207:/opt/
# ls /opt

虚拟机B：
# ls /opt

虚拟机A：
# cp /etc/passwd /opt
# ls /opt
# rsync -avz --delete /opt/  root@192.168.4.207:/opt/

虚拟机B：
# ls /opt

####################################################
实时同步

一、实现无密码验证
虚拟机A
1.完成ssh无密码的验证,采用公钥、私钥
[root@svr7 ~]# ssh-keygen       #一路回车，产生公钥、私钥
[root@svr7 ~]# ls /root/.ssh/   #查看公钥、私钥
[root@svr7 ~]# ssh-copy-id root@192.168.4.207  #传递公钥

虚拟机B
2.查看公钥
[root@pc207 ~]# ls /root/.ssh/

虚拟机A
3.验证无密码登陆
[root@svr7 ~]# ssh  root@192.168.4.207

二、监控目录变化

inotifywait监控
• 基本用法
– inotifywait [选项] 目标文件夹

• 常用命令选项
– -m,持续监控(捕获一个事件后不退出)
– -r,递归监控、包括子目录及文件
– -q,减少屏幕输出信息
– -e,指定监视的 modify、move、create、delete、
attrib 等事件类别

真机上操作：
1.传递tools.tar.gz到虚拟机A/root下
# scp  /root/桌面/tools.tar.gz       root@192.168.4.7:/

虚拟机A
2.查看是否传递成功
# ls  /

3.tar进行解包
# tar -xf /tools.tar.gz -C /mnt
# ls /mnt/
# ls /mnt/tools

4.安装开发工具gcc  make
5.进行tar解包
# mkdir /myrpm
# tar -xf /mnt/tools/inotify-tools-3.13.tar.gz -C /myrpm/

6. 进行 ./configure 进行配置
[root@svr7 /]# cd /myrpm/inotify-tools-3.13
[root@svr7 inotify-tools-3.13]# ./configure

7. 进行 make 编译
[root@svr7 inotify-tools-3.13]# make

8. 进行 make  install 安装
[root@svr7 inotify-tools-3.13]# make install
9.验证
[root@svr7 /]# which inotifywait   #查询命令所对应的程序文件 
[root@svr7 /]# ls /usr/local/bin/inotifywait 

10. 书写脚本/root/rsync.sh


   inotifywait -rq /opt/


   rsync -avz --delete /opt/  root@192.168.4.207:/opt/

  非常适合死循环，条件成立，一直循环

    while  [条件]
     do
             执行的语句
     done

[root@svr7 /]# vim /root/rsync.sh
 #!/bin/bash
   while    inotifywait -rqq /opt/
   do
      rsync -az --delete /opt/  root@192.168.4.207:/opt/
   done  &

[root@svr7 /]# /root/rsync.sh 
[root@svr7 /]# ps aux | grep rsync.sh

[root@svr7 /]# killall rsync.sh

######################################################









一、搭建CentOS7.4虚拟机
  新建一台虚拟机，放入CentOS7.4的光盘
  内存为2G，硬盘50G
  网络类型为 private1
  软件包：带GUI的服务器（安装图形）
  分区自动选择，设置root密码，建立普通用户

二、虚拟机设置  
   1.设置防火墙为trusted
  # firewall-cmd  --set-default-zone=trusted 

   2.当前及永久设置SELinux状态为permissive
 [root@localhost ~]# setenforce 0
 [root@localhost ~]# getenforce 
 [root@localhost ~]# vim /etc/selinux/config 
 SELINUX=permissive

   3.配置IP地址：192.168.4.180/24
   4.利用本地/dev/cdrom挂载,搭建本地Yum仓库   
   5.主机名：cobbler.tedu.cn



三、利用scp真机传递Cobbler.zip包到虚拟机192.168.4.180中
 # scp /root/桌面/Cobbler.zip   root@192.168.4.180:/root/

四、搭建Cobbler装机平台

  Cobbler概述软件，管理dhcp、tftp、Web服务
    自由的导入镜像与ks应答文件

1.解压Cobbler.zip包
[root@cobbler /]# unzip /root/Cobbler.zip -d /
[root@cobbler /]# cd /Cobbler/
[root@cobbler Cobbler]# ls

[root@cobbler /]# unzip /Cobbler/cobbler.zip  -d  /opt/ 
[root@cobbler /]# ls /opt/cobbler

#####################################################
五、安装cobbler主程序、工具包等
[root@cobbler /]# yum -y install /opt/cobbler/*.rpm

#################################################################
cobbler网络装机部署

1.安装软件 cobbler cobbler-web dhcp tftp-server pykickstart httpd  tftp-server 

 cobbler         #cobbler程序包
 cobbler-web     #cobbler的web服务包
 pykickstart     #cobbler检查kickstart语法错误
 httpd           #Apache web服务
 dhcp            #dhcp服务
 tftp-server     #tftp服务



2.配置cobbler
[root@svr7 /]# vim  /etc/cobbler/settings

 next_server:   192.168.4.180   #设置下一个服务器还为本机
 server:  192.168.4.180         #设置本机为cobbler服务器
 manage_dhcp:  1                #设置cobbler管理dhcp服务
 pxe_just_once:  1              #防止客户端重复安装操作系统

 开机启动： 匹配及停止  
     1.硬盘启动   2.光驱设备  3.U盘  4.网络引导   
 


3.配置cobbler的dhcp
[root@svr7 /]# vim  /etc/cobbler/dhcp.template 

  :%s  /192.168.1/192.168.4/g    #全文替换


4.绝对路径解压cobbler_boot.tar.gz    #众多的引导文件

# tar -tf  /Cobbler/cobbler_boot.tar.gz   #查看包里面内容
# tar -xPf  /Cobbler/cobbler_boot.tar.gz  #绝对路径释放

# ls  /var/lib/cobbler/loaders/

5.启动相关服务

[root@svr7 /]# systemctl restart cobblerd
[root@svr7 /]# systemctl enable cobblerd

[root@svr7 /]# systemctl restart httpd
[root@svr7 /]# systemctl enable httpd

[root@svr7 /]# systemctl restart tftp
[root@svr7 /]# systemctl enable tftp

[root@svr7 /]# systemctl restart rsyncd   #同步服务
[root@svr7 /]# systemctl enable rsyncd

6.同步刷新cobbler配置
[root@svr7 /]# cobbler sync
[root@svr7 /]# firefox https://192.168.4.180/cobbler_web

   用户名：cobbler
   密码：cobbler


##########################################################################################################
  cobbler import  --path=挂载点   --name=导入系统命名（随意起）
导入安装镜像数据

# mount /dev/cdrom  /dvd

# ls /dvd/

# cobbler import --path=/dvd  --name=CentOS7

cobbler导入的镜像放在：/var/www/cobbler/ks_mirror

[root@cobbler /]# cobbler list    #查看有哪些系统
distros:
   CentOS7-x86_64        #安装客户端至少2G内存

profiles:
   CentOS7-x86_64
###########################################

# umount /dvd/
# mount /dev/cdrom  /dvd   将光盘换成RHEL7
# ls /dvd/

  安装完成机器 默认root  密码  cobbler

##########################################

############################################################################################################
[root@cobbler ~]# system-config-kickstart  #生成ks文件

默认kickstart文件存放位置：/var/lib/cobbler/kickstarts/

[root@cobbler ~]# cobbler list

修改kickstart文件：
[root@cobbler ~]# cobbler profile edit --name=CentOS7.4-A  --kickstart=/var/lib/cobbler/kickstarts/自定义.cfg

[root@cobbler ~]# cobbler profile report
[root@cobbler ~]# cobbler sync  #同步配置

############################################################################################################










systemctl控制

– 负责掌控整个Linux的运行/服务资源组合

– 服务目录:/lib/systemd/system/

服务管理：
  systemctl restart  httpd    #重起服务
  systemctl status  httpd     #查看服务状态

  systemctl start  httpd    #服务启动
  systemctl stop   httpd    #服务停止

  systemctl enable  httpd      #设置服务开机自起 
  systemctl is-enabled httpd   #查看服务是否是开机自起 
  systemctl disable httpd      #设置服务禁止开机自起   


管理运行级别：

  RHEL6：200个服务

		0：关机        0个服务
		1：单用户模式（修复模式 破解密码模式）  50个服务
		2：字符界面（不支持网络）   80个服务
		3：字符界面（支持网络）  120个服务
		4：未定义
		5：图形界面       180个服务
		6：重起      0个服务

   切换级别 ： init 0

RHEL7:

  multi-user.target :字符模式/文本模式
  graphical.target :图形模式

临时切换
[root@svr7 /]# systemctl isolate multi-user.target
[root@svr7 /]# systemctl isolate graphical.target

永久改变开机进入的模式
[root@svr7 /]# systemctl get-default   #查看默认进入的模式

[root@svr7 /]# systemctl set-default graphical.target

[root@svr7 /]# reboot


========================================================
NETWORK day1

计算机网络的功能
数据通信、资源共享、增加数据可靠性、提高系统处理能力

计算机网络的发展
60年代:分组交换
70-80年代:TCP/IP
90年后:Web技术

标准：一致同意的规则

ISO（国际标准化组织）在网络通信中创建了OSI（开放系统互联）模型。
ANSI（美国国家标准化局）
ITU-T（国际电信联盟-电信标准部）
IEEE（电气和电子工程师学会）

按照网络规模和使用范围分类为
WAN：广域网    LAN:局域网

网络设备
交换机、路由器
网络设备生产厂商：cisco思科，华为。

网络拓扑结构
1、点对点
两台设备之间有一条单独的连接，通常用于广域网连接
2、星型拓扑
1）优点：易于实现、易于网络扩展、易于故障排查
2）缺点：中心节点压力大、组网成本较高
3、网型拓扑结构
1）各个节点至少与其他两个节点相连
2）可靠性高、组网成本高

OSI
1、国际标准化组织（ISO）
开放系统互连参考模型OSI
OSI是一个开放式体系结构，它规定将网络分为七层
2、协议分层
为了降低网络设计的复杂性，将协议进行了分层设计

应用层：网络服务与最终用户的一个接口
表示层：数据的表现形式，如加密、压缩。
会话层：建立、管理、中止会话，例如断点续传。
传输层：定义传输数据的协议端口号，以及流控和差错校验。
网络层：进行逻辑地址寻址，实现不同网络之间的通信。
数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能。
物理层：建立、维护、断开物理连接。

TCP/IP协议族的组成
应用层：HTTP、https、FTP、TFTP、SMTP 、SNMP、DNS
传输层：TCP、UDP
网络层：ICMP、IGMP、IP、ARP

PDU（协议数据单元）
传输层    段   segment
网络层    包   packet
数据链路层 帧  frame
物理层     比特 bit

相应层次的设备
应用层     计算机
传输层     防火墙
网络层     路由器
数据链路层 交换机
物理层     网卡

接口
以太网接口：
RJ-45水晶头
光纤接口：
FC 、ST、SC 
LC 窄体方形光纤接头（目前主流）
MT-RJ 

双绞线
1）双绞线分类：
屏蔽双绞线 （STP）
线外包裹一层金属网膜，用于电磁环境非常复杂的工业环境中 
非屏蔽双绞线 （UTP）
2）双绞线标准与分类：
Cat5五类双绞线，适用于100Mbps的网络
Cat 5e衰减更小，适用于100Mbps的网络，串扰更少，性能优于5类线 （超五类）
Cat 6适用于1000Mbps的网络
Cat 7适用于10000Mbps的网络
4、双绞线的连接规范
1）线序
T568A：
白绿、绿、白橙、蓝、白蓝、橙、白棕、棕
T568B：
白橙、橙、白绿、蓝、白蓝、绿、白棕、棕 
2）线缆的连接：
标准网线（直连线或直通线）：用于连接不同设备（A-A，B-B）
交叉网线：用于连接相同设备 （A-B）
全反线 ：不用于以太网的连接，主要用于计算机的串口和路由器或交换机的console（控制口）相连
例外情况：版本较新设备可以随意使用标准与交叉网线而不受限制，设备本身具备自动识别功能。

5、物理层设备
网卡、中继器

======================
交换机的工作模式：
Switch>用户模式
Switch>enable 
Switch#特权模式
Switch#configure  terminal 
Switch(config)#全局配置模式
Switch(config)#interface fastEthernet 0/1
Switch(config-if)#接口模式
exit返回上一模式
end直接退到特权模式

命令输入错误被卡住时同时按键盘ctrl+shift+6这三个按键

常用命令：
Switch(config)#hostname S1修改主机名为S1
Switch#show  running-config查看配置信息

配置enable明文口令
全局配置模式：enable  password  123
保存交换机的配置
特权： copy  running-config  startup-config
或 write
恢复设备出厂默认值
特权：erase  startup-config
重启：reload

设备配置的准备工作
空闲一段时间后，重回初始界面的问题
switch(config)#line con 0
switch(config-line)#exec-timeout 0 0

配置输出日志同步
Switch(config)#line console 0
Switch(config-line)#logging synchronous

禁用DNS查询
switch(config)#no ip domain-lookup


练习1
熟练掌握交换机每个模式的配置命令

Switch>                       //用户模式
Switch>enable     
Switch#                       //特权模式（一般用于查看配置信息）
Switch#configure terminal 
Switch(config)#               //全局配置模式（所做的配置对整个设备生效）
Switch(config)#interface fastEthernet 0/1
Switch(config-if)#            //接口模式

Exit  返回上一模式
End   从接口或者全局配置模式回到特权模式，快捷键Ctrl+Z为同等效果
注：思科设备命令行无需区分大小写，这一点与linux系统不一样。
    命令输入错误被卡住时同时按键盘ctrl+shift+6这三个按键


练习2

配置主机名
Switch>en
Switch#conf t
Switch(config)# hostname S1
S1(config)#exit
S1#show running-config
按 空格键 进行翻页即可显示交换机所有配置信息

 
练习3

为交换机配置特权密码Taren1
Switch>en
Switch#conf t
Switch(config)#enable password Taren1 

保存配置并重启设备检测密码可用情况
Switch(config)#exit
Switch#write
Switch#reload
……….
………
Switch>enable
Password:

清空设备配置
Switch#erase startup-config

Erasing the nvram filesystem will remove all configuration files! Continue? [confirm]         //此时系统询问是否确定删除，按回车即可
[OK]
Erase of nvram: complete

重启设备检测配置状况
Switch#reload
Proceed with reload? [confirm]      //此时系统询问是否确定重启，按回车即可


=========================================================
NETWORK day2

数据链路层
MAC地址
用来识别一个以太网上的某个单独的设备或一组设备 
MAC地址长度48位(6个字节)，前24位代表厂商，后24位代表网卡编号，
MAC 地址的第8位为0时表示该MAC地址为单播地址，为1时表示组播地址。48位都为1表示广播地址。
Ipconfig  /all  查看MAC地址
注：一块物理网卡的地址一定是一个单播地址，也就是第8位一定为0
数据链路层的帧格式




交换机

1、交换机是用来连接局域网的主要设备，可以实现数据帧的转发
2、交换机的工作原理
学习，广播，转发，更新
3、广播域
广播域指接收同样广播消息的节点的集合，交换机的所有端口默认属于同一个广播域

交换机的基本配置
1、常用命令
1）查看MAC地址表
特权：show mac-address-table

一、什么是VLAN
虚拟局域网
二、VLAN的优势
广播控制、安全性、带宽利用、延迟

创建VLAN的方法
在全局配置模式中：vlan  2（创建vlan2）
Name  名字（给vlan2命名）

接口加入vlan
1）进入将要加入vlan的接口然后输入
switchport  access  vlan   3
2）、同时将多个接口加入vlan 2
全局： interface  range  f0/1 – 10
switchport  access  vlan  2    

5、查看vlan信息
特权：show  vlan  brief

trunk中继链接
1、作用：实现交换机之间的单一链路传递多个vlan的信息
2、链路类型：
接入链路(access):  可以承载1个 vlan
中继链路(trunk)：可以承载多个 vlan
3、vlan的标识
1）ISL(cisco私有的标记方法)
2）IEEE 802.1q(公有的标记方法)

4、trunk的配置
接口模式：switchport  mode  trunk(配置为中继链路)

5、查看接口模式
特权模式：show  interface  f0/5  switchport

EthernetChannel（以太网通道）
1、功能：多条线路负载均衡，带宽提高
容错，当一条线路失效时，其他线路通信，不会丢包
2、以太网通道的配置：
全局：interface  range  f0/6 – 8
switchport  mode  trunk
channel-group  1  mode on

查看以太网通道的配置： show  etherchannel  summary

练习1


在交换机上创建vlan10，修改名称为web并查看vlan配置
Switch>enable 
Switch#configure terminal 
Switch(config)#vlan 10
Switch(config-vlan)#name web
Switch(config-vlan)#end
Switch#show vlan brief

删除vlan10，查看vlan配置
Switch#configure terminal 
Switch(config)#no vlan 10
Switch(config)#end
Switch#show vlan brief

创建vlan20，将f0/1端口加入此vlan，查看vlan配置
Switch#configure terminal
Switch(config)#vlan 20
Switch(config-vlan)#exit
Switch(config)#interface fastethernet 0/1
Switch(config-if)#switchport access vlan 20
Switch(config)#end
Switch#show vlan brief

将f0/1端口从vlan20中删除，查看vlan配置
Switch#configure terminal
Switch(config)#interface fastethernet 0/1
Switch(config-if)#no switchport access vlan 20
Switch(config)#end
Switch#show vlan brief


练习2

Switch>enable 
Switch#configure terminal 
Switch(config)#vlan 2
Switch(config-vlan)#vlan 3
Switch(config-vlan)#exit
Switch(config)#interface range fastEthernet 0/3-4
Switch(config-if-range)#switchport access vlan 2
Switch(config-vlan)#exit
Switch(config)#interface range fastEthernet 0/5-6
Switch(config-if-range)#switchport access vlan 3
Switch#show vlan brief
只能同vlan的主机互通



练习3

双交换机实现同vlan互通
交换机相连接的端口加入到想要互通的vlan中
每增加一个vlan互通需要交换机也要连通一条物理线路，并且端口要绑定vlan
S1配置
Switch#configure terminal
Switch(config)#interface fastethernet 0/7
Switch(config-if)#switchport access vlan 3
S2配置
Switch>enable 
Switch#configure terminal 
Switch(config)#vlan 3
Switch(config-vlan)#exit
Switch(config)#interface range fastEthernet 0/5-7
Switch(config-if-range)#switchport access vlan 3


练习4

配置s1的f0/1口为trunk模式，分别查看两台交换机f0/1端口状态
Switch>enable 
Switch#configure terminal 
Switch(config)#interface fastEthernet 0/1
Switch(config-if)#switchport mode trunk 
Switch(config-if)#end
Switch#show interfaces fastEthernet 0/1 switchport 

恢复s1的f0/1口为默认模式，分别查看两台交换机f0/1端口状态
Switch#configure terminal 
Switch(config)#interface fastEthernet 0/1
Switch(config-if)#no switchport mode trunk 
Switch#show interfaces fastEthernet 0/1 switchport 


练习5

注：以下配置需要在练习3的基础上完成
双交换机实现vlan互通，多个vlan共用一条传输线路，需要将线路转换为trunk模式
S1配置
Switch>enable 
Switch#configure terminal 
Switch(config)#interface fastEthernet 0/7
Switch(config-if)#switchport mode trunk 
S2配置
Switch>enable 
Switch#configure terminal 
Switch(config)#vlan 2
Switch(config-vlan)#exit
Switch(config)#interface range fastEthernet 0/3-4
Switch(config-if-range)#switchport access vlan 2
Switch(config-if-range)#exit
Switch(config)#interface fastEthernet 0/7
Switch(config-if)#switchport mode trunk 


练习6

S1配置
Switch>enable 
Switch#configure terminal 
Switch(config)#interface range fastEthernet 0/7-9
Switch(config-if)#switchport mode trunk   //网口必须都设置位trunk
Switch(config-if-range)#channel-group 1 mode on 
Switch(config-if-range)#end
Switch#show etherchannel summary
S1配置
Switch>enable 
Switch#configure terminal 
Switch(config)#interface range fastEthernet 0/7-9
Switch(config-if)#switchport mode trunk
Switch(config-if-range)#channel-group 1 mode on 
Switch(config-if-range)#end
Switch#show etherchannel summary
1.双交换机，不同vlan通信
2.端口789全部开启trunk模式
3.端口绑定为以太通道
此时端口789不再出现在vlan列表中，即使断开一条端口，网络依然互通


====================================================
NETWORK day3

路由器原理及静态路由
1、路由
跨越从源主机到目标主机的一个互联网络来转发数据包的过程
2、路由表
路由器根据路由表做路径选择
3、路由表的获得
1）、直连路由：配置IP地址，端口UP状态，形成直连路由。
2）、非直连网段：需要静态路由或动态路由，将网段添加到路由表中。
4、静态路由
1）、特点：
由管理员手工配置的，是单向的，因此需要在两个网络之间的边缘路由器上需要双方对指，否则就会造成流量有去无回，缺乏灵活性，适用于小型网络。
2)、配置
全局模式：
ip  route  目标网络ID  子网掩码  下一跳IP

缺省路由（默认路由）
缺省路由是一种特殊的静态路由
简单地说,缺省路由就是在没有找到任何匹配的具体路由条目的情况下才使用的路由，适用于只有一个出口的末节网络（比如企业的网关出口）
全局:ip  route  0.0.0.0  0.0.0.0  下一跳

查看路由表
特权：show  ip  route
C直连路由
S静态路由
S*默认路由

============================================

三层交换技术
1、作用
使用三层交换技术实现VLAN间通信 
三层交换=二层交换+三层转发
2、虚拟接口（SVI）
三层交换机上配置的VLAN接口为虚接口
3、三层交换机的配置
1）、在三层交换机启用路由功能 
全局：ip  routing
2）、配置虚拟接口的IP 地址
全局：interface  vlan  1
ip  address  192.168.2.254  255.255.255.0 
no  shutdown 
3）在三层交换机上配置Trunk并指定接口封装为802.1q
接口模式：switchport  trunk  encapsulation  dot1q 
switchport  mode  trunk
4）、配置路由接口
进入接口：no  switchport 

======================================================
动态路由 
1、动态路由特点 
根据网络拓扑或流量变化，由路由器通过路由协议自动设置, 减少了管理任务，但占用了网络带宽
适合ISP服务商、广域网、园区网等大型网络
===========================================
OSPF协议
•Open Shortest Path First ( 开放式最短路径优先）
•OSPF区域
•为了适应大型的网络，OSPF在AS内划分多个区域
•每个OSPF路由器只维护所在区域的完整链路状态信息
•区域ID
•区域ID可以表示成一个十进制的数字
•也可以表示成一个IP
•骨干区域Area 0
•负责区域间路由信息传播


启动OSPF路由进程
Router(config)# router ospf process-id
指定OSPF协议运行的接口和所在的区域
Router(config-router)# network address inverse-mask area area-id


路由器属于三层网络设备，与交换机在实现原理上由很大区别
主机要设置网关地址
练习1

R1配置
Router>enable
Router#configure terminal 
Router(config)#interface gigabitEthernet 0/0
Router(config-if)#ip address 192.168.1.254 255.255.255.0
Router(config-if)#no shutdown 
Router(config-if)#exit
Router(config)#interface gigabitEthernet 0/1
Router(config-if)#ip address 192.168.2.1 255.255.255.0
Router(config-if)#no shutdown 
Router(config-if)#exit
Router(config)#ip route 192.168.3.0 255.255.255.0 192.168.2.2

R2配置
Router>enable
Router#configure terminal 
Router(config)#interface gigabitEthernet 0/0
Router(config-if)#ip address 192.168.3.254 255.255.255.0
Router(config-if)#no shutdown 
Router(config-if)#exit
Router(config)#interface gigabitEthernet 0/1
Router(config-if)#ip address 192.168.2.2 255.255.255.0
Router(config-if)#no shutdown 
Router(config-if)#exit
Router(config)#ip route 192.168.1.0 255.255.255.0 192.168.2.1
不同IP段的主机可以互通




练习2

注：以下配置需要在练习1的基础上完成
1、路由器各端口设置IP地址
路由器之间设置相同IP段
路由器与主机之间设置相同IP段，其中路由端的IP作为子网的网关地址
2、每一个“下一跳”都设置静态路由

R1配置
Router(config)#ip route 192.168.4.0 255.255.255.0 192.168.2.2
Router(config)#ip route 192.168.5.0 255.255.255.0 192.168.2.2

R2配置
Router(config)#interface gigabitEthernet 0/2
Router(config-if)#ip address 192.168.4.1 255.255.255.0
Router(config-if)#no shutdown 
Router(config)#ip route 192.168.5.0 255.255.255.0 192.168.4.2

R3配置
Router>enable
Router#configure terminal 
Router(config)#interface gigabitEthernet 0/0
Router(config-if)#ip address 192.168.5.254 255.255.255.0
Router(config-if)#no shutdown 
Router(config-if)#exit
Router(config)#interface gigabitEthernet 0/1
Router(config-if)#ip address 192.168.4.2 255.255.255.0
Router(config-if)#no shutdown 
Router(config-if)#exit
Router(config)#ip route 192.168.1.0 255.255.255.0 192.168.4.1
Router(config)#ip route 192.168.2.0 255.255.255.0 192.168.4.1
Router(config)#ip route 192.168.3.0 255.255.255.0 192.168.4.1




练习3

注：以下配置需要在练习2的基础上完成
1、路由器各端口设置IP地址
路由器之间设置相同IP段
路由器与主机之间设置相同IP段，其中路由端的IP作为子网的网关地址
2、只有一个“下一跳”的路由可以设置默认静态路由，此时需要移除单独设置的静态路由
3、多个“下一跳”的路由必须逐条设置

R1配置
Router(config)#no ip route 192.168.3.0 255.255.255.0 192.168.2.2
Router(config)#no ip route 192.168.4.0 255.255.255.0 192.168.2.2
Router(config)#no ip route 192.168.5.0 255.255.255.0 192.168.2.2
Router(config)#ip route 0.0.0.0 0.0.0.0 192.168.2.2

R3配置
Router(config)#no ip route 192.168.1.0 255.255.255.0 192.168.4.1
Router(config)#no ip route 192.168.2.0 255.255.255.0 192.168.4.1
Router(config)#no ip route 192.168.3.0 255.255.255.0 192.168.4.1
Router(config)#ip route 0.0.0.0 0.0.0.0 192.168.4.1


练习4

三层交换机的配置
• 确定哪些VLAN需要配置网关   
• 如果三层交换机上没有该VLAN则创建它  //#vlan vlan-id
• 为每个VLAN创建相关的SVI            //#interface vlan 1
• 给每个SVI配置IP地址               //#ip address 192.168.1.254 255.255.255.0
• 启用SVI端口                        //#no shutdown
• 启用三层交换机的IP路由功能         //#ip routing
• 如果需要，配置三层交换机的劢态或静态路由  //swichport access vlan 1 端口都要添加
三层交换机配置
Switch>enable 
Switch#configure terminal 
Switch(config)#interface vlan 1  //SVI交换虚拟接口
Switch(config-if)#ip address 192.168.1.254 255.255.255.0
Switch(config-if)#no shutdown


Switch(config-if)#vlan 2
Switch(config-vlan)#vlan 3
Switch(config-vlan)#exit

Switch(config)#interface vlan 2
Switch(config-if)#ip address 192.168.2.254 255.255.255.0
Switch(config-vlan)#exit

Switch(config)#interface vlan 3
Switch(config-if)#ip address 192.168.3.254 255.255.255.0
Switch(config-vlan)#exit

Switch(config)#ip routing
Switch(config)#interface f0/1
Switch(config-if)#swichport access vlan 1
Switch(config-if)#exit
Switch(config)#interface f0/2
Switch(config-if)#swichport access vlan 2
Switch(config-if)#exit
Switch(config)#interface f0/3
Switch(config-if)#swichport access vlan 3
Switch(config-if)#exit



练习5

二层交换机划分端口vlan，将24口转换为trunk
三层交换机设置封装24口位802.1q模式，转换为trunk
Pc设置ip及网关
三层交换机设置SVI交换虚拟接口，即vlan绑定IP的操作
三层交换机#ip routing


注：以下配置需要在练习4的基础上完成

三层交换机配置
Switch(config)#interface fastEthernet 0/24
Switch(config-if)#switchport trunk encapsulation dot1q 
Switch(config-if)#switchport mode trunk

二层交换机配置
Switch>enable 
Switch#configure terminal 
Switch(config)#interface range fastEthernet 0/11-15
Switch(config-if-range)#switchport access vlan 2
Switch(config-if-range)#exit
Switch(config)#interface range fastEthernet 0/16-22
Switch(config-if-range)#switchport access vlan 3
Switch(config)#interface fastEthernet 0/24
Switch(config-if)#switchport mode trunk


练习6

注：以下配置需要在练习5的基础上完成
三层交换机配置
Switch(config)#interface fastEthernet 0/23
Switch(config-if)#no switchport   //转换为三层端口
Switch(config-if)#ip address 192.168.4.1 255.255.255.0
Switch(config-if)#exit
Switch(config)#ip route 0.0.0.0 0.0.0.0 192.168.4.2
路由器配置
Router>enable
Router#configure terminal 
Router(config)#interface gigabitEthernet 0/0
Router(config-if)#ip address 192.168.4.2 255.255.255.0
Router(config-if)#no shutdown 
Router(config-if)#exit
Router(config)#interface gigabitEthernet 0/1
Router(config-if)#ip address 192.168.5.254 255.255.255.0
Router(config-if)#no shutdown 
Router(config-if)#exit
Router(config)#ip route 192.168.1.0 255.255.255.0 192.168.4.1
Router(config)#ip route 192.168.2.0 255.255.255.0 192.168.4.1
Router(config)#ip route 192.168.3.0 255.255.255.0 192.168.4.1


练习7

注：以下配置需要在练习6的基础上完成
Ospf：开方式最短路径优先
三层交换机配置
Switch(config)#no ip route 0.0.0.0 0.0.0.0 192.168.4.2
Switch(config)#router ospf 1
Switch(config-router)#network 192.168.1.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.2.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.3.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.4.0 0.0.0.255 area 0

路由器配置
Router(config)#no ip route 192.168.1.0 255.255.255.0 192.168.4.1
Router(config)#no ip route 192.168.2.0 255.255.255.0 192.168.4.1
Router(config)#no ip route 192.168.3.0 255.255.255.0 192.168.4.1
Router(config)#router ospf 1
Router(config-router)#network 192.168.4.0 0.0.0.255 area 0
Router(config-router)#network 192.168.5.0 0.0.0.255 area 0
为什么ospf要和动态路由一起用


==============================================
NETWORK day3

TCP和UDP协议
1、TCP
传输控制协议
可靠的、面向连接的协议
传输效率低
2、UDP
用户数据报协议
不可靠的、无连接的服务
传输效率高
2、TCP的三次握手与四次断开
TCP的应用
端口 	协议 	说　　明
21 	FTP 	FTP服务器所开放的控制端口
23 	TELNET 	用于远程登录，可以远程控制管理目标计算机
25 	SMTP 	SMTP服务器开放的端口，用于发送邮件
80 	HTTP 	超文本传输协议
53 	DNS 	域名服务，当用户输入网站的名称后，由DNS负责将它解析成IP地址，这个过程中用到的端口号是53

三、UDP
1、UDP首部格式
源端口号（16）	目标端口号（16）
UDP长度（16）	UDP校验和（16）
UDP长度：用来指出UDP的总长度
校验和：用来完成对UDP数据的差错检验，它是UDP协议提供的唯一的可靠机制

2、UDP端口及应用
端口	协议	说明
69	TFTP	简单文件传输协议
123	NTP	网络时间协议
53	DNS	域名服务
3、UDP的流控和差错控制
UDP缺乏可靠机制
UDP只有校验和来提供差错控制
需要上层协议来提供差错控制：例如TFTP协议


访问控制列表概述
1、访问控制列表（ACL）：
读取第三层、第四层包头信息
根据预先定义好的规则对包进行过滤
2、访问控制列表的处理过程
如果匹配第一条规则，则不再往下检查，路由器将决定该数据包允许通过或拒绝通过。
如果不匹配第一条规则，则依次往下检查，直到有任何一条规则匹配。
如果最后没有任何一条规则匹配，则路由器根据默认的规则将丢弃该数据包。
3、访问控制列表的类型：
1）标准访问控制列表
基于源IP地址过滤数据包 
列表号是1～99 
2）扩展访问控制列表
基于源IP地址、目的IP地址、指定协议、端口等来过滤数据包 
列表号是100～199 
二、标准访问控制列表
1、标准访问控制列表的创建
全局：access-list  1  deny  192.168.1.1  0.0.0.0
全局：access-list  1  permit  192.168.1.0  0.0.0.255
通配符掩码：也叫做反码。用二进制数0和1表示，如果某位为1，表明这一位不需要进行匹配操作，如果为0表明需要严格匹配。

隐含拒绝语句：
access-list  1  deny  0.0.0.0  255.255.255.255
2、将ACL应用于接口
接口模式：ip  access-group  列表号 in或out

注：access-list  1  deny  192.168.1.1  0.0.0.0或写为
access-list  1  deny  host  192.168.1.1
access-list  1  deny  0.0.0.0  255.255.255.255或写为
access-list  1  deny  any
3、删除已建立的访问控制列表
全局：no  access-list 列表号
4、接口上取消ACL
接口模式：no  ip  access-group  列表号in 或out
5、查看访问控制列表
特权：show  access-lists

5、删除ACL
全局：no  access-list  列表号
注：不能删除单条ACL语句，只能删除整个ACL。

一、NAT（网络地址转换）
1、作用：通过将内部网络的私有IP地址翻译成全球唯一的公网IP地址，使内部网络可以连接到互联网等外部网络上。
2、优点：
节省公有合法IP地址
处理地址重叠
安全性
3、NAT的缺点
延迟增大
配置和维护的复杂性
4、NAT实现方式
1）静态转换
IP地址的对应关系是一对一，而且是不变的，借助静态转换，能实现外部网络对内部网络中某些特设定服务器的访问。
静态NAT配置：
配置接口IP及路由
全局：
Ip nat inside source static 192.168.1.1 61.159.62.131
在内外接口上启用NAT：
出口配置：ip 　nat 　outside
入口配置：ip 　nat 　inside 

2）端口多路复用（PAT）
通过改变外出数据包的源IP地址和源端口并进行端口转换，内部网络的所有主机均可共享一个合法IP地址实现互联网的访问，节约IP。
PAT的配置：
全局：ip nat inside source list 1 interface f0/1 overload

5、NAT两种实现方式的区别：
静态转换的对应关系一对一且不变，并且没有节约公用IP，只隐藏了主机的真实地址。
端口多路复用可以使所有内部网络主机共享一个合法的外部IP地址，从而最大限度地节约IP地址资源。

开启nat排错功能
Router#debug  ip  nat 
S表示源地址
D表示目的地址
192.168.1.2->61.159.62.130表示将192.168.1.2转换为61.159.62.130
关闭nat排错功能
Router#undebug  ip  nat

练习1

标准访问控制列表首先是白名单的作用，即默认会拒绝所有流量

1，为路由器g0/0接口配置ip 192.168.1.254
Router(config)#interface gigabitEthernet 0/0
Router(config-if)#ip address 192.168.1.254 255.255.255.0
Router(config-if)#no shut

   为路由器g0/1接口配置ip 192.168.2.254
Router(config)#interface gigabitEthernet 0/1
Router(config-if)#ip address 192.168.2.254 255.255.255.0
Router(config-if)#no shut

2，为每台pc配置ip与网关
3，使用标准acl限制pc2
Router(config)#access-list 1 deny 192.168.2.1 0.0.0.0 
或
Router(config)#access-list 1 deny host 192.168.2.1
以上两条配置其中一条即可，效果相同。
4，放行其他数据
Router(config)#access-list 1 permit any
5，在接口中应用acl
Router(config)#interface gigabitEthernet 0/1
Router(config-if)#ip access-group 1 in


练习2

注：此配置需要在练习1的基础上完成
Router(config)#no access-list 1
Router(config)#access-list 1 permit 192.168.2.1 0.0.0.0 
或
Router(config)#access-list 1 permit host 192.168.2.1
以上两条配置其中一条即可，效果相同。



练习3

注：此配置需要在练习2的基础上完成
Router(config)#no access-list 1
Router(config)#access-list 100 deny tcp host 192.168.2.1 host 192.168.1.1 eq 21
Router(config)#access-list 100 deny tcp host 192.168.2.2 host 192.168.1.1 eq 80
Router(config)#access-list 100 permit ip any any  //允许任意主机访问任意服务

在接口中应用acl
Router(config)#interface gigabitEthernet 0/1
Router(config-if)#ip access-group 100 in


练习4

Network Address Translation，网络地址转换
1，首先配置路由器的接口地址
Router(config)#interface g0/1
Router(config-if)#ip address 100.0.0.1 255.0.0.0
Router(config-if)#no shut
Router(config)#interface g0/0
Router(config-if)#ip address 192.168.1.254 255.255.255.0
Router(config-if)#no shut
2，配置静态nat转换   //NAT静态转换
Router(config)#ip nat inside source static 192.168.1.1 100.0.0.2
Router(config)#ip nat inside source static 192.168.1.2 100.0.0.3
3，在内部和外部端口上启用NAT
Router(config)#interface g0/1
Router(config-if)#ip nat outside
Router(config)#interface g0/0
Router(config-if)#ip nat inside
4，为pc配置ip地址与网关，pc3无需配置网关


练习5

注：此配置需要在练习4的基础上完成

Router(config)#no ip nat inside source static 192.168.1.1 100.0.0.2
Router(config)#no ip nat inside source static 192.168.1.2 100.0.0.3
//NAT端口映射配置
Router(config)#ip nat inside source static tcp 192.168.1.1 80 100.0.0.2 80 


练习6

注：此配置需要在练习5的基础上完成
Router(config)#no ip nat inside source static tcp 192.168.1.1 80 100.0.0.2 80 

使用acl定义内部ip地址
Router(config)#access-list 1 permit 192.168.1.0 0.0.0.255
使用pat复用外网接口地址
Router(config)#ip nat inside source list 1 interface g0/1 overload


===============================================
NETWORK day

STP简介
STP － Spanning Tree Protocol(生成树协议)
逻辑上断开环路，防止广播风暴的产生
当线路故障，阻塞接口被激活，恢复通信，起备份线路的作用

选择根网桥
选择交换网络中网桥ID最小的交换机成为根网桥，网桥ID是一个八字的字段，前两个字节十进制数为网桥优先级，后六个字是网桥的MAC地址，优先级小的被选择为根网桥，如优先级相同则MAC地址小的为根网桥。
网桥优先级的取值范围0-65535默认值为32768

查看交换机mac地址
Switch#show version
Base ethernet MAC Address : 0001.9751.0467

VLAN与STP（生成树）之间的关系：
PVST+（增强的每vlan生成树）
PVST+配置的意义 
配置网络中比较稳定的交换机为根网桥 
利用PVST+实现网络的负载分担
四、PVST+的配置命令
1、启用生成树命令 (此命令可以不用输入，默认交换机会开启)
全局：spanning-tree  vlan  2
2、指定根网桥（主根或次根）
改优先级
全局：spanning-tree  vlan  1  priority  优先级的值
注意： 优先级的值是4096的倍数；
或者在全局模式（推荐此方式）：spanning-tree  vlan  2  root  primary 
spanning-tree  vlan  2  root  secondary 

3、查看某个vlan的生成树的配置
特权：show  spanning-tree  vlan  1

Root ID Priority 20481  表示根网桥的优先级
Bridge ID Priority 24577  表示当前设备的优先级
BLK  表示阻塞接口
FWD 表示转发接口
====================================================
一、热备份路由选择协议（HSRP）
1、作用：Cisco私有协议 ，确保了当网络边缘设备或接入链路出现故障时，用户通信能迅速并透明地恢复，以此为IP网络提供冗余性。通过使用同一个虚拟IP地址和虚拟MAC地址，LAN网段上的两台或者多台路由器可以作为一台虚拟路由器对外提供服务。HSRP使组内的cisco路由器能互相监视对方的运行状态。（Cisco私有协议）
2、HSRP组成员 
活跃路由器、备份路由器、虚拟路由器（即该lan上的网关）、其他路由器
HSRP的配置
1、配置为HSRP的成员 
进入路由器的网关接口
standby  1   ip   虚拟网关IP
2、配置HSRP的优先级
 standby  1   priority  优先级
优先级范围0-255，默认为100
3、查看HSRP摘要信息 
特权： show  standby  brief
4、HSRP端口跟踪 
standby  1  track  f0/1
5、HSRP占先权	
standby   1  preempt


练习1

STP生成树算法
1，在Switch1中配置
Switch(config)#spanning-tree vlan 1 priority 24576
或
Switch(config)#spanning-tree vlan 1 root primary
2，在Switch2中配置
Switch(config)#spanning-tree vlan 1 priority 28672
或
Switch(config)#spanning-tree vlan 1 root secondary
如何知道是设备损坏导致的广播风暴


练习2

1，在Switch3中配置
Switch(config)#spanning-tree vlan 1 root primary
2，在Switch1中配置
Switch(config)#spanning-tree vlan 1 root secondary
STP生成树算法会阻塞优先级最低的设备到次一级优先级的设备通道
A>B,  C会选择优先级高的设备连通


练习3

1，在所有交换机中创建vlan2
Switch(config)#vlan 2
2，将拓扑中所有交换机之间都配置为中继链路
MS1
Switch(config)#interface range fastEthernet 0/1-3
Switch(config-if-range)#switchport trunk encapsulation dot1q
Switch(config-if-range)#switchport mode trunk
MS2
Switch(config)#interface range fastEthernet 0/1-3
Switch(config-if-range)#switchport trunk encapsulation dot1q
Switch(config-if-range)#switchport mode trunk
Switch1
Switch(config)#interface range fastEthernet 0/1-2
Switch(config-if-range)#switchport mode trunk
Switch2
Switch(config)#interface range fastEthernet 0/1-2
Switch(config-if-range)#switchport mode trunk

3，在MS1中配置
Switch(config)#spanning-tree vlan 1 root primary 
Switch(config)#spanning-tree vlan 2 root secondary
4，在MS2中配置
Switch(config)#spanning-tree vlan 2 root primary 
Switch(config)#spanning-tree vlan 1 root secondary


练习4

本实验暂不考虑NAT问题。
1，为所有pc设备配置ip与网关，内网主机网关为192.168.1.254
                               外网主机网关为192.168.4.1
2，为所有网络设备配置接口的ip地址
路由器
Router(config)#interface gigabitEthernet 0/0
Router(config-if)#ip address 192.168.2.1 255.255.255.0
Router(config-if)#no shutdown
Router(config)#interface gigabitEthernet 0/1
Router(config-if)#ip address 192.168.3.1 255.255.255.0
Router(config-if)#no shutdown
Router(config)#interface gigabitEthernet 0/2
Router(config-if)#ip address 192.168.4.1 255.255.255.0
Router(config-if)#no shutdown

MS1
Switch(config)#interface fastEthernet 0/1
Switch(config-if)#no switchport 
Switch(config-if)#ip address 192.168.2.2 255.255.255.0
Switch(config)#interface vlan 1
Switch(config-if)#ip address 192.168.1.252 255.255.255.0
Switch(config-if)#no shutdown

MS2
Switch(config)#interface fastEthernet 0/1
Switch(config-if)#no switchport 
Switch(config-if)#ip address 192.168.3.2 255.255.255.0
Switch(config)#interface vlan 1
Switch(config-if)#ip address 192.168.1.253 255.255.255.0
Switch(config-if)#no shutdown

3，配置动态路由技术使全网互通
路由器
Router(config)#router ospf 1
Router(config-router)#network 192.168.4.0 0.0.0.255 area 0
Router(config-router)#network 192.168.3.0 0.0.0.255 area 0
Router(config-router)#network 192.168.2.0 0.0.0.255 area 0

MS1
Switch(config)#ip routing
Switch(config)#router ospf 1
Switch(config-router)#network 192.168.1.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.2.0 0.0.0.255 area 0

MS2
Switch(config)#ip routing
Switch(config)#router ospf 1
Switch(config-router)#network 192.168.1.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.3.0 0.0.0.255 area 0

4，在两台三层交换机中开启热备份功能，使用192.168.1.254作为
   虚拟路由器的地址，并由MS1承担活跃路由器。
MS1
Switch(config)#interface vlan 1
Switch(config-if)#standby 1 ip 192.168.1.254
Switch(config-if)#standby 1 priority 105

MS2
Switch(config)#interface vlan 1
Switch(config-if)#standby 1 ip 192.168.1.254


练习5

注意：此配置需要在练习4的基础之上进行

为三层交换机设置端口跟踪与占先权
MS1   //跟踪端口不可用时，HSRP优先级降低
Switch(config)#interface vlan 1
Switch(config-if)#standby 1 track fastEthernet 0/1
Switch(config-if)#standby 1 preempt

MS2
Switch(config)#interface vlan 1
Switch(config-if)#standby 1 preempt

断开MS1的F0/1接口验证效果。



练习6

注意：此实验需要在  练习3  的基础之上进行配置
1，先配置两台三层交换机的ip地址
MS1
Switch(config)#interface vlan 1
Switch(config-if)#ip address 192.168.1.252 255.255.255.0
Switch(config-if)#no shutdown
Switch(config)#interface vlan 2
Switch(config-if)#ip address 192.168.2.252 255.255.255.0

MS2
Switch(config)#interface vlan 1
Switch(config-if)#ip address 192.168.1.253 255.255.255.0
Switch(config-if)#no shutdown
Switch(config)#interface vlan 2
Switch(config-if)#ip address 192.168.2.253 255.255.255.0

2，开启热备份功能
MS1
Switch(config)#interface vlan 1
Switch(config-if)#standby 1 ip 192.168.1.254
Switch(config-if)#standby 1 priority 105
Switch(config-if)#standby 1 preempt

Switch(config)#interface vlan 2
Switch(config-if)#standby 2 ip 192.168.2.254
Switch(config-if)#standby 2 preempt

MS2
Switch(config)#interface vlan 1
Switch(config-if)#standby 1 ip 192.168.1.254
Switch(config-if)#standby 1 preempt

Switch(config)#interface vlan 2
Switch(config-if)#standby 2 ip 192.168.2.254
Switch(config-if)#standby 2 priority 105
Switch(config-if)#standby 2 preempt



======================================
NETWORK day6

二层交换机
分别创建VLAN10、20、30、40

sw1将f0/5接口加入vlan10
Switch(config)#interface fastEthernet 0/5
Switch(config-if)#switchport access vlan 10

sw2将f0/5接口加入vlan20
Switch(config)#interface fastEthernet 0/5
Switch(config-if)#switchport access vlan 20

sw3将f0/5接口加入vlan30
Switch(config)#interface fastEthernet 0/5
Switch(config-if)#switchport access vlan 30

sw4将f0/5接口加入vlan40
Switch(config)#interface fastEthernet 0/5
Switch(config-if)#switchport access vlan 40

每台设备捆绑以太通道，将f0/1与f0/2捆绑为通道1，f0/3与f0/4捆绑为通道2
Switch(config)#interface range f0/1-2
Switch(config-if-range)#channel-group 1 mode on 

Switch(config)#interface range f0/3-4
Switch(config-if-range)#channel-group 1 mode on 

查看以太通道汇总信息
Switch#show etherchannel summary

依次进入所有二层交换机的以太通道接口，配置中继链路
Switch(config)#interface port-channel 1
Switch(config-if)#switchport mode trunk

Switch(config)#interface port-channel 2
Switch(config-if)#switchport mode trunk
==========================================================
三层交换机
每台设备分别创建VLAN10、20、30、40

1-2口捆绑为通道1
3-4口捆绑为通道2
5-6口捆绑为通道3
7-8口捆绑为通道4
9-10口捆绑为通道5

依次进入三层交换机的4个通道接口，配置中继链路（两台三层交换机配置相同）
Switch(config)#interface port-channel 1 
Switch(config-if)# switchport trunk encapsulation dot1q
Switch(config-if)#switchport mode trunk

Switch(config)#interface port-channel 2
Switch(config-if)# switchport trunk encapsulation dot1q
Switch(config-if)#switchport mode trunk

Switch(config)#interface port-channel 3 
Switch(config-if)# switchport trunk encapsulation dot1q
Switch(config-if)#switchport mode trunk

Switch(config)#interface port-channel 4 
Switch(config-if)# switchport trunk encapsulation dot1q
Switch(config-if)#switchport mode trunk

Switch(config)#interface port-channel 5 
Switch(config-if)# switchport trunk encapsulation dot1q
Switch(config-if)#switchport mode trunk

配置三层交换机vlan10、20、30、40的ip地址
Switch(config)#interface vlan 10
Switch(config-if)#ip address 192.168.10.252 255.255.255.0

Switch(config)#interface vlan 20
Switch(config-if)#ip address 192.168.20.252 255.255.255.0

Switch(config)#interface vlan 30
Switch(config-if)#ip address 192.168.30.252 255.255.255.0

Switch(config)#interface vlan 40
Switch(config-if)#ip address 192.168.40.252 255.255.255.0

注意：另外一台三层交换机配置的ip地址是253
Switch(config)#interface vlan 10
Switch(config-if)#ip address 192.168.10.253 255.255.255.0

Switch(config)#interface vlan 20
Switch(config-if)#ip address 192.168.20.253 255.255.255.0

Switch(config)#interface vlan 30
Switch(config-if)#ip address 192.168.30.253 255.255.255.0

Switch(config)#interface vlan 40
Switch(config-if)#ip address 192.168.40.253 255.255.255.0

===========================================================
配置生成树协议，产生负载均衡效果。
MS1配置PVST+  使其成为vlan10、20的主根 vlan30、40的次根
Switch(config)#spanning-tree vlan 10 root primary 
Switch(config)#spanning-tree vlan 20 root primary 
Switch(config)#spanning-tree vlan 30 root secondary 
Switch(config)#spanning-tree vlan 40 root secondary 
MS2配置PVST+  使其成为vlan30、40的主根 vlan10、20的次根
Switch(config)#spanning-tree vlan 30 root primary 
Switch(config)#spanning-tree vlan 40 root primary 
Switch(config)#spanning-tree vlan 10 root secondary 
Switch(config)#spanning-tree vlan 20 root secondary 

配置热备份路由协议，完善负载均衡效果。
MS1配置HSRP  使其成为vlan10、20的活跃路由器 vlan30、40的备份路由器
Switch(config)#interface vlan 10
Switch(config-if)#standby 10 ip 192.168.10.254
Switch(config-if)#standby 10 priority 105
Switch(config-if)#standby 10 preempt 
Switch(config)#interface vlan 20
Switch(config-if)#standby 20 ip 192.168.20.254
Switch(config-if)#standby 20 priority 105
Switch(config-if)#standby 20 preempt
Switch(config)#interface vlan 30
Switch(config-if)#standby 30 ip 192.168.30.254
Switch(config)#interface vlan 40
Switch(config-if)#standby 40 ip 192.168.40.254
查看热备份状态
Switch#show standby brief

MS2配置HSRP  使其成为vlan30、40的活跃路由器 vlan10、20的备份路由器
Switch(config)#interface vlan 30
Switch(config-if)#standby 30 ip 192.168.30.254
Switch(config-if)#standby 30 priority 105
Switch(config-if)#standby 30 preempt 
Switch(config)#interface vlan 40
Switch(config-if)#standby 40 ip 192.168.40.254
Switch(config-if)#standby 40 priority 105
Switch(config-if)#standby 40 preempt
Switch(config)#interface vlan 10
Switch(config-if)#standby 10 ip 192.168.10.254
Switch(config)#interface vlan 20
Switch(config-if)#standby 20 ip 192.168.20.254

开启两台三层交换机的路由功能，并设置每个服务器所在vlan的网关
Switch(config)#ip routing

然后测试目前网络是否可以达成全网互通。
============================================================
按图为路由器与三层交换机相连的接口配置ip

配置动态路由协议，使所有内网互通。
在ms1中开启ospf动态路由，并宣告直连网段
Switch(config)#router ospf 1
Switch(config-router)#network 192.168.10.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.20.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.30.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.40.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.50.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.60.0 0.0.0.255 area 0
在ms2中开启ospf动态路由，并宣告直连网段
Switch(config)#router ospf 1
Switch(config-router)#network 192.168.10.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.20.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.30.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.40.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.70.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.80.0 0.0.0.255 area 0
在r1中开启ospf动态路由，并宣告直连网段
Router(config)#router ospf 1
Router(config-router)#network 192.168.50.0 0.0.0.255 area 0
Router(config-router)#network 192.168.70.0 0.0.0.255 area 0
在r2中开启ospf动态路由，并宣告直连网段
Router(config)#router ospf 1
Router(config-router)#network 192.168.60.0 0.0.0.255 area 0
Router(config-router)#network 192.168.80.0 0.0.0.255 area 0

查看所有三层设备路由表，应该是统一状态
show ip route

配置r1与r2的nat功能，使内网服务器40.1映射到外网100.0.0.3，并在接口中开启
Router(config)#ip nat inside source static 192.168.40.1 100.0.0.3
Router(config)#in g0/2
Router(config-if)#ip nat outside 
Router(config-if)#in range g0/0-1
Router(config-if-range)#ip nat inside 

在r1与r2中配置默认路由之后，使用ospf宣告自己是默认信息源（表示自己有通往外网的默认路由）
Router(config)#ip route 0.0.0.0 0.0.0.0 100.0.0.10
Router(config)#router ospf 1
Router(config-router)#default-information originate 

验证从外网可以访问内网的web服务。

======================================================
NETWORK day7


实验目的：通过使用常见网络协议配置上图拓扑结构，实现内网不同vlan的负载均衡与公网的正常访问。


首先配置4台交换机，均创建vlan10与vlan20
Switch>enable 
Switch#configure terminal 
Switch(config)#vlan 10
Switch(config-vlan)#vlan 20
其他3台均按上面命令配置。

二层交换机Sw1的配置
需要将f0/3口加入vlan10
Switch(config)#interface fastEthernet 0/3
Switch(config-if)#switchport access vlan 10
再进入f0/1口与f0/2口配置为中继链路
Switch(config)#interface range fastEthernet 0/1-2
Switch(config-if-range)#switchport mode trunk

二层交换机Sw2的配置
需要将f0/3口加入vlan20
Switch(config)#interface fastEthernet 0/3
Switch(config-if)#switchport access vlan 20
再进入f0/1口与f0/2口配置为中继链路
Switch(config)#interface range fastEthernet 0/1-2
Switch(config-if-range)#switchport mode trunk

三层交换机ms1的配置
为f0/4配置ip地址
Switch(config)#interface fastEthernet 0/4
Switch(config-if)#no switchport 
Switch(config-if)#ip address 192.168.1.2 255.255.255.0

为vlan10与vlan20配置ip地址
Switch(config)#interface vlan 10
Switch(config-if)#ip address 192.168.10.252 255.255.255.0
Switch(config)#interface vlan 20
Switch(config-if)#ip address 192.168.20.252 255.255.255.0

进入f0/1-3口配置为中继链路
Switch(config)#interface range fastEthernet 0/1-3
Switch(config-if-range)#switchport trunk encapsulation dot1q 
Switch(config-if-range)#switchport mode trunk

设置STP生成树协议的优先级使其称为vlan10的主根vlan20的次根
Switch(config)#spanning-tree vlan 10 root primary 
Switch(config)#spanning-tree vlan 20 root secondary

配置HSRP协议的虚拟路由器ip
Switch(config)#interface vlan 10
Switch(config-if)#standby 10 ip 192.168.10.254
Switch(config)#interface vlan 20
Switch(config-if)#standby 20 ip 192.168.20.254

使其称为vlan10的活跃路由器vlan20的备份路由器
Switch(config)#interface vlan 10
Switch(config-if)#standby 10 priority 105
Switch(config-if)#standby 10 preempt
Switch(config)#interface vlan 20
Switch(config-if)#standby 20 preempt
开启端口跟踪
Switch(config)#interface vlan 10
Switch(config-if)#standby 10 track fastEthernet 0/4

运行ospf动态路由
首先开启路由功能
Switch(config)#ip routing
Switch(config)#router ospf 1
Switch(config-router)#network 192.168.1.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.10.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.20.0 0.0.0.255 area 0
添加默认路由
Switch(config)#ip route 0.0.0.0 0.0.0.0 192.168.1.1


三层交换机ms2的配置
为f0/4配置ip地址
Switch(config)#interface fastEthernet 0/4
Switch(config-if)#no switchport 
Switch(config-if)#ip address 192.168.2.2 255.255.255.0

为vlan10与vlan20配置ip地址
Switch(config)#interface vlan 10
Switch(config-if)#ip address 192.168.10.253 255.255.255.0
Switch(config)#interface vlan 20
Switch(config-if)#ip address 192.168.20.253 255.255.255.0

进入f0/1-3口配置为中继链路
Switch(config)#interface range fastEthernet 0/1-3
Switch(config-if-range)#switchport trunk encapsulation dot1q 
Switch(config-if-range)#switchport mode trunk

设置STP生成树协议的优先级使其称为vlan20的主根vlan10的次根
Switch(config)#spanning-tree vlan 20 root primary 
Switch(config)#spanning-tree vlan 10 root secondary

配置HSRP协议的虚拟路由器ip
Switch(config)#interface vlan 10
Switch(config-if)#standby 10 ip 192.168.10.254
Switch(config)#interface vlan 20
Switch(config-if)#standby 20 ip 192.168.20.254

使其称为vlan10的活跃路由器vlan20的备份路由器
Switch(config)#interface vlan 20
Switch(config-if)#standby 20 priority 105
Switch(config-if)#standby 20 preempt
Switch(config)#interface vlan 10
Switch(config-if)#standby 10 preempt
开启端口跟踪
Switch(config)#interface vlan 20

Switch(config-if)#standby 20 track fastEthernet 0/4

运行ospf动态路由
首先开启路由功能
Switch(config)#ip routing
Switch(config)#router ospf 1
Switch(config-router)#network 192.168.2.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.10.0 0.0.0.255 area 0
Switch(config-router)#network 192.168.20.0 0.0.0.255 area 0
添加默认路由
Switch(config)#ip route 0.0.0.0 0.0.0.0 192.168.2.1


路由器配置
三个接口配置ip
Router(config)#interface g0/0
Router(config-if)#ip address 192.168.1.1 255.255.255.0
Router(config-if)#no shutdown
Router(config)#interface g0/1
Router(config-if)#ip address 192.168.2.1 255.255.255.0
Router(config-if)#no shutdown
Router(config)#interface g0/2
Router(config-if)#ip address 100.0.0.1 255.0.0.0
Router(config-if)#no shutdown

开启ospf
Router(config)#router ospf 1
Router(config-router)#network 192.168.1.0 0.0.0.255 area 0
Router(config-router)#network 192.168.2.0 0.0.0.255 area 0
开启nat功能
Router(config)#access-list 1 permit any 
Router(config)#ip nat inside source list 1 interface g0/2 overload
Router(config)#interface g0/2
Router(config-if)#ip nat outside
Router(config)#interface g0/0
Router(config-if)#ip nat inside
Router(config)#interface g0/1
Router(config-if)#ip nat inside


================================================
SHELL-DAY01


  曾 晔

Shell编程

DAY01  Shell基础、编写第一个Shell脚本、变量
DAY02  数值运算、条件测试、if选择结构（为脚本提供智能）
DAY03  循环控制（重复操作）、系统服务脚本、中断和退出
DAY04  字符串处理（系统指标提取）、扩展技巧、正则表达式
DAY05  sed文件处理（非交互的vim编辑器）
DAY06  awk文本过滤（类似于grep--行，但是要更强大--列）
DAY07  实战脚本编写


Linux运维 高薪 编程技能（Shell --》Python --》Java/C）
能更加有效率地执行管理任务（偷懒）


Shell语言：不支持小数、多线程不方便
Python语言：支持小数运算、网络编程等高级应用，支持多线程

     比如：巡检脚本查100台服务器，挨个查；多线程执行可同时查

Bash Shell环境的一些特点 ——
常用的快捷键：
Ctrl  w、Esc  . 、Ctrl  a、Ctrl  e
Tab键自动补全（命令名、路径、选项、软件名、系统服务名、……）

命令别名：
alias   别名='实际执行的命令行' 	==》/etc/bashrc

历史命令的记录数量：
/etc/profile 		==》适用于所有用户
~/.bash_profile		==》适用于选中的用户

     HISTSIZE=1000

重定向输入：
命令行   <  文件

重定向标准输出：
命令行   >  文件

重定向标准错误：
命令行   2>  文件


分别重定向标准输出、标准错误：
命令行   > 文件A   2>  文件B

合并重定向标准输出、标准错误：
命令行   &> 文件C


创建脚本的过程：
1.建文件
2.添加可执行语句（正常完成XX任务的命令行组合）
3.设置x权限 

执行脚本的方式：
方式1：脚本程序的绝对路径，或相对路径（不能省略文件所在位置）
      脚本程序独立运行
方式2：命令解释器    脚本文件
      脚本程序被其他解释器加载再执行

任务需求 ——
1. 已知软件仓库位于：
http://classroom/content/rhel7.0/x86_64/dvd/
2. 编写一个脚本，执行此脚本后能为server0快速配置yum源

清理旧配置：
rm  -rf  /etc/yum.repos.d/*.repo
添加新配置：
echo '[rhel7]
name=Red hat Enterprise 7.0
baseurl=http://classroom.example.com/content/rhel7.0/x86_64/dvd/
gpgcheck=0' > /etc/yum.repos.d/rhel7.repo


任务需求 —— 
0. 前提条件：已正确配置好yum
1. 为当前主机快速搭建并启用FTP服务器
2. 当匿名访问此FTP服务器时可以下载 fstab.txt

正常部署FTP的命令行操作：
1）装包 vsftpd
yum  -y  install  vsftpd
2）配置（准备下载资源）
cp  /etc/fstab  /var/ftp/fstab.txt
3）开启服务
systemctl  restart  vsftpd
systemctl  enable  vsftpd



# vim  xxxx
.. .. 可执行语句
# chmod  +x  xxxx


编写一个脚本、编写一个好脚本的难点 ——
任何如何实现（命令行操作）？
命令行的顺序？
如何用更少的命令、更快的命令？（变量、字符传处理、控制结构）


任务需求：
1）创建一个新变量，名称为 var1，值为 CentOS
# var1=CentOS
2）显示变量var1的内容
# echo  $var1
3）新建一个文件，文件名称来自于变量var1的值，扩展名为.txt
# touch  ${var1}.txt
4）查看环境变量USER、HOME、PATH的值
# echo  $USER   $HOME  $PATH
5）把 first.sh 复制到 /usr/local/bin 目录下，名称为hello
# cp  first.sh  /usr/local/bin
6）直接执行 hello 命令
# hello


$?：反馈前一条命令的返回状态值（0、非0）
$#：

位置变量： 跟在脚本后面提供的参数
    $1  第一个参数、$2 第二个参数、……
    ${10}

任务需求：# myuseradd  用户名
1. 编写一个添加用户账号的脚本 /usr/sbin/myuseradd
2. 执行此脚本时可以提供用户名做参数，执行完成后能够自动添加此用户，并且把登录密码设置为 1234567


#!/bin/bash
useradd  $1
echo  1234567  | passwd  --stdin  $1

任务需求：# myuseradd  用户名  密码
1. 编写一个添加用户账号的脚本 /usr/sbin/myuseradd
2. 执行此脚本时可以提供2个参数，其中第一个参数作为用户名，第二个作为密码，添加相应的用户账号

#!/bin/bash
useradd  $1
echo  $2  | passwd  --stdin  $1


任务需求： ./location.sh  a b c d e f g h j k l m n
#!/bin/bash
echo 当前的脚本路径和名称是 $0
echo 第1个参数是  $1
echo 第3个参数是  $3
echo 第10个参数是  ${10}
echo 你一共提供了$#  个参数
echo 你提供的所有参数是：
echo  $*


进程和进程间的关系
pstree




变量的生效范围：默认只在当前命令行环境
    黄药师（玉箫），不给欧阳锋用，不给黄蓉

如果黄药师希望黄蓉也能使用这把玉箫
export  玉箫

任务需求：控制变量的作用范围
1）在当前环境（黄药师）定义新变量 cjb=玉箫
2）新打开bash进程（黄蓉），查看变量 cjb 的值，然后exit退出
     看不到
3）在原环境（黄药师）使用export输出变量cjb
# export  cjb
4）再次打开bash进程（黄蓉），查看变量 cjb 的值，然后exit退出
     看到

问题：欧阳锋无法使用cjb

任务需求：
1. 定义一个所有用户都能使用的变量 KLING="天王盖地虎"
2. 每个用户登录时，能看到欢迎信息"Welcome XXXX"

实现方法：在所有用户登录login之前定义
# vim  /etc/profile  		//环境变量配置文件  
.. ..
export    KLING="天王盖地虎"
echo    "Welcome XXXX"
# su  -  student
.. ..
Welcome  student 			//显示欢迎信息 
$ echo  $KLING
天王盖地虎


使用 su  -  用户名  命令时



read命令，提示用户从键盘输入一个字符串并且保存到指定的变量
比较时编写交互式的脚本

任务需求：（脚本改造）
# myuseradd  用户名  密码
== 改造为 ==》
# myuseradd
需要添加的用户名是: 
需要设置的登录密码是: 

#!/bin/bash
read  -p "需要添加的用户名是: "   username 
read  -p "需要设置的登录密码是: "   password
useradd  $username
echo $password | passwd  --stdin  $username


任务需求：
1. 编写一个模拟登录脚本 login.sh
2. 根据提示输入密码时不显示
3. 把用户提供的用户名和密码记录到一个文件/tmp/rec.txt 内

#!/bin/bash
read  -p 'login: '  username
stty  -echo
read  -p 'pasword: '  password
stty  echo
echo  "你的登录名是 $username
你的密码是 $password"  >>  /tmp/rec.txt


命令替换：
# 命令行1  $(命令2)


获取当前的年月日的操作：
date +%F

!!!! 在crotab计划任务记录里，% 表示 注释


小结：
1）Shell基础概念
2）编写一个脚本的基本过程
3）Shell变量的使用（分类、定义/赋值/引用、read、export）


任务需求：
1. 使用tar备份 /home 目录，保存到 /opt/当前日期.tar.gz
2. 这个备份操作每3天执行一次

# vim  /root/homebak.sh
tar  -zcPf  /opt/$(date +%F).tar.gz   /home
# chmod +x /root/homebak.sh

# crontab  -e
0  0  */3  *  *  /root/homebak.sh

=================================================
SHELL day2


回顾：
1）Shell概述（种类、历史命令、输入输出、重定向、管道）
更改用户历史命令的数量：
# vim  /etc/profile
.. ..
HISTSIZE=1000
export  变量名=值

重定向操作：
< 、>、2>、&>、>>
屏蔽命令行输出/结果：
&>  /dev/null 

管道操作：
命令1 | 命令2 | 命令3

请思考：统计当前系统中使用/bin/bash的用户数量？
# grep  '/bin/bash'  /etc/passwd  |  wc  -l
或者
# grep  -c  '/bin/bash'  /etc/passwd

为什么要用脚本？
—— 偷懒（更简单、速度更快）

评估一条命令的执行时间：
# time  命令行

2）编写和执行Shell脚本
编写一个新文件
==》 整理脚本语句
方式1：按顺序编写任务实现命令
方式2：使用变量、循环/判断等控制接口来简化脚本
==》 添加x权限

3）Shell变量
自定义变量：
     变量名=变量值
     $变量名
   echo  $变量名
环境变量（env）：
   PATH、PWD、USER、UID、HOME、SHELL、PS1、……
位置变量/参数：
      $1、$2、……、${10}、……
预定义变量：
      $0、$#、$*、$?

任务需求：
1. 识别当前主机中是否存在用户 ldapuser0
# id  ldapuser0
# echo  $?
2. 识别当前系统是否是64位的
# lscpu | grep x86_64
# echo  $?

export  变量1名=值  变量2名=值 ......
export  变量1名   变量2名 .. .. 

read  -p  '提示信息'  变量1名  变量2名

双引号、单引号、反撇号或$()

脚本创建思路：
==》 整理脚本语句
按顺序编写任务实现命令
==》 添加x权限

任务需求：
在server0上编写脚本 rhce_demo.sh，执行脚本后能完成以下任务
1. 自动部署好 Web 服务器
    网页来自 http://classroom/pub/materials/station.html
2. 自动调整好防火墙策略
    禁止网段172.34.0.0/24访问
    允许其他任何客户机访问
    实现端口转发 5423 ==> 80

验证脚本运行结果：
浏览器访问 http://server0.example.com:5423/


#!/bin/bash
#1. 自动部署好 Web 服务器
#    网页来自 http://classroom/pub/materials/station.html
yum  -y  install  httpd
wget  http://classroom/pub/materials/station.html  -O /var/www/html/index.html
systemctl  restart  httpd
systemctl  enable  httpd

#2. 自动调整好防火墙策略
#    禁止网段172.34.0.0/24访问
#    允许其他任何客户机访问
#    实现端口转发 5423 ==> 80
systemctl  restart  firewalld
systemctl  enable  firewalld
firewall-cmd  --set-default-zone=trusted
firewall-cmd  --permanent  --add-source=172.34.0.0/24  --zone=block
firewall-cmd  --permanent --zone=trusted  --add-forward-port=port=5423:proto=tcp:toport=80 
firewall-cmd  --reload


今日目标：
1）学会使用各种测试命令识别系统指标
2）通过if语句使脚本具备基本的判断能力
3）数值运算
Bash环境默认不支持小数运算


运算操作 ——
expr  数学表达式  ==》计算表达式并且显示结果
$[数学表达式]  ==》计算表达式并调用结果
取余数 ——
expr  整数1  %  整数2

特殊变量RANDOM，随机获得一个整数值 0~32767

任务需求：
1. 设置一个变量 X=12
2. 使用 expr 计算变量X的值 与 整数 5 的加减乘除余的结果
3. 使用 $[] 计算变量X的值 与 整数 5 的加减乘除余的结果
4. 利用随机整数变量RANDOM，通过运算获取一个1～33之间的整数
# echo  $[RANDOM%33+1]


福利彩票摇号 
CISHU=1


修改变量的值：
let   变量名++


小数运算
echo  "表达式"  |  bc

任务需求：
1. 定义两个变量 X=1234，Y=56.78
# X=1234
# Y=56.78
2. 使用let命令使变量X的值减小100，
# let  X-=100
3. 使用let命令使变量X的值增加1
# let  X++
4. 使用bc计算器计算出变量X减去Y的结果
# echo "$X-$Y"  | bc


检查用户ldapuser0是否存在？
# id  ldapuser0  &>  /dev/null
# ehco  $?

&&  而且
||  或者

代码简化 ==》
# id  ldapuser0  &>  /dev/null  &&  ehco  yes  ||  echo  no

任务需求：
1）识别目标主机 172.25.0.254 的连通性，能通 yes，否则 no
# ping  -c  4 172.25.0.254  &> /dev/null  &&  echo  yes ||  echo no
2）识别目标网站 http://server0.example.com/ 可用性，能访问 yes，否则 no
# wget http://server0.example.com/ &> /dev/null &&  echo  yes ||  echo no



逻辑测试 -- 逻辑与（而且）：
命令1  &&  命令2
比方：要吃就吃好
有酒  &&  有菜  && 有主食

逻辑测试 -- 逻辑或（或者）：
命令1  ||  命令2
比方：只要吃饱
米饭 ||  馒头



检查XX指标的操作 &&  命令A ||命令B
==》如果检查操作成功，那么执行命令A
==》否则，执行命令B


任务需求：
检查 httpd 进程是否在运行，是则 running，否则 halted

# pgrep  -x  httpd  &> /dev/null  &&  echo  running  ||  echo  halted



如何进行条件测试 —— 识别系统环境中的一些参数
方式1：任何一条命令行
方式2：
    test  -选项   参数
    test  参数1   -选项   参数2
       [    -选项   参数   ] 
       [    参数1   -选项   参数2   ] 

任务需求：
1）检查当前用户是否是root，是则显示"大王万岁"，否则显示"小朋友你好"
# [ $USER == "root" ]   &&  echo  "大王万岁"  ||   echo  "小朋友你好"
2）检查当前登录的用户数量，如果不超过5个，那么显示OK
# [ $(who | wc -l) -le  5 ]  &&  echo  OK
3）检查当前运行的进程数量，如果超过100，发一封邮件给root
# [  $(pgrep  . |wc -l) -gt  100 ]  &&  echo "进程数太多"  | mail  -s  "服务监控警告"  root
4）检查 /media/cdrom 目录是否存在，报告结果
# [ -d  /media/cdrom ]  &&  echo yes  ||  echo  no




检查XX指标的操作 &&  命令A || 命令B
面临的问题：
   当需要执行的命令不止一条命令时，命令A、AA、AAA、AAAA
解决办法：
检查XX指标的操作 &&  命令A  &&  命令AA  && 命令AAA  &&  命令AAAA || 命令B

推荐使用 if 判断结构


如果  车子、房子、票子
那么
	下手
结束

if单分支结构，只需要一种处理

if  条件检测----车子、房子、票子
then
	处理XX事情的命令行操作....
fi

任务需求：使用if判断结构编写脚本，完成下列操作
1）检查当前运行的进程数量，如果超过100，发一封邮件给root
#!/bin/bash
if  [  $(pgrep  . |wc -l) -gt  100 ]
then
	echo "进程数太多"  | mail  -s  "服务监控警告"  root	
fi

2）检查 /media/cdrom 目录是否存在，若不存在，则创建此目录
#!/bin/bash
if  [ ! -d  /media/cdrom ]
then
	mkdir  -p  /media/cdrom
fi



if双分支结构，只需要两种不同处理

if  条件检测
then
	做第一种处理操作....
else
	做第二种处理
fi

任务需求：编写一个脚本，用来检查目标主机（由$1提供）的连通性
1）如果目标主机能ping通，显示 Host XXX is up
2）如果目标主机不能ping通，显示 Host XXX is down
3）如果执行脚本时未指定目标地址，那么显示正确的用法，退出脚本
#!/bin/bash
if  [ $#  -eq  0 ]
then
	echo  "用法: $0  目标主机地址"
	exit  1
fi
if  ping  -c3  -i0.2 -W1  $1  &> /dev/null
then
        echo  "Host  $1  is up"
else
        echo  "Host  $1 is down"
fi


if多分支结构，只需要三种或三种不同处理
if  条件检测1
then
	做第一种处理操作....
elif  条件检测2
then
	做第二种处理
else
	做第三种处理
fi





区分用户的论坛京豆等级（钻石plus、钻石、金牌、……）
成绩分档（超过90 优秀，70～90 良好，70以下 不合格）


任务需求：石头剪刀布
1）编写一个出拳脚本 chuquan.sh
2）执行此脚本以后，随机显示 石头、剪刀、布 当中某一个

#!/bin/bash
N=$[RANDOM%3+1]
if  [ $N -eq 1 ]
then
        echo  "石头"
elif  [ $N  -eq  2  ]
then
        echo  "剪刀"
else
        echo  "布"
fi

任务需求：石头剪刀布
1）编写一个猜拳脚本 chuquan.sh
2）对比用户、计算机的出拳结果，并显示输赢情况

实现思路：
#1）取得用户出拳结果（$1）
#2）取得计算机出拳结果
#3）对比两个结果，并且显示输、赢、平情况




如何判断多个条件？

if   [[ 条件a  && 条件b ]]  ||  [[ 条件测试2  ]]  ||  [[ 条件测试2  ]]

if   [[ 用户==石头  && 计算机==剪刀  ]]  ||  [[ 用户==剪刀 && 计算机==布  ]] ||  [[ 用户==布  &&  计算机==石头  ]] 



#!/bin/bash
#1）取得用户出拳结果（$1）
yonghu="$1"
#2）取得计算机出拳结果
N=$[RANDOM%3+1]
if  [ $N -eq 1 ]
then
        jisuanji="石头"
elif  [ $N  -eq  2  ]
then
        jisuanji="剪刀"
else
        jisuanji="布"
fi
#3）对比两个结果，并且显示输赢情况
if [ $yonghu == $jisuanji  ] 
then
	echo  平局
elif  [[ $yonghu == "石头"  && $jisuanji == "剪刀" ]]  ||  [[ $yonghu == "剪刀" &&  $jisuanji == "布"  ]] ||  [[ $yonghu == "布"  &&  $jisuanji == "石头" ]]
then
	echo  你赢了
else
	echo  你输了
fi


总结：
1. 数值运算（加减乘除余的$[]、let控制变量值）
2. 条件测试（字符串、整数值、文件状态）
3.if选择结构（单分支、双分支 > 多分支）
    参考案例里"论坛积分分档"

=========================================
SHELL day3


回顾：
1）数值运算（整数、小数）
expr  整数值1    运算符    整数值2
$[整数值1  运算符  整数值2]
let  变量名++、let  变量名--、let  变量名+=2
echo  "数值1  运算符  数值2" | bc
2）条件测试操作
判断依据：$? 	==》0 成功，非0 失败
测试操作的形式：任何一条命令、test或[  ]

test操作常用选项：
文件状态测试：-e、-d、-f、-x、-w、-r
整数值比较：-gt、-ge、-eq、-ne、-lt、-le
	!!!! greater、lesser、equal、not、than
字符串比较：== 或 = 、!=
逻辑分隔：&&、||
多个条件的组合：
    [[ 条件1  &&  条件2 ]]  ||  [[ 条件3  ]]
    [ 条件1   -a  条件2 ]  ||  [[ 条件3  ]]
3）if判断结构
简单的判断结构（只需要做一种处理） ——
如果 XXXX 那么 YYYY
方式1：
XXXX操作  &&  YYYY操作
方式2：
if  XXXX操作
then
	YYYY操作
fi

常见的判断结构（需要根据条件分别做两种不同处理） ——
如果 XXXX 那么 YYYY 否则 ZZZZ
方式1：
XXXX操作  &&  YYYY操作  ||  ZZZZ操作
方式2：
if  XXXX操作
then
	YYYY操作
else
	ZZZZ操作
fi

复杂的判断结构（需要根据多个条件分别做多种不同处理） ——
如果 XX1 那么 YYYY 否则再如果 XX2 再那么 ZZZZ 否则 AAAA
if  XX1操作
then
	YYYY操作
elif  XX2操作
then
	ZZZZ操作
else
	AAAA操作
fi

分号的作用：分隔前后两条命令


任务需求：编写一个脚本chweb.sh，检查目标网址的Web服务可用性
1）服务器地址从命令行提供（$1）
2）期望的网页/.tz.html，内容为"TEDU.CN"
3）如果检测成功，显示"passed"
4）如果检测失败，显示"failed"

#!/bin/bash
A=$(wget  http://$1/.tz.html  -O  -  2>/dev/null)
if  [ "$A" == "TEDU.CN" ]
then
        echo  "passed"
else
        echo  "failed"
fi


针对业务系统（比如多台Web服务器）的巡检：
提前准备一个探针网页
比如，检测 http://server0.example.com 是否可用
提前在网页目录下准备一个网页 .tz.html
如果能下载 http://server0.example.com/.tz.html 网页，而且内容是对的



Shell输出颜色控制：

文字颜色30-37：
echo -e "\033[30m 黑色字 \033[0m" 
echo -e "\033[31m 红色字 \033[0m" 
echo -e "\033[32m 绿色字 \033[0m" 
echo -e "\033[33m 黄色字 \033[0m" 
echo -e "\033[34m 蓝色字 \033[0m" 
echo -e "\033[35m 紫色字 \033[0m" 
echo -e "\033[36m 天蓝字 \033[0m" 
echo -e "\033[37m 白色字 \033[0m"

背景颜色40-47
echo -e "\033[40;37m 黑底白字 \033[0m" 
echo -e "\033[41;37m 红底白字 \033[0m" 
echo -e "\033[42;37m 绿底白字 \033[0m" 
echo -e "\033[43;37m 黄底白字 \033[0m" 
echo -e "\033[44;37m 蓝底白字 \033[0m" 
echo -e "\033[45;37m 紫底白字 \033[0m" 
echo -e "\033[46;37m 天蓝底白字 \033[0m" 
echo -e "\033[47;30m 白底黑字 \033[0m"


末尾控制选项：
\33[0m 关闭所有属性
\33[1m 设置高亮度 
\33[4m 下划线 
\33[5m 闪烁 
\33[7m 反显 
\33[8m 消隐 
\33[30m — \33[37m 设置前景色 
\33[40m — \33[47m 设置背景色 
\33[nA 光标上移n行 
\33[nB 光标下移n行 
\33[nC 光标右移n行 
\33[nD 光标左移n行 
\33[y;xH设置光标位置 
\33[2J 清屏 
\33[K 清除从光标到行尾的内容 
\33[s 保存光标位置 
\33[u 恢复光标位置 
\33[?25l 隐藏光标 
\33[?25h 显示光标

for列表式循环
==》 针对一个列表中的多个值，重复执行类似的处理操作


类似场景：
去银行办业务、火车站买票、义务献血车

for  第一个献血人  in  张三   李四   王五  .. ..
do
	为 $第一个献血人 执行 采血操作
done

任务需求：
1）编写一个脚本chkhosts.sh，用于机房巡检
2）巡检项为检查XX机房内的一批服务器IP地址是否能ping通
     比如：172.25.0.10、172.25.0.11、172.25.0.12

for  IP地址  in  IP1  IP2 .. ..
do
	ping命令检查并输出结果
done




#!/bin/bash
for  ip  in  10 11 12
do
    ping  -c3  -i0.2 -W1  172.25.0.$ip  &> /dev/null
	if [ $?  -eq  0 ] 
    then
	    echo  "Host  $ip  is up"
    else
        echo  "Host  $ip is down"
    fi
done

如何为for循环提供值的队列 ——
1）直接给出，以空格分隔
2）提取命令行的显示结果  $(命令行)
      用户提供的参数指定的一个文件 $(cat  $1)
3）提取通配符匹配的结果 /home/*
4）通过命令获取一组整数  {1..20}  或者  $(seq  20)
     1 2 3 4 。。。 20

任务需求：使用for循环
1）统计 /home/ 目录下每个用户家目录占用的空间大小
2）分别备份每个用户的家目录，存储到 /opt/目录名.tar.gz 

#!/bin/bash
for  mulu  in  /home/*
do
	du  -sh  $mulu
	tar  -zcPf  /opt/$(basename $mulu).tar.gz  $mulu
done

!!!! 补充：获取一个路径的基本名称
# basename  文档路径


任务需求：编写模拟双色球摇号脚本 yaohao.sh
1）依次显示6个随机的红球号码 
2）最后显示1个随机的蓝球/特别号码


!!!! 随机整数 $[RANDOM%33+1]
!!!! 次数控制 for  i  in  {1..6} .. ..
!!!! 等待时间控制 sleep 3

#!/bin/bash
#1）依次显示6个随机的红球号码 
echo  -n "红色号码："
for  i  in  {1..6}
do
    sleep 3
    echo  -n "$[RANDOM%33+1]  "
done
echo
#2）最后显示1个随机的蓝球/特别号码
echo  "特别号码: $[RANDOM%33+1]"


现有的问题：有重复的号码



while条件式循环
当 XXXX 的时候，反复执行YYYY操作

while  XXXX条件测试操作
do
	YYYY操作
done

#!/bin/bash
while  [ 1  -gt  0 ]
do
	echo  Hello
done

永久成立的条件：
[ 1  -gt  0 ]
或
true
或
:

比如：使用while语句模拟摇号
依次显示6个红色球的号码

i=1 				//记录第几次摇号
while  [ $i  -le 6 ]
do
    sleep 3
    echo  -n "$[RANDOM%33+1]   "
    let i++
done

任务需求：编写一个添加用户的脚本 uad.sh
1）添加10个用户账号，用户的名称分别是 tuser1、tuser2、……
2）这10个用户账号的密码都设置为 1234567

i=1
while  已经添加的用户数不超过10个时
do
	添加用户 tuser$i 并设置密码
	i的值增加1
done

#!/bin/bash
i=1
while  [ $i  -le  10 ]
do
    useradd  tuser$i
    echo  1234567  |  passwd  --stdin  tuser$i  &>/dev/null
    let  i++
done


任务需求：猜商品价格的游戏脚本 price.sh
1）随机生成一个1～500商品价格，并且提示用户
2）用户有机会反复猜测价格
3）如果用户猜的价格比商品价格低，显示"太低了"，继续让用户猜
4）如果用户猜的价格比商品价格高，显示"太高了"，继续让用户猜
5）当用户猜对价格的时候，显示"恭喜你答对了"，并提示用户一共猜了多少次，并退出脚本

!!!! 商品价格  jiage1=$[RANDOM%500+1]
!!!! 使用 while  read -p "请给出你猜测的价格："  jiage2
!!!! 记录猜测次数 num，每猜完一次 let num++
!!!! 三分支if结构
     猜高了，。。。
     猜低了，。。。
     猜对了（退出条件）   $jiage1 == $jaige2

#!/bin/bash
jiage1=$[RANDOM%500+1]
num=0
while  read -p "请给出你猜测的价格(1~500)："  jiage2
do
    let  num++
    if   [  "$jiage2" -gt "$jiage1" ] ; then
        echo "高了"
    elif [ "$jiage2"  -lt  "$jiage1" ]  ; then
        echo  "低了"
    else
        echo  "恭喜你猜对了，商品价格是 $jiage2"
        echo  "你一共猜了 $num 次."
        exit 0
    fi
done

常见问题：
    当脚本/root/a.sh中有 exit 0
    通过 .   a.sh 执行脚本，结果退出了当前的命令行中断
原因：
  /root/a.sh执行时，在单独的Bash环境运行
  .   a.sh执行时，在当前Bash环境运行


脚本的中断和退出 ——
break  ==》彩票中大奖了，辞职（放弃所在的整个循环）
continue ==》老婆生孩子，临时请假（跳出本次循环，继续下一次循环）
exit ==》退出整个脚本

while  ture
do
    命令1（摇号）
    命令2（检查是否重复）
  continue
    命令3
  break
    命令4
done
命令5（退出脚本前显示XX信息）
exit 1
命令6

任务需求：解决双色球摇号脚本重号的问题

实现思路：
1）存储已经摇出的号码
每次摇出的号码 RED=$[RANDOM%33+1]
已经摇出的全部号码 var1="$var1 $RED"
2）对比新摇出的号码是否已经出现过
echo  $var1 | grep  -qw  $RED
3）如果重复，跳出本次循环，重新摇号
if  第2）步成立，应该 continue

#!/bin/bash
#1）依次显示6个随机的红球号码 
echo  -n "红色号码："
i=1
while  [ $i  -le 6 ]
do
    sleep 3
# 摇出新的号码
    RED=$[RANDOM%33+1]
# 检查号码是否重复，如果重复，重新摇号
    echo  "$var1" | grep  -qw  "$RED"  && continue
# 显示出不重复的号码
    echo -n "$RED "
# 添加不重复的号码到 var1
    var1="$var1 $RED"
    let i++
done
echo
#2）最后显示1个随机的蓝球/特别号码
echo  "特别号码: $[RANDOM%33+1]"


Shell函数，相当于脚本内的脚本/内部命令
—— 为需要频繁调用的一批代码定义一个简短的名称（函数）

任务需求：
1）编写一个脚本 color.sh
2）在脚本内定义一个函数 cecho
3）在脚本内执行 cecho  32m  "passwd" 可以显示绿色字串
3）在脚本内执行 cecho  31m  "failed" 可以显示绿色字串

#!/bin/bash
cecho() {
    echo -e "\033[$1 $2 \033[0m"
}
cecho   32m   "passed"
cecho   31m   "failed"


case分支，情况
针对 XX 参数等于不同的结果时候，分别做不同处理

case  "$交通信号灯颜色"  in  
红色)
	停
	;;
绿色)
	行
	;;
黄色)
	慢行
	;;
*)
	听交警指挥
esac


任务需求：
1）改写chuquan.sh脚本，随机生成1～3之间的随机数，根据结果分别显示 石头、剪刀、布
2）改写 foo.sh 脚本，给 redhat显示fedora，给fedora显示redhat，如果都不是显示用法
3）编写一个 /sbin/webctl脚本，能支持参数 start|stop|status|restart，如果给的参数不是这些，提示正确用法

!!!! 提示
start)
   systemctl  start  httpd
     ;;
restart)
   $0  stop
   $0  start
      ;;





#!/bin/bash
quantou=$[RANDOM%3+1]
case  "$quantou"  in  
1)
	echo  "石头"
	;;
2)
	echo  "剪刀"
	;;
3)
	echo  "布"
	;;
*)
	echo  "犯规"
esac



#!/bin/bash
case  "$1"  in  
redhat)
	echo fedora
	;;
fedora)
	echo redhat
	;;
*)
	echo "Usage:$0 redhat|fedora"
esac

===================================================
SHELL day4


回顾：
1）循环结构
—— for列表式循环
for  变量名   in  值1  值2 .. ..
do
	针对 $变量名 处理操作
done

for ((i=1;i<=10;i++))
do
	。。 。。
done


—— while条件式循环 			【until】
while  满足XX条件时
do
	处理操作命令...
done

i=1
while  变量i的值满足XX条件时
do
	处理操作命令...
	let  i++
done

2）case分支 —— 在变量值等于不同的情况时做不同操作
case  变量值  in
值1)
      命令操作1 .. ..
      ;;
值2)
      命令操作2 .. ..
      ;;
*)
     默认的命令操作
esac

3）Shell函数 —— 就是使用固定的名称来存放一批命令行
变量、命令别名、脚本、函数/内部命令

函数名() {
	命令操作1
	命令操作2  $1
	.. ..
}
函数名 
函数名  参数1  参数2

4）脚本的中断和退出
exit 退出值 —— 直接放弃剩余的所有操作，直接退出脚本
continue —— 放弃本次循环剩余的操作，继续下一次循环
break —— 放弃整个循环，继续执行done之后的操作


任务需求：编写一个机房巡检脚本 chkidc.sh
1）脚本在执行时需要提供一个文件作参数，这个文件内包含需要被检查的服务器IP地址列表
2）如果没有提供参数，应该提示正确用法，并退出脚本
3）正常操作为检查列表中每一台主机是否存活（ping通），只列出不存活的主机IP

!!!! 位置参数 # ./chkidc.sh  idc1.txt
!!!! 提前 if 检查是否给参数，。。。。 exit
!!!! 使用for循环去取得文件内的每一个IP地址，通过 ping 检查
!!!! 如果能通 continue，否则列出不通的主机地址


#!/bin/bash
if  [ $#  -eq  0 ]
then
    echo  "Usage:$0  <IP_LIST_FILE>"
    exit 1
fi
echo "以下服务器已失联："
for  ip  in  $(cat  $1)
do
    if  ping  -c3 -i0.2  -W1  $ip  &> /dev/null
    then
        continue
    else
        echo $ip
    fi
done


今日目标：
1）字符串处理（系统指标提取/生成/配置内容替换）
2）扩展脚本技巧（Shell数组、expect交互登录）
3）正则表达式（用特殊的符号来表示不确定的字符串）


pgrep  .


任务需求：
1）提取/etc/selinux/config文件的 ^SELINUX= 行保存到变量 A
2）用三种不同方法截取变量A的前7个字符、=号之后的所有字符

# A=$(grep  ^SELINUX=  /etc/selinux/config)

云服务器（虚拟机）的虚拟网卡的地址

任务需求：
1）生成一个随机的8位密码字串
# uuidgen | cut  -b -8
2）编写脚本 /sbin/macgen，执行此命令后能生成一个mac地址，这个mac地址的前3组为 52:54:00，后3组要随机生成

echo  "52:54:00:xx:yy:zz"

#!/bin/bash
echo  "52:54:00:$(uuidgen |cut -b -2):$(uuidgen |cut -b -2):$(uuidgen |cut -b -2)"

字符串拼接方式：
#!/bin/bash
XX="52:54:00"
for i in 1 2 3
do
    XX="$XX:$(uuidgen | cut -b -2)"
done
echo $XX



路径分割：
dirname  文档路径 	—— 取得文档的存放位置
basename   文档路径 	—— 取得文档的基本名称

vim编辑器的末行替换操作
:s /old/new/
:s /old/new/g

字串替换：
${var/old/new}
${var//old/new}


键盘上 # 在 % 左边
字串砍头：
${var#*关键词}
${var##*关键词}  		【贪婪模式】
字串剁脚：
${var%关键词*}
${var%%关键词*}  		【贪婪模式】

任务需求：
1）提取server0上Web服务的网页目录配置，保存到变量webroot
# webroot=$(grep ^DocumentRoot /etc/httpd/conf/httpd.conf)
2）采用剁脚方式处理变量webroot，把网页目录改成 /tedu
# echo "${webroot%% *} /tedu"
3）采用字串替换方式处理变量webroot，把网页目录改成 /tedu
# echo ${webroot/"/var/www/html"/"/tedu"}
4）采用砍头方式处理变量webroot，只保留目录部分
# echo ${webroot#* }
5）编写脚本ren1.sh，将当前目录下的 .txt文件的扩展名改为 .text
6）编写脚本ren2.sh，将当前目录下的 .text文件的扩展名改为 .txt
#!/bin/bash
for FILE  in  *.text
do
    mv  $FILE  ${FILE%.text*}.txt
done

7）编写脚本ren3.sh，将当前目录下的 $1 文件的扩展名改为 $2
#!/bin/bash
for FILE  in  *$1
do
    mv  $FILE  ${FILE%$1*}$2
done


Shell变量的初始值
${var:=初始值}

任务需求：
1）编写一个脚本，计算从1～x之间所有整数的和
2）x的值由脚本在运行时提示用户输入，若未输入则默认取值为 1

#!/bin/bash
read  -p  "Input an integer: "  x
while  [  "${i:=1}" -le  "${x:=1}"  ]
do
    let sum+=$i
    let i++
done
echo "sum=$sum"

变量：使用一个固定的名称来存放一个变化的值
数组：使用一个固定的名称来存放多个变化的值


星期袜/裤 —— 
    周一   ==》 红色
    周二   ==》 橙色
    .. ..
    周日  ==》 紫色

定义数组：星期袜=(红色  橙色  .. ..  紫色)
调用数组元素：echo  ${星期袜[0]}、echo  ${星期袜[1]}

任务需求：
改写 chuquan.sh 脚本，利用数组简化代码
#!/bin/bash
quan=(石头  剪刀  布)
echo  ${quan[$[RANDOM%3]]}


获取一个数组的元素的个数：
echo  ${#数组名[@]}

获取一个变量的字符个数：
echo  ${#变量名}
echo  ${#数组名[0]}



expect预期交互 ——



<< 操作，用来指定一段文档的起始和结束标记

命令行 << EOF
line asdfasd
line asdfs
EOF

任务需求：编写脚本 ssh.sh
1）能够自动向远程的 server0、desktop0这两台主机部署文件
2）部署的文件内容为"TEDU.CN"，文件位于 /tmp/mike.txt

#!/bin/bash
for  ip  in  server0  desktop0
do
expect << EOF
spawn ssh  -o StrictHostKeyChecking=no  root@$ip
expect "password" {send "redhat\r" }
expect "#" {send "echo TEDU.CN > /tmp/mike.txt\r" }
expect "#" {send "exit\r" }
EOF
done
echo "文件部署完毕"



任务需求：使用 egrep 完成下列操作
1）列出 /etc/resolv.conf 中包含 net（-i忽略大小写） 的行
2）列出 /etc/resolv.conf 中包含 nameserver 的行
3）列出 /etc/resolv.conf 中不包含 nameserver 的行（-v）
4）列出 /etc/resolv.conf 中以 # 开头或包含 domain 的行（|）
5）列出 /etc/resolv.conf 中包含 172 的行的行号（-n）
6）列出 /etc/resolv.conf 中包含 172 的行的数量（-c）
7）检查 /etc/resolv.conf 中是否已设置 172.25.254.254，如果是则显示yes，不要显示其他无关信息
# egrep  -i net  /etc/resolv.conf
# egrep  nameserver  /etc/resolv.conf
# egrep  -v  nameserver  /etc/resolv.conf
# egrep  '^#|domain'  /etc/resolv.conf
# grep -n 172 /etc/resolv.conf
# grep -c 172 /etc/resolv.conf
# grep -q 172.25.254.254 /etc/resolv.conf && echo yes



正则表达式 ——  通用知识
通过特殊符号来描述一个字符串的特点

a
TEDU



 10k+
  10k?







任务需求：
1）提取网卡eth0的mac地址
# ifconfig eth0 | egrep -o '([0-9a-f]{2}:){5}[0-9a-f]{2}'

aa:bb:cc:dd:ee:ff
==》 ..:..:..:..:..:..
==》
[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}:[0-9a-f]{2}
==》
([0-9a-f]{2}:){5}[0-9a-f]{2}

2）提取网卡eth0的IP地址
# ifconfig eth0 | egrep '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'

aaa.bbb.ccc.ddd
==》.{1,3}\..{1,3}\..{1,3}\..{1,3}
==》[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}
==》([0-9]{1,3}\.){3}[0-9]{1,3}

匹配1开头、1结尾的IP地址字符串：
1[0-9]{0,2}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{0,2}1


+ 		--》匹配最少一次
?  		--》匹配最多一次
*  		--》匹配任意多次
.* 		--》匹配任意长度的任意字符
[ ]  		--》匹配范围内任意字符
{n,m} 	--》匹配前面的字符或字符串指定的次数（从n～m次）

任务需求：
1）找出 /etc/resolv.conf 文件中每一行的前3个字符
# egrep  -o  '^...'  /etc/resolv.conf
# cat  /etc/resolv.conf  |  cut  -b  -3
2）找出 yum  info  httpd 命令行结果中包含 http://。。。/ 的行
# yum  info  httpd | egrep  'http://.*/'


转义（改变字符本来的含义）符号\

\b  代表单词边界
\.     只匹配一个 .


总结：
1）字符串处理（子串截取、替换、砍头、剁脚、初始值）
2）数组
3）expect预期交互
4）正则表达式


任务需求：
1）新建一个文档 reg.txt ，内容如下
12345@163.com
http://sina.com.cn
172.25.0.11
版权所有@2018
1.2.3.4.5.6.7.8
zhsan@tarena.com.cn
2）列出 reg.txt 文件中以数字开头的行
3）列出 reg.txt 文件中合法的电子邮件地址
4）列出 reg.txt 文件中合法的电子邮件地址


NSD SHELL DAY01
Shell概述
	Shell环境及特性
		什么是Shell
		Shell的使用方式
		常见的Shell程序种类
			usermod、chsh
		Bash基本特性
	历史命令
		存放位置及数量
			~/.bash_history
			/etc/profile
		操作历史命令
			history -c
			!cat
	I/O设备与重定向
		交互式硬件设备
			/dev/stdin:0  /dev/stdout:1   /dev/stderr:2
		重定向操作
			<   >  >>  2>   2>>    &>
编写与执行脚本
	第一个Shell脚本
		什么是Shell脚本
		Shell版HelloWorld的诞生
	脚本构成及执行
		规范的脚本构成
			1脚本声明  2注释信息   3可执行语句
		脚本的执行方式
			作为命令字   作为参数(sh source bash .)
		调试Shell脚本
	简单脚本应用
		示例1：快速配置YUM
		示例2：快速搭建FTP服务
Shell变量
	变量的设置和取消
		什么是变量
		定义/赋值/查看变量
			$var1  ${var1}6.5
		取消变量
			unset x
	变量的种类
		Shell变量的分类角度
			存储类型：整数型、浮点型、双精度浮点型、字符型
			使用类型：环境变量、位置变量、预定义变量、自定义变量
		环境变量
			/etc/profile、~/.bash_profile
			命令:env set
			PWD、PATH、USER、LOGNAME、UID
			SHELL、HOME、PS1、PS2
		预定义变量
			$0  $$   $?  $#   $*
		位置变量
			$1 $2  ...  ${10} ${11}
	变量值及范围控制
		扩展赋值操作
			双引号  单引号 反撇号
			`pwd` $(pwd)
		read标准输入取值
			read -p "请输入:" pass
			stty -echo 关闭终端输出
		变量的作用范围
			局部变量    
			全局变量：export PATH=/bin/sbin
							export -n PATH 取消全局变量
NSD SHELL DAY02
数值运算
	整数运算
		基本运算类别
		expr运算工具
			expr $X \* $Y
		$[]算式替换
			$[X*21]  $((X*21))
			let i++; let i-=7
		变量的自增/减等操作
	小数运算
		整数运算的局限性
		使用bc实现小数运算
			echo "scale=4;$A*56.78;5/3" | bc
		小数值的比较
			echo "$A<=$B" | bc   输出0或1
			> 、>=、<、<=、==、!=
条件测试
	测试操作概述
		Shell脚本的智能化
		test测试操作
			test 选项 参数  
			[ 选项  参数 ]
	常见的测试操作
		整数值比较
			-eq  -ne  -ge  -le  -gt  -lt
		字符串比较
			-z  为空
			-n  不为空   ！ -z
			==    相同
			!=     不相同
		文件状态测试
			-e  -d  -f  -r  -w  -x
	组合多个条件
		逻辑分隔操作
			&& 左边执行成功才执行右边
			||  左边执行不成功才执行右边
		条件组合应用
if选择结构
	单分支结构
		语法格式及特点
		if单分支的执行流程
			if []  then  fi
		脚本应用示例
	双分支结构
		语法格式及特点
		if双分支的执行流程
			if [] then  else  fi
		脚本应用示例
	多分支结构
		语法格式及特点
		if多分支的执行流程
			if [] then elif [] then else fi
		脚本应用示例
NSD SHELL DAY03
循环结构
	for循环
		语法结构及特点
		for循环的执行流程
			for i in list do 命令序列 deno
			for ((i=1;i<5;i+=2)) do 命令序列 done
		脚本应用示例
	while循环
		语法结构及特点
		while循环的执行流程
			while 条件测试 do  命令序列  done
		脚本应用示例
case语句
	case分支结构
		语法结构及特点
		case分支的执行流程
			case 变量值 in 模式1) 命令序列1;;  模式2) 命令序列2;;   *) 默认命令  esac
		脚本应用示例
函数及中段控制
	Shell函数
		关于函数的认识
		函数的定义与调用
			function 函数名(){}
			函数名(){}
		函数应用示例
	中段及退出
		中段/退出及相关指令
			break   continue   exit
		脚本中段示例
		脚本退出示例
NSD SHELL DAY04
字符串处理
	子串截取
		子串截取的方法
			${var:起始位置0:长度}
			expr substr "$var" 起始位置1 长度
			echo $var | cut -b 起始位置1-结束位置
		子串截取示例
		路径分割
	子串替换
		子串替换的方法
			${var/old/new}
			${var//old/new}
		子串替换示例
	按条件掐头去尾
		字符串掐头
			${var#*关键词}
			${var##*关键词}
		字符串去尾
			${var%关键词*}
			${var%%关键词*}
		脚本应用示例
	变量初始值处理
		初值的检测及设置
			${var:-word} null时返回“word”
		脚本应用示例
扩展的脚本技巧
	Shell数组
		关于变量的类型
		定义/赋值数组
			FQDN[0]=www.tarena.com
		输出数组元素
			${数组名[下标]}    单个数组
			${数组名[@]}			所有数组元素
			${#数组名[@]}		元素个数
			${数组名[@]:起始下标:元素个数}  多个连续数组
	expect预期交互
		expect简介
		expect应用示例
			expect << EOF
			spawn ssh root@192.168.1.1
			expect "password" {send "123456\r"}
			expect "#"   {send "touch /a.txt\r"}
			expect "#"  {send "exit\r"}
			}
正则表达式
	正则表达式概述
		什么是正则表达式
		egrep过滤工具
			以行为单位，逐行进行处理
			grep -E 允许使用扩展正则
			-i：忽略字母大小写
			-v：条件取反
			-c：统计匹配的行数
			-q：用于检测，无输出，$?=0说明有匹配
			-n：显示匹配结果所在的行号
			--color：标红显示匹配字串
	基本元字符
		行首尾及单字匹配
			^abc     abc$    
			.除换行符以外的任意单个字符
		未定匹配次数
			(abc)+   (abc)?   (abc)*   .*
		{}限定次数
			(ab){3}  (ab){1,3}  (ab){2,}
	其他元字符
		[]范围内单字匹配 
			内部^取反
			[alc45_?]
			[a-z] [A-Z] [0-9] [a-Z0-9] [^A-Z]  ^[^a-z]
		整体及边界匹配
			(ab){1,3}  root|bin   \broot\b  \<th   \<root\>
NSD SHELL DAY05
sed基本用法
	sed命令解析
		sed工具概述
		命令格式解析
			前置命令 | sed [选项] '编辑指令'
			sed [选项] '编辑指令' 文件
			-n 屏蔽默认输出
			-i 直接修改文件内容
			-r 启用扩展的正则  应放在首选位置
			sed -n '2,4p' /etc/passwd   2-4行
			sed -n 'p' /etc/passwd			全部行
			sed -n '/root/p' /etc/passwd 包含root的行
		基本的处理动作
			p 打印行   d 删除行
			s/old/new/  替换第1个
			s/old/new/3 替换第3个
			s/old/new/g  替换所有
			分隔符"/"可以改用任意字符
			sed -n '$=' a.txt 输出文件的行数
	常见处理操作示例
		输出文本
		删除文本
		替换文本
	sed应用案例
		修改IP配置
		修改网站根目录
		使用sed脚本
sed文本块处理
	文本块概述
		文本块的应用场景
		sed的文本块处理动作
			2iYY 第2行前添加文本行“YY”
			4,7iYY 第4-7行的每一行前添加文本行
			2aYY 在第2行之后添加文本
			/^XX/aYY 以XX开头的行之后添加文本
			2cYY 第2行的内容修改为“YY”
	文本块处理的应用
		处理单行文本
		处理多行文本
			#sed -n '2cXX\nYY' m.txt
			#sed -n '2cXX\
			>YY' m.txt
sed高级应用
	文件导入导出
		导入导出操作
			3r b.txt 第3行下方插入文件b.txt
			4,7r b.txt 第4-7行后每一行插入文件b.txt
			3w c.txt 第3行另存为文件c.txt
			4,7w c.txt 第4-7行另存为文件c.txt
		sed复制剪切
			模式空间  保持空间
			H：追加复制   h：覆盖复制  G：追加粘贴   g：覆盖复制 
			sed '1,3H;$G' reg.txt   第1-3行复制到文件末尾
			sed '1h;2,3H;$G' reg.txt  避免出现空行
		复制剪切操作示例
	sed流控制
		！取反操作
			sed -n '/bash$/!p' /etc/passwd  以bash结尾的不输出
	sed综合脚本示例
		任务需求
		思路讲解及分析
NSD SHELL DAY06
awk基本用法
	awk命令解析
		awk工具概述
		命令格式解析
			前置命令 | awk [选项] '[条件]{指令}'
			awk [选项] '[条件]{指令}' 文件
			-F: 指定分隔符为:
		awk内置变量
			FS  $n  $0  NF  NR
		awk过滤的时机
			BEGIN{} {} END{}
	awk处理条件
		处理条件概述
			正则  数值/字符串比较  逻辑比较  运算符
		条件设置示例
			'/^ro/{print}' 以ro开头
			'$7!~/bash$/{print $1,$7}' 正则不匹配
			'NR==2{print}'  输出第2行
			'$2!="XX"{print}' 输出第2列不是XX的行
			'NF>=2{print}' 输出包含2个以上字段的行
		多个条件的组合
			'$3>=0&&$3<2{print $1,$3}'  
			'$3==1||$3==7{print $1,$3}'
		变量的运算
			'NR%2==1{print}'
			'BEGIN{i=0} {i+=NF} END{print i}'
			'BEGIN{i=0}($0%3=0)&&($0%13==0){i++} END{print i}'
	awk综合脚本示例
		任务需求
		思路讲解及分析
awk高级应用
	awk流程控制
		分支结构
			if(){}
			if(){}else{}
			if(){}else if(){}..else{}
		循环结构
		其他控制语句
	awk数组
		数组的定义及使用
			统计次数：awk '{ip[$1]++} END{for(i in ip){print ip[i],i}}' /var/log/httpd/access_log
			排序：awk '{ip[$1]++} END{for(i in ip){print ip[i],i}}' /var/log/httpd/access_log | sort -n
			统计次数：awk '{ip[$7]++} END{for(i in ip){print ip[i],i}}' /etc/passwd
		awk数组的经典应用
	awk案例分析
		任务需求
		思路讲解及分析
NSD SHELL DAY06
项目时战：脚本
	一键部署软件脚本
		任务需求
		思路讲解及分析
	启动脚本
		任务需求
		思路讲解及分析
	监控脚本
		任务需求
		思路讲解及分析
	安全检测脚本
		任务需求
		思路讲解及分析
	进度显示脚本
		任务需求
		思路讲解及分析
	
NSD OPERATION DAY01
Nginx安装与升级
	Nginx安装
		web服务器对比
			Apache、Nginx、Tengine、Lighttpd
			Tomcat、IBM WebSphere、Jboss
			IIS
		Nginx简介
			轻量级 高性能的HTTP和反向代理服务器
			源码安装
				依赖：gcc pcre-devel openssl-devel
				./configure：--prefix、--user、--group、--with-模块名
				prefix目录：/usr/local/nginx/
				主配置文件：conf/nginx.conf
				日志文件：logs/access.log  logs/error.log
				网页目录：html
				启动脚本：sbin/nginx
		Nginx进程管理
			#/usr/local/nginx/sbin/nginx  #启动服务
			-V：查看编译参数、-t：测试默认配置文件
			-c：指定配置文件，启动服务
			#nginx -s stop
			#nginx -s reload
			#nginx -V
			#ln -s /usr/local/nginx/sbin/nginx /usr/sbin
			----------------------------------------------------------------
			#ps aux | grep nginx
			#netstat -anptul | grep nginx
			#ss -anptu | grep nginx
			#ss -anptu | grep :80
	Nginx升级
		平滑升级Nginx
			源码编译安装到“make”步骤
			#mv nginx nginxold  #备份旧脚本
			#cp /nginx-1.12.2/objs/nginx /usr/local/nginx/sbin/ 
			#make upgrade  //升级软件
				也可以手动kill掉nginx进程，重新启动新的进程
			#./nginx -v    #查看软件版本
Nginx服务器
	Nginx配置解析
		配置文件结构
			http{
				server{
					location /{ }}}
		全局选项-在http的外面，文件的最前面
			user nginx;    //进程所有者
			worker_processes 1;   //启动进程数量
			error_log /var/log/nginx/error.log   //日志文件
			pid  /var/run/nginx.pid;    //PID文件
			events{worker_connections 1024;}  //单个进程最大并发量
		配置容器
			server {
				listen 80;
				server_name localhost;
				location / {
					root html;
					index index.html index.htm;
				}			
			}
			----------------------------------------------
			可以配置多个server，并指定不同的server_name
		用户认证-访问页面需要用户身份认证
			#放置在server内即可
			auth_basic "Input Password";  //认证提示符
			auth_basic_user_file /usr/local/nginx/pass;	//认证密码文件	
			---------------------------------------------------------
			#yum -y install httpd-tools
			#创建认证用户 -c为追加写入
			#htpasswd -c /usr/local/nginx/pass  admin	
Nginx虚拟主机
	三种模式虚拟主机
		基于域名的虚拟主机-指定不同的域名
			server_name www.a.com
		基于端口的虚拟主机-侦听不同的端口
			listen 8080
		基于IP的虚拟主机
			listen 192.168.0.1:80;
HTTPS加密网站
	密钥
		对称密钥
			AES  DES （RAR、ZIP加密算法）
		非对称密钥
			RSA  DSA （https、ssh）
		Hash值
			MD5 SHA256 SHA512 (数据完整性校验、文件妙传)
	SSL虚拟主机
		生成密钥
			公钥、私钥、证书
			#openssl genrsa > cert.key 2048   //生成私钥
			#openssl req-new-x509-key cert.key > cert.pem //生成证书
		SSL加密网站
			server {
				listen 443 ssl;
				server_name www.c.com
				ssl_certificate cert.pem;
				ssl_certificate_key cert.key;
				ssl_session_cache shared:SSL:1m;
				ssl_session_timeout 5m;
				ssl_ciphers HIGH:!aNULL:!MD5;
				ssl_prefer_server_ciphers on;
				location /{
					root html;
					index index.html index.html;				
				}
			}
NSD OPERATION DAY02
部署LNMP
	LNMP基础知识
		什么是LNMP
			linux nginx mysql/mariadb php/pythen
	LNMP安装
		安装Nginx-源码安装
		安装MariaDB
			#yum -y install mariadb mariadb-server mariadb-devel
		安装PHP
			#yum -y install php
			#yum -y localinstall php-fpm-5.4.16-42.el7.x86_64.rpm
		安装PHP扩展
			#yum -y install php-mysql  #连接数据库扩展
		启动服务
			#nginx    #ss -anptu | grep :80
			#systemctl start mariadb   #ss -anptu | grep :3306
			#systemctl start php-fpm   #ss -anptu | grep :9000
Nginx+FastCGI
	FastCGI
		FastCGI工作原理
			WebServer载入FastCGI-->FastCGI启动多个解释进程-->解释完毕将标准输出与错误信息从同一连接返回
		FastCGI简介
			PHP、C/C++、Java、Perl、Python、Ruby等
		FastCGI缺点
			多进程，比多线程(CGI)消耗更多的服务器内存
		配置FastCGI
			#vim /etc/php-fpm.d/www.conf
			pm.max_children = 50
			pm.start_servers = 5
	Nginx
		编辑nginx.conf
		测试
Nginx高级技术
	地址重写
		基础知识
			来访的URL请求，改写为服务器可以处理的另一个URL的过程
			缩短URL，隐藏实际路径提高安全性
			易于用户记忆和键入
			易于被搜索引擎收录
		rewrite语法
			rewrite regex replacement flag
			if(条件){}
		应用案例
			location /{
				... ...
				rewrite "/a.html$" /b.html;
				rewrite \.(gif|jpg)$ /logo.png;
				rewrite ^/(.*) http://bbs.tarena.com/$1;
				if($http_user_agent~firefox){
					rewrite ^(.*)$ /nginx-firefox/$1 break;				
				}
			}
		正则表达式
			~	~*	!~		!~*
		rewrite选项
			rewrite regex replacement flag
			flag： break、last、redirect、permanent
			last:停止执行其他重写规则，根据URI继续搜索其他location，地址栏不变
			break：停止执行其他的重写规则，编程本次请求
			redirect：302临时重定向
			permanent：301永久重定向
NSD OPERATION DAY03
Nginx调度器
	HTTP调度
		Nginx反向代理架构
		Nginx反向代理语法格式
			http{
				upstream sergrp {        //定义源服务器组
					#ip_hash
					#server 192.168.8.5:80 weight=2;
					server 192.168.8.5:80 down;
					server 192.168.8.4:80;
					server 192.168.8.6:80 backup;
					server 192.168.8.3:80 max_fails=2 fail_timeout=30;				
				}
				server {
				 listen 80;
					server_name www.tarena.com;    //web主机名
					location /{
						... ...
						proxy_pass http://sergrp;		//调用服务组
					}
				}
			}
		Nginx调度算法
			轮询(默认的)：逐一循环调度
			Weight：指定轮询几率，权重值和访问比率成正比
			ip_hash：根据客户端IP分配固定的后端服务器
		服务器组主机状态
			down：表示当前server不参与负载
			max_fails：允许请求失败的次数（默认为1）
			fail_timeout：max_fails次失败后，暂停提供服务的时间
			backup:备用服务器
		案例应用
	TCP/UDP调度
		模块
			ngx_stream_core_module模块
			使用--with-stream开启该模块
		语法格式
			stream {
				upstream backend {
					server 192.168.2.100:22;  //后端SSH服务器的IP和端口
					server 192.168.2.200:22;
				}
				server {
					listen 12345;        //Nginx监听的端口
					proxy_connect_timeout 1s;
					proxy_timeout 3s;
					proxy_pass backend;
				}
			}
			... ...
			#ssh 192.168.4.5 -p 12345
		案例应用
NSD OPERATION DAY04
memcached原理
	基础知识
		传统web架构的问题
			大数据量：RDBMS负担加重、数据库响应恶化、网站显示延迟
		数据存储位置对比
			性能：CPU缓存>内存>磁盘>数据库
	memcached概述
		memcached简介
			高性能分布式缓存服务，集中缓存数据库查询结果
			减少数据库访问次数，提高动态web应用的响应速度  
		内存管理机制
			SlabAllocation机制
			memcached使用名为Least Recently Used(LRU)机制来分配空间
部署memcached
	安装软件
		安装memcached-#yum -y install memcached
		启动memcached
			/etc/sysconfig/memcached
			/usr/lib/systemd/system/memcached.service
			#systemctl start memcached
	测试memcached
		查看memcached的内部状态-#telnet localhost 11211
		telnet测试memcached
	PHP+Memcached
		介绍
			部署参考Nginx+FastCGI
		安装PHP的memcached扩展
			#yum install php-pecl-memcache
		编写PHP页面
Session共享
		基本概念
			Session & cookies
				服务器端  &  客户端
			案例拓扑
		本地Session
			部署Nginx调度器
				upstream webs {
					server 192.168.2.100:80;
					server 192.168.2.200:80;				
				}
				server {
					location / {
						proxy_pass http://webs;
					}
				}
			部署后端LNMP主机
			部署测试页面
				有登录操作的php页面
			客户端访问
				客户端访问，刷新页面后需要登录两次
			验证Session
				#ls /var/lib/php/session
		实现Session共享
			修改PHP配置文件
				#vim /etc/php-fpm.d/www.conf
				php_value[session.save_handler] = memcache
				php_value[session.save_path] = "tcp://192.168.2.5:11211"
			重启服务
				#systemctl restart php-fpm
			测试Session共享
				session保存在memcached服务器，实现共享
NSD OPERATION DAY05
Tomcat服务器
	概述
		Java简介
			跨平台、面向对象 通用、高效、平台移植性、安全
			Java SE、Java EE、Java ME
		JDK简介
			Java语言的软件开发工具包
				包括：java运行环境、java工具、java基础的类库
			JRE：JDK的子集
				jvm、核心类库和支持文件、不包含开发工具
		Java Servlet
			java扩展web服务功能组件规范
			常见Servlet：
				IBM-websphere、Oracle-weblogic
				Apache-tomcat、RedHat-Jboss
	安装Tomcat
		安装部署JDK
			#yum install java-1.8.0-openjdk
			#yum install java-1.8.0-openjdk-headless
		安装部署Tomcat
			解包-->复制到指定目录
				bin/----主程序目录	lib/----库文件目录
				logs/----日志目录		temp/----临时目录
				work/----自动编译目录jsp代码转换servlet
				conf/----配置文件目录		webapps/----页面目录
			启动：#/usr/local/tomcat/bin/startup.sh
			停止：#/usr/local/tomcat/bin/shutdown.sh
		测试服务器
			默认启动8080
			firefox http://localhost:8080
Tomcat应用案例
	Tomcat虚拟主机
		主配置文件解析-框架
			/usr/local/tomcat/conf/server.xml
			<?xml version='1.0' encoding='utf-8'?>
			<Server port="8005" shutdown="SHUTDOWN">
				<Service name="Catalina">
						<Connector port="8080" protocol="HTTP/1.1"
		           connectionTimeout="20000"
		           redirectPort="8443" />
						<Connector port="8009" protocol="AJP/1.3"
							 redirectPort="8443" />
						<Engine name="Catalina" defaultHost="localhost">
							<Host name="localhost"  appBase="webapps"
								unpackWARs="true" autoDeploy="true">
							</Host>
						</Engine>
				  </Service>
				</Server>
		基于域名的虚拟主机
			...基于域名...
			<Host name="www.a.com"  appBase="a" unpackWARs="true" autoDeploy="true"> </Host>
      <Host name="www.b.com"  appBase="b" unpackWARs="true" autoDeploy="true"> </Host>
			#mkdir -p /usr/local/tomcat/{a,b}/ROOT
			...给host添加context...
			<Host name="www.a.com"  appBase="a"
            unpackWARs="true" autoDeploy="true">
        <Context path="/test" docBase="/var/www/html/" />
      </Host>
      <Host name="www.b.com"  appBase="b"
            unpackWARs="true" autoDeploy="true">
        <Context path="" docBase="base" reloadable="true" />
      </Host>
			//appBase定义基础目录，基础目录下可以有很多项目，默认项目ROOT
			//docBase定义首页路径，默认为ROOT
			//path指定于用户访问的URL，docBase指定页面存储的位置
		Tomcat工作原理
			域名未绑定端口，如果设置SSL443端口，默认所有的虚拟主机都会开启
		SSL加密站点
			创建私钥和证书
			<Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol" maxThreads="150" SSLEnabled="true" scheme="https" secure="true" keystoreFile="/usr/local/tomcat/keystore" keystorePass="123456" clientAuth="false" sslProtocol="TLS" />
			https://localhost:8443
		日志
			.. ..
			<Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
			<Context path="/test" docBase="/var/www/html/" />
			<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
						   prefix=" aa_access" suffix=".txt"
						   pattern="%h %l %u %t &quot;%r&quot; %s %b" />
			</Host>
			<Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true">
			<Context path="" docBase="base" />
			<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
						   prefix=" bb_access" suffix=".txt"
						   pattern="%h %l %u %t &quot;%r&quot; %s %b" />
			</Host>
			.. ..
	Tomcat集群
		Nginx反向代理tomcat
			# vim  /usr/local/nginx/conf/nginx.conf
			http{
				upstream toms {
					server 192.168.2.100:8080;
					server 192.168.2.200:8080;
				}
				server  {
					listen 80;
					server_name localhost;
					location / {
						proxy_pass  http://toms;
					}
				}
			}
Varnish代理服务器
	代理服务器概述
		基本概念
			Proxy web访问加速  IP伪装  “翻墙”
		Varnish服务器
			开源反向代理服务器 性能高、速度快、管理方便
	部署Varnish
		编译安装
			#useradd -s /sbin/nologin varnish
			必须要创建一个varnish账户
			#cp etc/example.vcl /usr/local/etc/default.vcl
		Varnish服务器
			#ls /usr/local/bin/
			#ls /usr/local/sbin/
	加速服务器
		快速部署Varnish
			#vim /usr/local/etc/default.vcl
			backend default {
				.host = "192.168.2.100";  //tomcat服务
				.port = "8080";			
			}
			启动：#varnishd -f /usr/local/etc/default.vcl
			#varnishd -s malloc,128M  //使用内存作为缓存，空间为128M
			#varnishd -s file,/var/lib/varnish_storage.bin,1G
			//定义varnish使用文件作为缓存
		缓存管理
		Varnish日志
		Varnish状态




















